[
  {
    "objectID": "slides/w4d2.html#annoucements",
    "href": "slides/w4d2.html#annoucements",
    "title": "Functions",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm 1 is in two weeks, Oct 3, during lab time.\nLab 1 & 2 grades will be released soon on D2L."
  },
  {
    "objectID": "slides/w4d2.html#agenda",
    "href": "slides/w4d2.html#agenda",
    "title": "Functions",
    "section": "Agenda",
    "text": "Agenda\n\nReview Data Structures\nFunctions"
  },
  {
    "objectID": "slides/w4d2.html#vectors",
    "href": "slides/w4d2.html#vectors",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nConsider the vectors:\n\nnames &lt;- c(\"Western red cedar\", \"Douglas-fir\", \"Pacific madrone\")\nages &lt;- c(NA, 120, 82)\nconifer &lt;- c(TRUE, TRUE, FALSE)\n\nWhat are their types?"
  },
  {
    "objectID": "slides/w4d2.html#vectors-1",
    "href": "slides/w4d2.html#vectors-1",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nWhat are their types?\n\ntypeof(names)\n\n[1] \"character\"\n\ntypeof(ages)\n\n[1] \"double\"\n\ntypeof(conifer)\n\n[1] \"logical\"\n\n\nWhy are these different? Aren’t they all vectors?\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w4d2.html#vectors-2",
    "href": "slides/w4d2.html#vectors-2",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nWhat’s the average age?\n\nmean(ages)\n\n[1] NA"
  },
  {
    "objectID": "slides/w4d2.html#vectors-3",
    "href": "slides/w4d2.html#vectors-3",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nWhat’s the average age?\n\nmean(ages)\n\n[1] NA\n\nmean(ages, na.rm = TRUE)\n\n[1] 101"
  },
  {
    "objectID": "slides/w4d2.html#vectors-4",
    "href": "slides/w4d2.html#vectors-4",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nHow do we get the second element of conifer?\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w4d2.html#vectors-5",
    "href": "slides/w4d2.html#vectors-5",
    "title": "Functions",
    "section": "Vectors",
    "text": "Vectors\nHow do we get the second element of conifer?\n\nconifer[2]\n\n[1] TRUE"
  },
  {
    "objectID": "slides/w4d2.html#dataframes",
    "href": "slides/w4d2.html#dataframes",
    "title": "Functions",
    "section": "Dataframes",
    "text": "Dataframes\nConsider the dataframe:\n\nmy_df &lt;- data.frame(\n  names = names,\n  ages = ages,\n  conifer = conifer\n)\n\nmy_df\n\n              names ages conifer\n1 Western red cedar   NA    TRUE\n2       Douglas-fir  120    TRUE\n3   Pacific madrone   82   FALSE"
  },
  {
    "objectID": "slides/w4d2.html#dataframes-1",
    "href": "slides/w4d2.html#dataframes-1",
    "title": "Functions",
    "section": "Dataframes",
    "text": "Dataframes\nHow do we access the third row of my_df?\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w4d2.html#dataframes-2",
    "href": "slides/w4d2.html#dataframes-2",
    "title": "Functions",
    "section": "Dataframes",
    "text": "Dataframes\nHow do we access the third row of my_df?\n\nmy_df[3, ]\n\n            names ages conifer\n3 Pacific madrone   82   FALSE"
  },
  {
    "objectID": "slides/w4d2.html#dataframes-3",
    "href": "slides/w4d2.html#dataframes-3",
    "title": "Functions",
    "section": "Dataframes",
    "text": "Dataframes\nHow do we access the age in the third row of my_df?\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w4d2.html#dataframes-4",
    "href": "slides/w4d2.html#dataframes-4",
    "title": "Functions",
    "section": "Dataframes",
    "text": "Dataframes\nHow do we access the age in the third row of my_df?\n\nmy_df[3, \"ages\"]\n\n[1] 82"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators",
    "href": "slides/w4d2.html#comparison-and-logical-operators",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nYou learned about some very important operators in Chapter 4:\n\n\n&gt; and &lt;: greater than and less than\n&gt;= and &lt;=: greater than or equal to and less than or equal to\n== and !=: equal to and not equal to\n&: and\n|: or\n%in%: in"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-1",
    "href": "slides/w4d2.html#comparison-and-logical-operators-1",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn ages, get all ages that are greater than 82\n\n\n[1]  NA 120  82\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-2",
    "href": "slides/w4d2.html#comparison-and-logical-operators-2",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn ages, get all ages that are greater than 82\n\nages[ages &gt; 82]\n\n[1]  NA 120"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-3",
    "href": "slides/w4d2.html#comparison-and-logical-operators-3",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn ages, get all ages that are greater than 82\n\nages[ages &gt; 82]\n\n[1]  NA 120\n\n\nWhat’s going on with that NA? Try:\n\nages[ages &gt; 82 & !is.na(ages)]\n\n[1] 120"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-4",
    "href": "slides/w4d2.html#comparison-and-logical-operators-4",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are not conifers\n\n\n              names ages conifer\n1 Western red cedar   NA    TRUE\n2       Douglas-fir  120    TRUE\n3   Pacific madrone   82   FALSE\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-5",
    "href": "slides/w4d2.html#comparison-and-logical-operators-5",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are not conifers\n\nmy_df[!my_df$conifer, ]\n\n            names ages conifer\n3 Pacific madrone   82   FALSE"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-6",
    "href": "slides/w4d2.html#comparison-and-logical-operators-6",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are Pacific madrone\n\n\n              names ages conifer\n1 Western red cedar   NA    TRUE\n2       Douglas-fir  120    TRUE\n3   Pacific madrone   82   FALSE\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-7",
    "href": "slides/w4d2.html#comparison-and-logical-operators-7",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are Pacific madrone\n\nmy_df[my_df$names == \"Pacific madrone\", ]\n\n            names ages conifer\n3 Pacific madrone   82   FALSE"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-8",
    "href": "slides/w4d2.html#comparison-and-logical-operators-8",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are either Pacific madrone or Douglas-fir.\n\n\n              names ages conifer\n1 Western red cedar   NA    TRUE\n2       Douglas-fir  120    TRUE\n3   Pacific madrone   82   FALSE\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w4d2.html#comparison-and-logical-operators-9",
    "href": "slides/w4d2.html#comparison-and-logical-operators-9",
    "title": "Functions",
    "section": "Comparison and logical operators",
    "text": "Comparison and logical operators\nRemember, we can use these operators to subset vectors and dataframes:\nIn my_df, get all rows that are either Pacific madrone or Douglas-fir.\n\nmy_df[my_df$names %in% c(\"Pacific madrone\", \"Douglas-fir\"), ]\n\n            names ages conifer\n2     Douglas-fir  120    TRUE\n3 Pacific madrone   82   FALSE"
  },
  {
    "objectID": "slides/w4d2.html#example-write.csv",
    "href": "slides/w4d2.html#example-write.csv",
    "title": "Functions",
    "section": "Example: write.csv()",
    "text": "Example: write.csv()\n\nwrite.csv()"
  },
  {
    "objectID": "slides/w4d2.html#example-write.csv-1",
    "href": "slides/w4d2.html#example-write.csv-1",
    "title": "Functions",
    "section": "Example: write.csv()",
    "text": "Example: write.csv()\n\nwrite.csv(\n  x = dataset,\n  file = \"path/to/output.csv\"\n)"
  },
  {
    "objectID": "slides/w4d2.html#example-write.csv-2",
    "href": "slides/w4d2.html#example-write.csv-2",
    "title": "Functions",
    "section": "Example: write.csv()",
    "text": "Example: write.csv()\n\nwrite.csv(\n  x = dataset,\n  file = \"path/to/output.csv\"\n)"
  },
  {
    "objectID": "slides/w4d2.html#example-write.csv-3",
    "href": "slides/w4d2.html#example-write.csv-3",
    "title": "Functions",
    "section": "Example: write.csv()",
    "text": "Example: write.csv()\n\nwrite.csv(\n  x = dataset,\n  file = \"path/to/output.csv\"\n)\n\n\n\nx and file are arguments supplied to the write.csv() function.\nFunctions in R fall into three categories:\n\nAlready built-in functions like read.csv(),\nfunctions from packages that you install onto your computer, and\nentirely custom function built by you!"
  },
  {
    "objectID": "slides/w4d2.html#built-in-base-functions",
    "href": "slides/w4d2.html#built-in-base-functions",
    "title": "Functions",
    "section": "Built-in ‘base’ functions",
    "text": "Built-in ‘base’ functions"
  },
  {
    "objectID": "slides/w4d2.html#functions-from-packages-you-install",
    "href": "slides/w4d2.html#functions-from-packages-you-install",
    "title": "Functions",
    "section": "Functions from packages you install",
    "text": "Functions from packages you install"
  },
  {
    "objectID": "slides/w4d2.html#custom-functions-built-by-you",
    "href": "slides/w4d2.html#custom-functions-built-by-you",
    "title": "Functions",
    "section": "Custom functions built by you!",
    "text": "Custom functions built by you!"
  },
  {
    "objectID": "slides/w4d2.html#writing-a-function",
    "href": "slides/w4d2.html#writing-a-function",
    "title": "Functions",
    "section": "Writing a function",
    "text": "Writing a function\n\nhello_world &lt;- function() {\n  \n}"
  },
  {
    "objectID": "slides/w4d2.html#writing-a-function-1",
    "href": "slides/w4d2.html#writing-a-function-1",
    "title": "Functions",
    "section": "Writing a function",
    "text": "Writing a function\n\nhello_world &lt;- function() {\n  \n}\n\nhello_world()\n\nNULL"
  },
  {
    "objectID": "slides/w4d2.html#writing-a-function-2",
    "href": "slides/w4d2.html#writing-a-function-2",
    "title": "Functions",
    "section": "Writing a function",
    "text": "Writing a function\n\nhello_world &lt;- function() {\n  return(\"hello!\")\n}"
  },
  {
    "objectID": "slides/w4d2.html#writing-a-function-3",
    "href": "slides/w4d2.html#writing-a-function-3",
    "title": "Functions",
    "section": "Writing a function",
    "text": "Writing a function\n\nhello_world &lt;- function() {\n  return(\"hello!\")\n}\n\nhello_world()\n\n[1] \"hello!\""
  },
  {
    "objectID": "slides/w4d2.html#writing-an-interesting-function",
    "href": "slides/w4d2.html#writing-an-interesting-function",
    "title": "Functions",
    "section": "Writing a(n interesting) function",
    "text": "Writing a(n interesting) function\n\npow &lt;- function(x, v) {\n  result &lt;- x^v\n  return(result)\n}\n\n\n\nWhat does the pow() function do?\nWhat arguments does pow() take?\nWhat will pow(5, 2) return?\nWhat will pow(v = 5, x = 2) return?\nWhat will pow(\"ten\", \"two\") return?\nWhat will pow(x = 5, z = 2) return?\n\n\n\n\n\n−+\n02:00"
  },
  {
    "objectID": "slides/w4d2.html#pow-test",
    "href": "slides/w4d2.html#pow-test",
    "title": "Functions",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25"
  },
  {
    "objectID": "slides/w4d2.html#pow-test-1",
    "href": "slides/w4d2.html#pow-test-1",
    "title": "Functions",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32"
  },
  {
    "objectID": "slides/w4d2.html#pow-test-2",
    "href": "slides/w4d2.html#pow-test-2",
    "title": "Functions",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/w4d2.html#pow-test-3",
    "href": "slides/w4d2.html#pow-test-3",
    "title": "Functions",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\npow(x = 5, z = 2)\n\nError in pow(x = 5, z = 2): unused argument (z = 2)"
  },
  {
    "objectID": "slides/w4d2.html#errors",
    "href": "slides/w4d2.html#errors",
    "title": "Functions",
    "section": "Errors",
    "text": "Errors\nConsider the following errors:\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\npow(x = 5, z = 2)\n\nError in pow(x = 5, z = 2): unused argument (z = 2)\n\n\n\n\nWhat do/don’t you like about each error?\nWhich error message is better? Why?\n\n\n\n\n\n−+\n02:00"
  },
  {
    "objectID": "slides/w4d2.html#informative-error-messages-1",
    "href": "slides/w4d2.html#informative-error-messages-1",
    "title": "Functions",
    "section": "Informative Error Messages",
    "text": "Informative Error Messages\n\nnew_pow &lt;- function(x, v) {\n  stopifnot(\n    \"The x argument value should be numeric.\" = is.numeric(x),\n    \"The v argument value should be numeric.\" = is.numeric(v)\n  )\n  \n  result &lt;- x^v\n  return(result)\n}"
  },
  {
    "objectID": "slides/w4d2.html#testing-pow-vs.-new_pow",
    "href": "slides/w4d2.html#testing-pow-vs.-new_pow",
    "title": "Functions",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric."
  },
  {
    "objectID": "slides/w4d2.html#testing-pow-vs.-new_pow-1",
    "href": "slides/w4d2.html#testing-pow-vs.-new_pow-1",
    "title": "Functions",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric.\n\nnew_pow(10, \"two\")\n\nError in new_pow(10, \"two\"): The v argument value should be numeric."
  },
  {
    "objectID": "slides/w4d2.html#testing-pow-vs.-new_pow-2",
    "href": "slides/w4d2.html#testing-pow-vs.-new_pow-2",
    "title": "Functions",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric.\n\nnew_pow(10, \"two\")\n\nError in new_pow(10, \"two\"): The v argument value should be numeric.\n\nnew_pow(10, 2)\n\n[1] 100"
  },
  {
    "objectID": "slides/w4d2.html#difference-function",
    "href": "slides/w4d2.html#difference-function",
    "title": "Functions",
    "section": "Difference function",
    "text": "Difference function\nWrite a function, called diff(), that takes the difference (subtracts) its first and second arguments.\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/w4d2.html#difference-function-1",
    "href": "slides/w4d2.html#difference-function-1",
    "title": "Functions",
    "section": "Difference function",
    "text": "Difference function\nA possible solution:\n\ndiff &lt;- function(a, b) {\n  result &lt;- a - b\n  return(result)\n}"
  },
  {
    "objectID": "slides/w4d2.html#difference-function-2",
    "href": "slides/w4d2.html#difference-function-2",
    "title": "Functions",
    "section": "Difference function",
    "text": "Difference function\nA possible solution with informative error messages:\n\ndiff &lt;- function(a, b) {\n  stopifnot(\n    \"The a argument value should be numeric.\" = is.numeric(a),\n    \"The b argument value should be numeric.\" = is.numeric(b)\n  )\n  result &lt;- a - b\n  return(result)\n}"
  },
  {
    "objectID": "slides/w4d2.html#difference-function-3",
    "href": "slides/w4d2.html#difference-function-3",
    "title": "Functions",
    "section": "Difference function",
    "text": "Difference function\nTesting:\n\ndiff(5, 2)\n\n[1] 3\n\ndiff(2, 5)\n\n[1] -3\n\ndiff(\"two\", 5)\n\nError in diff(\"two\", 5): The a argument value should be numeric."
  },
  {
    "objectID": "slides/w4d2.html#next-week",
    "href": "slides/w4d2.html#next-week",
    "title": "Functions",
    "section": "Next Week",
    "text": "Next Week\n\nMore functions!\nControl statements: if, else\nLoops!"
  },
  {
    "objectID": "slides/w2d2.html#agenda",
    "href": "slides/w2d2.html#agenda",
    "title": "Reading and Writing Data",
    "section": "Agenda",
    "text": "Agenda\n\nQuiz 1 review\nNavigating your computer\nReading and writing data"
  },
  {
    "objectID": "slides/w2d2.html#recall-your-computers-file-system",
    "href": "slides/w2d2.html#recall-your-computers-file-system",
    "title": "Reading and Writing Data",
    "section": "Recall your computer’s file system",
    "text": "Recall your computer’s file system"
  },
  {
    "objectID": "slides/w2d2.html#what-is-the-root-directory",
    "href": "slides/w2d2.html#what-is-the-root-directory",
    "title": "Reading and Writing Data",
    "section": "What is the root directory?  −+ 01:00 ",
    "text": "What is the root directory?  −+ 01:00"
  },
  {
    "objectID": "slides/w2d2.html#what-is-the-root-directory-1",
    "href": "slides/w2d2.html#what-is-the-root-directory-1",
    "title": "Reading and Writing Data",
    "section": "What is the root directory?",
    "text": "What is the root directory?\n\nC:/"
  },
  {
    "objectID": "slides/w2d2.html#what-is-the-home-directory",
    "href": "slides/w2d2.html#what-is-the-home-directory",
    "title": "Reading and Writing Data",
    "section": "What is the home directory?  −+ 01:00 ",
    "text": "What is the home directory?  −+ 01:00"
  },
  {
    "objectID": "slides/w2d2.html#what-is-the-home-directory-1",
    "href": "slides/w2d2.html#what-is-the-home-directory-1",
    "title": "Reading and Writing Data",
    "section": "What is the home directory?",
    "text": "What is the home directory?\n\nC:/Users/Sarah"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-absolute-path-to-file_1.csv",
    "href": "slides/w2d2.html#how-do-we-specify-the-absolute-path-to-file_1.csv",
    "title": "Reading and Writing Data",
    "section": "How do we specify the absolute path to File_1.csv?  −+ 01:00 ",
    "text": "How do we specify the absolute path to File_1.csv?  −+ 01:00"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-absolute-path-to-file_1.csv-1",
    "href": "slides/w2d2.html#how-do-we-specify-the-absolute-path-to-file_1.csv-1",
    "title": "Reading and Writing Data",
    "section": "How do we specify the absolute path to File_1.csv?",
    "text": "How do we specify the absolute path to File_1.csv?\n\nC:/Users/Sarah/Archive/Data/File_1.csv"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-her-working-directory",
    "href": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-her-working-directory",
    "title": "Reading and Writing Data",
    "section": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is her working directory?  −+ 01:00 ",
    "text": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is her working directory?  −+ 01:00"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-her-working-directory-1",
    "href": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-her-working-directory-1",
    "title": "Reading and Writing Data",
    "section": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is her working directory?",
    "text": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is her working directory?\n\nArchive/Data/File_1.csv"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-cuserssarahdocuments",
    "href": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-cuserssarahdocuments",
    "title": "Reading and Writing Data",
    "section": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is C:/Users/Sarah/Documents?  −+ 01:00 ",
    "text": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is C:/Users/Sarah/Documents?  −+ 01:00"
  },
  {
    "objectID": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-cuserssarahdocuments-1",
    "href": "slides/w2d2.html#how-do-we-specify-the-relative-path-to-file_1.csv-if-sarahs-home-directory-is-cuserssarahdocuments-1",
    "title": "Reading and Writing Data",
    "section": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is C:/Users/Sarah/Documents?",
    "text": "How do we specify the relative path to File_1.csv, if Sarah’s home directory is C:/Users/Sarah/Documents?\n\n../Archive/Data/File_1.csv"
  },
  {
    "objectID": "slides/w2d2.html#whats-going-on-with-those-two-dots-..",
    "href": "slides/w2d2.html#whats-going-on-with-those-two-dots-..",
    "title": "Reading and Writing Data",
    "section": "What’s going on with those two dots? (../)  −+ 01:00 ",
    "text": "What’s going on with those two dots? (../)  −+ 01:00 \n\n\nUsing .. in a file path means “go back a level”\nExample: Say I want to access a file on my desktop:\n\n/home/grayson/Desktop/important_file.pdf\n\nBut, my working directory is as follows:\n\n/home/grayson/Documents\n\nQ: What is the relative path to the important file on my desktop?\nA: ../Desktop/important_file.pdf"
  },
  {
    "objectID": "slides/w2d2.html#now-consider-a-different-computer",
    "href": "slides/w2d2.html#now-consider-a-different-computer",
    "title": "Reading and Writing Data",
    "section": "Now consider a different computer  −+ 01:00 ",
    "text": "Now consider a different computer  −+ 01:00 \n\n\nWe have an absolute path to lab_01.qmd:\n\n/home/elliot/Documents/for128/lab_01.qmd\n\nSay Elliot is using the following working directory:\n\n/home/elliot/research/spatio_temporal\n\nQ1: What operating system might Elliot be using?\nQ2: What is the relative path to lab_01.qmd?\nA1: macOS or Linux\nA2: ../../for128/lab_01.qmd"
  },
  {
    "objectID": "slides/w2d2.html#reading-data",
    "href": "slides/w2d2.html#reading-data",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nIn this course, we’ll focus on reading 2-dimensional data (things that look like spreadsheets) into R."
  },
  {
    "objectID": "slides/w2d2.html#reading-data-1",
    "href": "slides/w2d2.html#reading-data-1",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-2",
    "href": "slides/w2d2.html#reading-data-2",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-3",
    "href": "slides/w2d2.html#reading-data-3",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nR includes a variety of functions for reading data efficiently. One of the most common is read.csv()."
  },
  {
    "objectID": "slides/w2d2.html#reading-data-4",
    "href": "slides/w2d2.html#reading-data-4",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nR includes a variety of functions for reading data efficiently. One of the most common is read.csv().\nTo read data, we first may want to check our working directory:\n\ngetwd()\n\n[1] \"/Users/graysonwhite/Documents/for128-org/FOR128.github.io/slides\""
  },
  {
    "objectID": "slides/w2d2.html#reading-data-5",
    "href": "slides/w2d2.html#reading-data-5",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nR includes a variety of functions for reading data efficiently. One of the most common is read.csv().\nTo read data, we first may want to check our working directory:\n\ngetwd()\n\n[1] \"/Users/graysonwhite/Documents/for128-org/FOR128.github.io/slides\"\n\n\nThen we can find the datasets folder. I’ve kept mine with my labs:\n\nlist.files(\"../labs/\")\n\n [1] \"data_lab9\"            \"data_lab9.zip\"        \"datasets\"            \n [4] \"FEF_trees.csv\"        \"lab_01_solutions.pdf\" \"lab_01_solutions.qmd\"\n [7] \"lab_01.qmd\"           \"lab_02.qmd\"           \"lab_03_example.R\"    \n[10] \"lab_03.html\"          \"lab_03.qmd\"           \"lab_04.qmd\"          \n[13] \"lab_05.qmd\"           \"lab_06.qmd\"           \"lab_07_web.html\"     \n[16] \"lab_07_web.qmd\"       \"lab_07.qmd\"           \"lab_08_web.html\"     \n[19] \"lab_08_web.qmd\"       \"lab_08.qmd\"           \"lab_09_web.html\"     \n[22] \"lab_09_web.qmd\"       \"lab_09.qmd\"           \"lab_10_web_files\"    \n[25] \"lab_10_web.html\"      \"lab_10_web.qmd\""
  },
  {
    "objectID": "slides/w2d2.html#reading-data-6",
    "href": "slides/w2d2.html#reading-data-6",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nR includes a variety of functions for reading data efficiently. One of the most common is read.csv().\nTo read data, we first may want to check our working directory:\n\ngetwd()\n\n[1] \"/Users/graysonwhite/Documents/for128-org/FOR128.github.io/slides\"\n\n\nThen we can find the datasets folder. I’ve kept mine with my labs:\n\nlist.files(\"../labs/\")\n\n [1] \"data_lab9\"            \"data_lab9.zip\"        \"datasets\"            \n [4] \"FEF_trees.csv\"        \"lab_01_solutions.pdf\" \"lab_01_solutions.qmd\"\n [7] \"lab_01.qmd\"           \"lab_02.qmd\"           \"lab_03_example.R\"    \n[10] \"lab_03.html\"          \"lab_03.qmd\"           \"lab_04.qmd\"          \n[13] \"lab_05.qmd\"           \"lab_06.qmd\"           \"lab_07_web.html\"     \n[16] \"lab_07_web.qmd\"       \"lab_07.qmd\"           \"lab_08_web.html\"     \n[19] \"lab_08_web.qmd\"       \"lab_08.qmd\"           \"lab_09_web.html\"     \n[22] \"lab_09_web.qmd\"       \"lab_09.qmd\"           \"lab_10_web_files\"    \n[25] \"lab_10_web.html\"      \"lab_10_web.qmd\"      \n\n\nNow, given our working directory and datasets location, we specify a relative path and load in the data:\n\nfef &lt;- read.csv(file = \"../labs/datasets/FEF_trees.csv\")"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-7",
    "href": "slides/w2d2.html#reading-data-7",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nWe can take a look at our dataset in R:\n\ndim(fef) # dimensions (rows columns) of fef\n\n[1] 88 18\n\nhead(fef) # first few rows of fef\n\n  watershed year plot     species dbh_in height_ft stem_green_kg top_green_kg\n1         3 1991   29 Acer rubrum    6.0        48          92.2         13.1\n2         3 1991   33 Acer rubrum    6.9        48         102.3         23.1\n3         3 1991   35 Acer rubrum    6.4        48         124.4          8.7\n4         3 1991   39 Acer rubrum    6.5        49          91.7         39.0\n5         3 1991   44 Acer rubrum    7.2        51         186.2          8.9\n6         3 1992   26 Acer rubrum    3.1        40          20.8          0.9\n  smbranch_green_kg lgbranch_green_kg allwoody_green_kg leaves_green_kg\n1              30.5              48.4             184.2            16.1\n2              23.5              57.7             206.6            12.9\n3              22.3              44.1             199.5            16.5\n4              22.5              35.5             188.7            12.0\n5              25.4              65.1             285.6            22.4\n6               1.9               1.5              25.1             0.9\n  stem_dry_kg top_dry_kg smbranch_dry_kg lgbranch_dry_kg allwoody_dry_kg\n1        54.7        7.1            15.3            28.0           105.1\n2        62.3       12.4            14.8            33.6           123.1\n3        73.3        4.6            11.5            25.1           114.4\n4        53.6       21.3            11.2            19.8           105.9\n5       106.4        4.7            11.7            36.1           159.0\n6        11.7        0.5             1.1             0.9            14.2\n  leaves_dry_kg\n1           6.1\n2           4.6\n3           6.1\n4           4.2\n5           7.9\n6           0.3"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-8",
    "href": "slides/w2d2.html#reading-data-8",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nread.csv() reads comma separated value (csv) files, but R has the ability to read a massive variety of file types:\n\n\nread.table() allows you to read file types with different separators like tabs and spaces, rather than just commas."
  },
  {
    "objectID": "slides/w2d2.html#reading-data-9",
    "href": "slides/w2d2.html#reading-data-9",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nIf we wanted to use read.table() to load in FEF_trees.csv, we would run the following code:\n\nfef &lt;- read.table(file = \"../labs/datasets/FEF_trees.csv\",\n                  header = TRUE,\n                  sep = \",\")"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-10",
    "href": "slides/w2d2.html#reading-data-10",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nIf we wanted to use read.table() to load in FEF_trees.csv, we would run the following code:\n\nfef &lt;- read.table(file = \"../labs/datasets/FEF_trees.csv\",\n                  header = TRUE,\n                  sep = \",\")"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-11",
    "href": "slides/w2d2.html#reading-data-11",
    "title": "Reading and Writing Data",
    "section": "Reading data",
    "text": "Reading data\nIf we wanted to use read.table() to load in FEF_trees.csv, we would run the following code:\n\nfef &lt;- read.table(file = \"../labs/datasets/FEF_trees.csv\",\n                  header = TRUE,\n                  sep = \",\")"
  },
  {
    "objectID": "slides/w2d2.html#reading-data-tab-separated",
    "href": "slides/w2d2.html#reading-data-tab-separated",
    "title": "Reading and Writing Data",
    "section": "Reading data: tab separated",
    "text": "Reading data: tab separated\nWe also have the file FEF_trees.tsv, which looks a bit different than FEF_trees.csv."
  },
  {
    "objectID": "slides/w2d2.html#fef_trees.csv",
    "href": "slides/w2d2.html#fef_trees.csv",
    "title": "Reading and Writing Data",
    "section": "FEF_trees.csv",
    "text": "FEF_trees.csv"
  },
  {
    "objectID": "slides/w2d2.html#fef_trees.tsv",
    "href": "slides/w2d2.html#fef_trees.tsv",
    "title": "Reading and Writing Data",
    "section": "FEF_trees.tsv",
    "text": "FEF_trees.tsv"
  },
  {
    "objectID": "slides/w2d2.html#reading-fef_trees.tsv-into-r",
    "href": "slides/w2d2.html#reading-fef_trees.tsv-into-r",
    "title": "Reading and Writing Data",
    "section": "Reading FEF_trees.tsv into R",
    "text": "Reading FEF_trees.tsv into R\n\nfef &lt;- read.table(file = \"../labs/datasets/FEF_trees.tsv\",\n                  header = TRUE,\n                  sep = \"\\t\")"
  },
  {
    "objectID": "slides/w2d2.html#reading-fef_trees.tsv-into-r-1",
    "href": "slides/w2d2.html#reading-fef_trees.tsv-into-r-1",
    "title": "Reading and Writing Data",
    "section": "Reading FEF_trees.tsv into R",
    "text": "Reading FEF_trees.tsv into R\n\nfef &lt;- read.table(file = \"../labs/datasets/FEF_trees.tsv\",\n                  header = TRUE,\n                  sep = \"\\t\")"
  },
  {
    "objectID": "slides/w2d2.html#writing-data",
    "href": "slides/w2d2.html#writing-data",
    "title": "Reading and Writing Data",
    "section": "Writing data",
    "text": "Writing data\n\n\nSimilar to read.csv() and read.table(), R includes write.csv() and write.table() functions.\nThese functions allow you to create (or “write”) your own files with an R object.\nLet’s take a look!"
  },
  {
    "objectID": "slides/w2d2.html#writing-data-1",
    "href": "slides/w2d2.html#writing-data-1",
    "title": "Reading and Writing Data",
    "section": "Writing data",
    "text": "Writing data\nFirst, we look at the files in my “labs” folder\n\nlist.files(\"../labs\")\n\n [1] \"data_lab9\"            \"data_lab9.zip\"        \"datasets\"            \n [4] \"FEF_trees.csv\"        \"lab_01_solutions.pdf\" \"lab_01_solutions.qmd\"\n [7] \"lab_01.qmd\"           \"lab_02.qmd\"           \"lab_03_example.R\"    \n[10] \"lab_03.html\"          \"lab_03.qmd\"           \"lab_04.qmd\"          \n[13] \"lab_05.qmd\"           \"lab_06.qmd\"           \"lab_07_web.html\"     \n[16] \"lab_07_web.qmd\"       \"lab_07.qmd\"           \"lab_08_web.html\"     \n[19] \"lab_08_web.qmd\"       \"lab_08.qmd\"           \"lab_09_web.html\"     \n[22] \"lab_09_web.qmd\"       \"lab_09.qmd\"           \"lab_10_web_files\"    \n[25] \"lab_10_web.html\"      \"lab_10_web.qmd\""
  },
  {
    "objectID": "slides/w2d2.html#writing-data-2",
    "href": "slides/w2d2.html#writing-data-2",
    "title": "Reading and Writing Data",
    "section": "Writing data",
    "text": "Writing data\nNext, we can write the fef object to a .csv file.\n\nwrite.csv(x = fef,\n          file = \"../labs/my_fef.csv\")"
  },
  {
    "objectID": "slides/w2d2.html#writing-data-3",
    "href": "slides/w2d2.html#writing-data-3",
    "title": "Reading and Writing Data",
    "section": "Writing data",
    "text": "Writing data\nNext, we can write the fef object to a .csv file.\n\nwrite.csv(x = fef,\n          file = \"../labs/my_fef.csv\")\n\nNow, we can see that the file is written.\n\nlist.files(\"../labs\")\n\n [1] \"data_lab9\"            \"data_lab9.zip\"        \"datasets\"            \n [4] \"FEF_trees.csv\"        \"lab_01_solutions.pdf\" \"lab_01_solutions.qmd\"\n [7] \"lab_01.qmd\"           \"lab_02.qmd\"           \"lab_03_example.R\"    \n[10] \"lab_03.html\"          \"lab_03.qmd\"           \"lab_04.qmd\"          \n[13] \"lab_05.qmd\"           \"lab_06.qmd\"           \"lab_07_web.html\"     \n[16] \"lab_07_web.qmd\"       \"lab_07.qmd\"           \"lab_08_web.html\"     \n[19] \"lab_08_web.qmd\"       \"lab_08.qmd\"           \"lab_09_web.html\"     \n[22] \"lab_09_web.qmd\"       \"lab_09.qmd\"           \"lab_10_web_files\"    \n[25] \"lab_10_web.html\"      \"lab_10_web.qmd\"       \"my_fef.csv\""
  },
  {
    "objectID": "slides/w2d2.html#next-week",
    "href": "slides/w2d2.html#next-week",
    "title": "Reading and Writing Data",
    "section": "Next Week",
    "text": "Next Week\n\nAndy will deliver lecture and lab through Tuesday 9/17.\nMain focuses: Chapter 4 (Data Structures)."
  },
  {
    "objectID": "slides/w7d1.html#announcements",
    "href": "slides/w7d1.html#announcements",
    "title": "readr and tibble",
    "section": "Announcements",
    "text": "Announcements\n\nMidterm 1 + Lab 5 grades will be released by the end of the weekend."
  },
  {
    "objectID": "slides/w7d1.html#agenda",
    "href": "slides/w7d1.html#agenda",
    "title": "readr and tibble",
    "section": "Agenda",
    "text": "Agenda\n\nIntro to the tidyverse\ntibble: improved data frames\nreadr: tidy reading and writing data\nSneak peak at dplyr"
  },
  {
    "objectID": "slides/w7d1.html#what-is-the-tidyverse",
    "href": "slides/w7d1.html#what-is-the-tidyverse",
    "title": "readr and tibble",
    "section": "What is the tidyverse",
    "text": "What is the tidyverse\n\n\nA collection of R packages that work together to provide extensive and intuitive data analysis functions.\nIn this class, we will focus on 5 tidyverse packages:\n\ntibble, to improve on the data.frame,\nreadr, to improve reading and writing data,\ndplyr, to manipulate and summarize data “data plyers”,\ntidyr, to clean and reshape data, and\nggplot2, to produce beautiful graphics with intuitive syntax “the grammar of graphics”."
  },
  {
    "objectID": "slides/w7d1.html#how-do-we-use-install-the-tidyverse",
    "href": "slides/w7d1.html#how-do-we-use-install-the-tidyverse",
    "title": "readr and tibble",
    "section": "How do we use / install the tidyverse?",
    "text": "How do we use / install the tidyverse?\nTo install tidyverse, you must run this code on your computer.\nNOTE: you only have to do this once.\n\ninstall.packages(\"tidyverse\")\n\nThis will take a few minutes to run on your computer. After it’s done, you can load all the tidyverse packages with the library() function:\n\nlibrary(tidyverse)\n\nNOTE: you’ll load the tidyverse with library() on each project (e.g. lab, midterm, project) towards the top of your Quarto document."
  },
  {
    "objectID": "slides/w7d1.html#today-tibble-and-readr",
    "href": "slides/w7d1.html#today-tibble-and-readr",
    "title": "readr and tibble",
    "section": "Today: tibble and readr",
    "text": "Today: tibble and readr"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames",
    "href": "slides/w7d1.html#tibbles-improved-data-frames",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nRecall the pets data frame:\n\npets_df &lt;- data.frame(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-1",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-1",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nRecall the pets data frame:\n\npets_df &lt;- data.frame(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)\nclass(pets_df)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-2",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-2",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nRecall the pets data frame:\n\npets_df &lt;- data.frame(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)\npets_df\n\n   names ages is_dog\n1   Dude    6   TRUE\n2 Pickle    5  FALSE\n3   Kyle    3  FALSE\n4   Nubs   11  FALSE"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-3",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-3",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nWe can improve on this data structure by created a tibble rather than a data.frame. The syntax is almost exactly the same:\n\npets_df &lt;- data.frame(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-4",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-4",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nWe can improve on this data structure by created a tibble rather than a data.frame. The syntax is almost exactly the same:\n\nlibrary(tidyverse)\npets_tbl &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-5",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-5",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nWe can improve on this data structure by created a tibble rather than a data.frame. The syntax is almost exactly the same:\n\nlibrary(tidyverse)\npets_tbl &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)\nclass(pets_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-6",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-6",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\nWe can improve on this data structure by created a tibble rather than a data.frame. The syntax is almost exactly the same:\n\nlibrary(tidyverse)\npets_tbl &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)\npets_tbl\n\n# A tibble: 4 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n3 Kyle       3 FALSE \n4 Nubs      11 FALSE"
  },
  {
    "objectID": "slides/w7d1.html#tibbles-improved-data-frames-7",
    "href": "slides/w7d1.html#tibbles-improved-data-frames-7",
    "title": "readr and tibble",
    "section": "tibbles: improved data frames",
    "text": "tibbles: improved data frames\n\n\n\npets_df\n\n   names ages is_dog\n1   Dude    6   TRUE\n2 Pickle    5  FALSE\n3   Kyle    3  FALSE\n4   Nubs   11  FALSE\n\n\n\n\npets_tbl\n\n# A tibble: 4 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n3 Kyle       3 FALSE \n4 Nubs      11 FALSE \n\n\n\n\n\ntibbles give us some nice information when printed: dimensions and column class."
  },
  {
    "objectID": "slides/w7d1.html#converting-tibbles-and-data.frames",
    "href": "slides/w7d1.html#converting-tibbles-and-data.frames",
    "title": "readr and tibble",
    "section": "Converting tibbles and data.frames",
    "text": "Converting tibbles and data.frames\nWe can convert existing data.frames into tibbles:\n\nnew_pets_tbl &lt;- as_tibble(pets_df)\n\nNote that new_pets_tbl is a tibble:\n\nis_tibble(new_pets_tbl)\n\n[1] TRUE\n\n\nbut is of course still a data.frame:\n\nis.data.frame(new_pets_tbl)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/w7d1.html#a-note-on-subsetting",
    "href": "slides/w7d1.html#a-note-on-subsetting",
    "title": "readr and tibble",
    "section": "A note on subsetting",
    "text": "A note on subsetting\nIn the past, when we have wanted the values from one column of a data frame, we are returned a vector. For example:\n\n# the names of the pets in pets_df\npets_df[, 1] # returns a vector\n\n[1] \"Dude\"   \"Pickle\" \"Kyle\"   \"Nubs\"  \n\npets_df[, c(1,2)] # returns a data.frame\n\n   names ages\n1   Dude    6\n2 Pickle    5\n3   Kyle    3\n4   Nubs   11\n\n\n\n\nInconsistent!"
  },
  {
    "objectID": "slides/w7d1.html#a-note-on-subsetting-1",
    "href": "slides/w7d1.html#a-note-on-subsetting-1",
    "title": "readr and tibble",
    "section": "A note on subsetting",
    "text": "A note on subsetting\ntibbles fix this inconsistency\n\n# the names of the pets in pets_df\npets_tbl[, 1] # returns a tibble / data.frame\n\n# A tibble: 4 × 1\n  names \n  &lt;chr&gt; \n1 Dude  \n2 Pickle\n3 Kyle  \n4 Nubs  \n\npets_tbl[, c(1, 2)] # returns a tibble / data.frame\n\n# A tibble: 4 × 2\n  names   ages\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Dude       6\n2 Pickle     5\n3 Kyle       3\n4 Nubs      11"
  },
  {
    "objectID": "slides/w7d1.html#reading-data",
    "href": "slides/w7d1.html#reading-data",
    "title": "readr and tibble",
    "section": "Reading data",
    "text": "Reading data\nSo far, we have primarily used the built-in read.csv() and read.table() functions to read data into R. Example:\n\nfef &lt;- read.csv(file = \"../labs/datasets/FEF_trees.csv\")\n\nRecall:\n\n\nWe start with the read.csv() function,\nWe specify a relative path with file = \"../labs/datasets/FEF_trees.csv\",\nWe assign this read-in data with the assignment arrow &lt;- to an object in R call fef."
  },
  {
    "objectID": "slides/w7d1.html#reading-data-with-readr",
    "href": "slides/w7d1.html#reading-data-with-readr",
    "title": "readr and tibble",
    "section": "Reading data with readr",
    "text": "Reading data with readr\nThe readr package includes analogous read_csv(), read_table(), read_delim(), and even more read_*() functions.\n\nfef_tidy &lt;- read_csv(file = \"../labs/datasets/FEF_trees.csv\")\n\n\n\nNote that we now are using read_csv() with an underscore (_) rather than the base R option of read.csv().\nWe must first load the tidyverse to run this function, unless we call the package name before the function name like so: readr::read_csv(file = \"../labs/datasets/FEF_trees.csv\")\nUsing the readr functions can have up to 100x speed increase compared to base R, depending on your dataset."
  },
  {
    "objectID": "slides/w7d1.html#comparing-base-and-tidy-data-reading",
    "href": "slides/w7d1.html#comparing-base-and-tidy-data-reading",
    "title": "readr and tibble",
    "section": "Comparing base and tidy data reading:",
    "text": "Comparing base and tidy data reading:\n\ndim(fef)\n\n[1] 88 18\n\ndim(fef_tidy)\n\n[1] 88 18"
  },
  {
    "objectID": "slides/w7d1.html#comparing-base-and-tidy-data-reading-1",
    "href": "slides/w7d1.html#comparing-base-and-tidy-data-reading-1",
    "title": "readr and tibble",
    "section": "Comparing base and tidy data reading:",
    "text": "Comparing base and tidy data reading:\n\nhead(fef)\n\n  watershed year plot     species dbh_in height_ft stem_green_kg top_green_kg\n1         3 1991   29 Acer rubrum    6.0        48          92.2         13.1\n2         3 1991   33 Acer rubrum    6.9        48         102.3         23.1\n3         3 1991   35 Acer rubrum    6.4        48         124.4          8.7\n4         3 1991   39 Acer rubrum    6.5        49          91.7         39.0\n5         3 1991   44 Acer rubrum    7.2        51         186.2          8.9\n6         3 1992   26 Acer rubrum    3.1        40          20.8          0.9\n  smbranch_green_kg lgbranch_green_kg allwoody_green_kg leaves_green_kg\n1              30.5              48.4             184.2            16.1\n2              23.5              57.7             206.6            12.9\n3              22.3              44.1             199.5            16.5\n4              22.5              35.5             188.7            12.0\n5              25.4              65.1             285.6            22.4\n6               1.9               1.5              25.1             0.9\n  stem_dry_kg top_dry_kg smbranch_dry_kg lgbranch_dry_kg allwoody_dry_kg\n1        54.7        7.1            15.3            28.0           105.1\n2        62.3       12.4            14.8            33.6           123.1\n3        73.3        4.6            11.5            25.1           114.4\n4        53.6       21.3            11.2            19.8           105.9\n5       106.4        4.7            11.7            36.1           159.0\n6        11.7        0.5             1.1             0.9            14.2\n  leaves_dry_kg\n1           6.1\n2           4.6\n3           6.1\n4           4.2\n5           7.9\n6           0.3"
  },
  {
    "objectID": "slides/w7d1.html#comparing-base-and-tidy-data-reading-2",
    "href": "slides/w7d1.html#comparing-base-and-tidy-data-reading-2",
    "title": "readr and tibble",
    "section": "Comparing base and tidy data reading:",
    "text": "Comparing base and tidy data reading:\n\nhead(fef_tidy)\n\n# A tibble: 6 × 18\n  watershed  year  plot species     dbh_in height_ft stem_green_kg top_green_kg\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1         3  1991    29 Acer rubrum    6          48          92.2         13.1\n2         3  1991    33 Acer rubrum    6.9        48         102.          23.1\n3         3  1991    35 Acer rubrum    6.4        48         124.           8.7\n4         3  1991    39 Acer rubrum    6.5        49          91.7         39  \n5         3  1991    44 Acer rubrum    7.2        51         186.           8.9\n6         3  1992    26 Acer rubrum    3.1        40          20.8          0.9\n# ℹ 10 more variables: smbranch_green_kg &lt;dbl&gt;, lgbranch_green_kg &lt;dbl&gt;,\n#   allwoody_green_kg &lt;dbl&gt;, leaves_green_kg &lt;dbl&gt;, stem_dry_kg &lt;dbl&gt;,\n#   top_dry_kg &lt;dbl&gt;, smbranch_dry_kg &lt;dbl&gt;, lgbranch_dry_kg &lt;dbl&gt;,\n#   allwoody_dry_kg &lt;dbl&gt;, leaves_dry_kg &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w7d1.html#comparing-base-and-tidy-data-reading-3",
    "href": "slides/w7d1.html#comparing-base-and-tidy-data-reading-3",
    "title": "readr and tibble",
    "section": "Comparing base and tidy data reading:",
    "text": "Comparing base and tidy data reading:\n\nclass(fef)\n\n[1] \"data.frame\"\n\nclass(fef_tidy)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\n\nR’s built-in read.csv() function reads in data as a data.frame, but readr::read_csv() reads in data as a tibble. Neat!"
  },
  {
    "objectID": "slides/w7d1.html#reading-data-options",
    "href": "slides/w7d1.html#reading-data-options",
    "title": "readr and tibble",
    "section": "Reading data options",
    "text": "Reading data options\nWe can specify some nifty options with the read_*() functions from readr. We can specify column types:\n\nfef_tidy_cols &lt;- read_csv(\n  file = \"../labs/datasets/FEF_trees.csv\",\n  col_types = list(\n    watershed = col_integer(),\n    year = col_integer(),\n    plot = col_integer()\n  )\n)"
  },
  {
    "objectID": "slides/w7d1.html#reading-data-options-1",
    "href": "slides/w7d1.html#reading-data-options-1",
    "title": "readr and tibble",
    "section": "Reading data options",
    "text": "Reading data options\n\n\n\nglimpse(fef_tidy)\n\nRows: 88\nColumns: 18\n$ watershed         &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ year              &lt;dbl&gt; 1991, 1991, 1991, 1991, 1991, 1992, 1992, 1992, 1992…\n$ plot              &lt;dbl&gt; 29, 33, 35, 39, 44, 26, 26, 26, 48, 48, 48, 29, 33, …\n$ species           &lt;chr&gt; \"Acer rubrum\", \"Acer rubrum\", \"Acer rubrum\", \"Acer r…\n$ dbh_in            &lt;dbl&gt; 6.0, 6.9, 6.4, 6.5, 7.2, 3.1, 2.0, 4.1, 2.4, 2.7, 3.…\n$ height_ft         &lt;dbl&gt; 48.0, 48.0, 48.0, 49.0, 51.0, 40.0, 30.5, 50.0, 28.0…\n$ stem_green_kg     &lt;dbl&gt; 92.2, 102.3, 124.4, 91.7, 186.2, 20.8, 5.6, 54.1, 10…\n$ top_green_kg      &lt;dbl&gt; 13.1, 23.1, 8.7, 39.0, 8.9, 0.9, 0.9, 8.6, 0.7, 5.0,…\n$ smbranch_green_kg &lt;dbl&gt; 30.5, 23.5, 22.3, 22.5, 25.4, 1.9, 2.2, 8.0, 3.7, 3.…\n$ lgbranch_green_kg &lt;dbl&gt; 48.4, 57.7, 44.1, 35.5, 65.1, 1.5, 0.6, 4.0, 0.5, 1.…\n$ allwoody_green_kg &lt;dbl&gt; 184.2, 206.6, 199.5, 188.7, 285.6, 25.1, 9.3, 74.7, …\n$ leaves_green_kg   &lt;dbl&gt; 16.1, 12.9, 16.5, 12.0, 22.4, 0.9, 1.0, 6.1, 2.5, 1.…\n$ stem_dry_kg       &lt;dbl&gt; 54.7, 62.3, 73.3, 53.6, 106.4, 11.7, 3.2, 28.3, 5.5,…\n$ top_dry_kg        &lt;dbl&gt; 7.1, 12.4, 4.6, 21.3, 4.7, 0.5, 0.5, 4.4, 0.4, 2.7, …\n$ smbranch_dry_kg   &lt;dbl&gt; 15.3, 14.8, 11.5, 11.2, 11.7, 1.1, 1.2, 3.6, 1.8, 0.…\n$ lgbranch_dry_kg   &lt;dbl&gt; 28.0, 33.6, 25.1, 19.8, 36.1, 0.9, 0.3, 2.1, 0.3, 1.…\n$ allwoody_dry_kg   &lt;dbl&gt; 105.1, 123.1, 114.4, 105.9, 159.0, 14.2, 5.3, 38.5, …\n$ leaves_dry_kg     &lt;dbl&gt; 6.1, 4.6, 6.1, 4.2, 7.9, 0.3, 0.3, 1.9, 0.8, 0.5, 1.…\n\n\n\n\nglimpse(fef_tidy_cols)\n\nRows: 88\nColumns: 18\n$ watershed         &lt;int&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ year              &lt;int&gt; 1991, 1991, 1991, 1991, 1991, 1992, 1992, 1992, 1992…\n$ plot              &lt;int&gt; 29, 33, 35, 39, 44, 26, 26, 26, 48, 48, 48, 29, 33, …\n$ species           &lt;chr&gt; \"Acer rubrum\", \"Acer rubrum\", \"Acer rubrum\", \"Acer r…\n$ dbh_in            &lt;dbl&gt; 6.0, 6.9, 6.4, 6.5, 7.2, 3.1, 2.0, 4.1, 2.4, 2.7, 3.…\n$ height_ft         &lt;dbl&gt; 48.0, 48.0, 48.0, 49.0, 51.0, 40.0, 30.5, 50.0, 28.0…\n$ stem_green_kg     &lt;dbl&gt; 92.2, 102.3, 124.4, 91.7, 186.2, 20.8, 5.6, 54.1, 10…\n$ top_green_kg      &lt;dbl&gt; 13.1, 23.1, 8.7, 39.0, 8.9, 0.9, 0.9, 8.6, 0.7, 5.0,…\n$ smbranch_green_kg &lt;dbl&gt; 30.5, 23.5, 22.3, 22.5, 25.4, 1.9, 2.2, 8.0, 3.7, 3.…\n$ lgbranch_green_kg &lt;dbl&gt; 48.4, 57.7, 44.1, 35.5, 65.1, 1.5, 0.6, 4.0, 0.5, 1.…\n$ allwoody_green_kg &lt;dbl&gt; 184.2, 206.6, 199.5, 188.7, 285.6, 25.1, 9.3, 74.7, …\n$ leaves_green_kg   &lt;dbl&gt; 16.1, 12.9, 16.5, 12.0, 22.4, 0.9, 1.0, 6.1, 2.5, 1.…\n$ stem_dry_kg       &lt;dbl&gt; 54.7, 62.3, 73.3, 53.6, 106.4, 11.7, 3.2, 28.3, 5.5,…\n$ top_dry_kg        &lt;dbl&gt; 7.1, 12.4, 4.6, 21.3, 4.7, 0.5, 0.5, 4.4, 0.4, 2.7, …\n$ smbranch_dry_kg   &lt;dbl&gt; 15.3, 14.8, 11.5, 11.2, 11.7, 1.1, 1.2, 3.6, 1.8, 0.…\n$ lgbranch_dry_kg   &lt;dbl&gt; 28.0, 33.6, 25.1, 19.8, 36.1, 0.9, 0.3, 2.1, 0.3, 1.…\n$ allwoody_dry_kg   &lt;dbl&gt; 105.1, 123.1, 114.4, 105.9, 159.0, 14.2, 5.3, 38.5, …\n$ leaves_dry_kg     &lt;dbl&gt; 6.1, 4.6, 6.1, 4.2, 7.9, 0.3, 0.3, 1.9, 0.8, 0.5, 1.…"
  },
  {
    "objectID": "slides/w7d1.html#writing-data",
    "href": "slides/w7d1.html#writing-data",
    "title": "readr and tibble",
    "section": "Writing data",
    "text": "Writing data\nWriting data with readr looks very similar to base R. Say we’d like to write pets_tbl to “pets.csv”:\nWith base:\n\nwrite.csv(x = pets_tbl, file = \"pets.csv\")\n\nWith readr\n\nwrite_csv(x = pets_tbl, file = \"pets.csv\")\n\n\n\nUp to a 2x speed increase with readr::write_csv() compared to write.csv()."
  },
  {
    "objectID": "slides/w7d1.html#next-time",
    "href": "slides/w7d1.html#next-time",
    "title": "readr and tibble",
    "section": "Next time",
    "text": "Next time\n\ndplyr"
  },
  {
    "objectID": "labs/lab_09_web.html",
    "href": "labs/lab_09_web.html",
    "title": "Joining and Reshaping Data",
    "section": "",
    "text": "Welcome to Lab 9! Today, we’ll focus on data joins and reshaping data. Parts 1 and 2 of this lab focuses on building your dplyr skills, especially in relation to joins. However, you’ll need to use some other dplyr functions along the way. In Part 3 of the lab, we’ll focus on reshaping data with tidyr.\n\n\n\nUse dplyr joins\nUse tidyr to reshape data\n\n\n\n\nUpload your rendered PDF (lab_09.pdf) and Quarto (lab_09.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_09_web.html#welcome",
    "href": "labs/lab_09_web.html#welcome",
    "title": "Joining and Reshaping Data",
    "section": "",
    "text": "Welcome to Lab 9! Today, we’ll focus on data joins and reshaping data. Parts 1 and 2 of this lab focuses on building your dplyr skills, especially in relation to joins. However, you’ll need to use some other dplyr functions along the way. In Part 3 of the lab, we’ll focus on reshaping data with tidyr.\n\n\n\nUse dplyr joins\nUse tidyr to reshape data\n\n\n\n\nUpload your rendered PDF (lab_09.pdf) and Quarto (lab_09.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-0",
    "href": "labs/lab_09_web.html#exercise-0",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 0",
    "text": "Exercise 0\nLoad any packages you’ll need for this lab below."
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-1",
    "href": "labs/lab_09_web.html#exercise-1",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate the x and y datasets that we have used over the lectures related to data joins using the tibble() function. These datasets are shown below for your convenience.\n\n\n\n\n\n\n\n\n\nIn R, your resulting tibbles should look as follows:\n\nx\n\n# A tibble: 3 × 2\n  spp_code common_name\n  &lt;chr&gt;    &lt;chr&gt;      \n1 ABBA     balsum fir \n2 BEPA     paper birch\n3 PIST     white pine \n\ny\n\n# A tibble: 3 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera\n3 LALA     Larix laricina"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-2",
    "href": "labs/lab_09_web.html#exercise-2",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 2",
    "text": "Exercise 2\nCreate a dataset called z by joining x and y by their species code. Retain only the rows in x and y that have matching species codes. Print your resulting tibble z. Justify which join you used.\n\n\n# A tibble: 2 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-3",
    "href": "labs/lab_09_web.html#exercise-3",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 3",
    "text": "Exercise 3\nNow, create a dataset called w that contains all the rows in x, but only the rows in y that have a species code that match to x by joining x and y. Make sure the column order is spp_code, common_name, latin_name Justify which join you used.\n\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-4",
    "href": "labs/lab_09_web.html#exercise-4",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 4",
    "text": "Exercise 4\nNext, with another join of x and y, create a dataset called w_clone with the same rows, columns, and values as w, but that has the latin_name column before common_name. Justify which join you used.\n\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 PIST     &lt;NA&gt;              white pine"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-5",
    "href": "labs/lab_09_web.html#exercise-5",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 5",
    "text": "Exercise 5\nUse a filtering join to check if there are any species codes in y that do not exist in x. Are there any? If so, what is the species code?\n\n\n# A tibble: 1 × 2\n  spp_code latin_name    \n  &lt;chr&gt;    &lt;chr&gt;         \n1 LALA     Larix laricina"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-6",
    "href": "labs/lab_09_web.html#exercise-6",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 6",
    "text": "Exercise 6\nLoad in the four datasets included in the posting of Lab 9 on the course website. Name each of them the same as they are named as files, without the .csv extension. For example, for the “plot_biomass.csv” file, name the object plot_biomass, etc. Take a look at these datasets and try to understand them. What does a row represent in each one?\n\nplot_biomass\n\n# A tibble: 191 × 2\n    PLT_CN DRYBIO_AG_TPA\n     &lt;dbl&gt;         &lt;dbl&gt;\n 1 1.75e14        122.  \n 2 1.75e14         76.2 \n 3 1.75e14          4.21\n 4 1.75e14         13.2 \n 5 1.75e14         90.9 \n 6 1.75e14         96.2 \n 7 1.75e14        397.  \n 8 1.75e14          2.54\n 9 1.75e14        290.  \n10 2.17e14        182.  \n# ℹ 181 more rows\n\nplot_locations\n\n# A tibble: 191 × 5\n    PLT_CN STATECD COUNTYFIPS LON_PUBLIC LAT_PUBLIC\n     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 3.08e13      41      41051      -122.       45.6\n 2 4.12e14      41      41009      -123.       45.9\n 3 4.85e14      41      41009      -123.       45.8\n 4 3.08e13      41      41009      -123.       45.8\n 5 2.17e14      41      41009      -123.       46.0\n 6 4.85e14      41      41009      -123.       46.1\n 7 4.12e14      41      41051      -122.       45.5\n 8 3.08e13      41      41009      -123.       45.8\n 9 2.17e14      41      41009      -123.       45.9\n10 5.59e14      41      41009      -123.       45.9\n# ℹ 181 more rows\n\nstate_reference\n\n# A tibble: 59 × 3\n   state_cd state_name           state_abbr\n      &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;     \n 1        1 Alabama              AL        \n 2        2 Alaska               AK        \n 3        4 Arizona              AZ        \n 4        5 Arkansas             AR        \n 5        6 California           CA        \n 6        8 Colorado             CO        \n 7        9 Connecticut          CT        \n 8       10 Delaware             DE        \n 9       11 District of Columbia DC        \n10       12 Florida              FL        \n# ℹ 49 more rows\n\ncounty_reference\n\n# A tibble: 3,233 × 3\n   STATENM      COUNTYNM   COUNTYFIPS\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;     \n 1 Ohio         Highland   39071     \n 2 California   Alpine     06003     \n 3 Florida      Escambia   12033     \n 4 Illinois     Lawrence   17101     \n 5 Mississippi  Wayne      28153     \n 6 Mississippi  Tishomingo 28141     \n 7 Montana      Sanders    30089     \n 8 New York     Albany     36001     \n 9 Pennsylvania Potter     42105     \n10 Missouri     Greene     29077     \n# ℹ 3,223 more rows"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-7",
    "href": "labs/lab_09_web.html#exercise-7",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 7",
    "text": "Exercise 7\nNow that you’ve got a sense of the data, join two datasets together to get both plot locations and plot biomass in the same tibble. Call this new tibble plots. Make sure to specify what you are joining by, and justify which join you used. Your new dataset should have 191 rows and 6 columns. Take a glimpse() at your new tibble.\n\nglimpse(plots)\n\nRows: 191\nColumns: 6\n$ PLT_CN        &lt;dbl&gt; 1.747633e+14, 1.747635e+14, 1.747635e+14, 1.747636e+14, …\n$ DRYBIO_AG_TPA &lt;dbl&gt; 122.36957, 76.15349, 4.20973, 13.23662, 90.90198, 96.228…\n$ STATECD       &lt;dbl&gt; 41, 53, 53, 53, 53, 41, 41, 53, 41, 41, 41, 41, 41, 41, …\n$ COUNTYFIPS    &lt;dbl&gt; 41051, 53013, 53013, 53013, 53013, 41051, 41051, 53013, …\n$ LON_PUBLIC    &lt;dbl&gt; -121.9465, -117.8284, -117.6408, -117.7454, -117.7872, -…\n$ LAT_PUBLIC    &lt;dbl&gt; 45.63014, 46.08317, 46.24816, 46.22776, 46.10631, 45.530…"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-8",
    "href": "labs/lab_09_web.html#exercise-8",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 8",
    "text": "Exercise 8\nNow you have your plot location information and plot biomass measurements in one tibble, but we still don’t know where these plots are. Add some columns to plots by joining it with state_reference in a way such that each row of plots now has a state name and abbreviation associated with it. Use dplyr to figure out what state(s) are these plots in?\n\nplots\n\n# A tibble: 191 × 8\n    PLT_CN DRYBIO_AG_TPA STATECD COUNTYFIPS LON_PUBLIC LAT_PUBLIC state_name\n     &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;     \n 1 1.75e14        122.        41      41051      -122.       45.6 Oregon    \n 2 1.75e14         76.2       53      53013      -118.       46.1 Washington\n 3 1.75e14          4.21      53      53013      -118.       46.2 Washington\n 4 1.75e14         13.2       53      53013      -118.       46.2 Washington\n 5 1.75e14         90.9       53      53013      -118.       46.1 Washington\n 6 1.75e14         96.2       41      41051      -122.       45.5 Oregon    \n 7 1.75e14        397.        41      41051      -122.       45.5 Oregon    \n 8 1.75e14          2.54      53      53013      -118.       46.3 Washington\n 9 1.75e14        290.        41      41051      -122.       45.5 Oregon    \n10 2.17e14        182.        41      41051      -122.       45.6 Oregon    \n# ℹ 181 more rows\n# ℹ 1 more variable: state_abbr &lt;chr&gt;"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-9",
    "href": "labs/lab_09_web.html#exercise-9",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 9",
    "text": "Exercise 9\nUse a filtering join to see if any rows of plots do not have a match in state_reference. Are there any? If so, how many?\n\n\n# A tibble: 0 × 8\n# ℹ 8 variables: PLT_CN &lt;dbl&gt;, DRYBIO_AG_TPA &lt;dbl&gt;, STATECD &lt;dbl&gt;,\n#   COUNTYFIPS &lt;dbl&gt;, LON_PUBLIC &lt;dbl&gt;, LAT_PUBLIC &lt;dbl&gt;, state_name &lt;chr&gt;,\n#   state_abbr &lt;chr&gt;"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-10",
    "href": "labs/lab_09_web.html#exercise-10",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 10",
    "text": "Exercise 10\nNow you’ve added biomass and state information to your plot data. Great job! We have one more dataset to join. Join the county_reference tibble to plots so you can see what county each FIA plot is in. Hint: you might get an error here. Make sure to check the column classes you are joining by and change them as needed. You should have 191 rows and 10 columns in plots after this join. What counties are these plots in?\n\nplots\n\n# A tibble: 191 × 10\n    PLT_CN DRYBIO_AG_TPA STATECD COUNTYFIPS LON_PUBLIC LAT_PUBLIC state_name\n     &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;     \n 1 1.75e14        122.        41 41051           -122.       45.6 Oregon    \n 2 1.75e14         76.2       53 53013           -118.       46.1 Washington\n 3 1.75e14          4.21      53 53013           -118.       46.2 Washington\n 4 1.75e14         13.2       53 53013           -118.       46.2 Washington\n 5 1.75e14         90.9       53 53013           -118.       46.1 Washington\n 6 1.75e14         96.2       41 41051           -122.       45.5 Oregon    \n 7 1.75e14        397.        41 41051           -122.       45.5 Oregon    \n 8 1.75e14          2.54      53 53013           -118.       46.3 Washington\n 9 1.75e14        290.        41 41051           -122.       45.5 Oregon    \n10 2.17e14        182.        41 41051           -122.       45.6 Oregon    \n# ℹ 181 more rows\n# ℹ 3 more variables: state_abbr &lt;chr&gt;, STATENM &lt;chr&gt;, COUNTYNM &lt;chr&gt;"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-11",
    "href": "labs/lab_09_web.html#exercise-11",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 11",
    "text": "Exercise 11\nNow you’ve wrangled all your data into one tibble. Great job! Use a series of piped dplyr functions to compute the average biomass in each county.\n\n\n# A tibble: 3 × 2\n  COUNTYNM  avg_bio\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Clark        92.4\n2 Columbia     60.6\n3 Multnomah   187."
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-12",
    "href": "labs/lab_09_web.html#exercise-12",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 12",
    "text": "Exercise 12\nRead in the “example_plot_data.csv” into a tibble called example_plots.\n\nexample_plots\n\n# A tibble: 8 × 3\n  plot_id species  dbh_in\n    &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n1       1 Basswood    5.1\n2       1 Basswood    5.5\n3       1 Beech      10.1\n4       1 Red oak     5  \n5       2 Beech      11.5\n6       2 Beech      12.2\n7       2 Basswood    6  \n8       2 Red oak    10"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-13",
    "href": "labs/lab_09_web.html#exercise-13",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 13",
    "text": "Exercise 13\nAdd two new columns to the example_plots tibble. The first dbh_4in holds the 4-inch DBH class the given tree falls in. The second TF holds the tree factor for each tree (i.e., how many trees per acre that one tree represents). Add both columns with a single call to mutate().\nNote that since these are 20 acre plots, the tree factor should be 20 for each tree.\nHINT: When creating the dbh_4in column, you can use cut_width() from ggplot2 or a case_when() inside of a mutate().\n\nexample_plots\n\n# A tibble: 8 × 5\n  plot_id species  dbh_in    tf dbh_4in\n    &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  \n1       1 Basswood    5.1    20 [2,6]  \n2       1 Basswood    5.5    20 [2,6]  \n3       1 Beech      10.1    20 (10,14]\n4       1 Red oak     5      20 [2,6]  \n5       2 Beech      11.5    20 (10,14]\n6       2 Beech      12.2    20 (10,14]\n7       2 Basswood    6      20 [2,6]  \n8       2 Red oak    10      20 (6,10]"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-14",
    "href": "labs/lab_09_web.html#exercise-14",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 14",
    "text": "Exercise 14\nCompute a stand table for plot 1 and 2. They should look like the tables below.\n\nPlot 1\n\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species  `[2,6]` `(6,10]` `(10,14]`\n  &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Basswood      40        0         0\n2 Beech          0        0        20\n3 Red oak       20        0         0\n\n\n\n\nPlot 2\n\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species  `[2,6]` `(6,10]` `(10,14]`\n  &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Basswood      20        0         0\n2 Beech          0        0        40\n3 Red oak        0       20         0"
  },
  {
    "objectID": "labs/lab_09_web.html#exercise-15",
    "href": "labs/lab_09_web.html#exercise-15",
    "title": "Joining and Reshaping Data",
    "section": "Exercise 15",
    "text": "Exercise 15\nThe stand table estimate we want combines information from each plot stand table by averaging their cell values. For example, plot 1 has 40 Basswood in the [2,6] in DBH class, and Plot 2 has 20 Basswood in the [2,6] in DBH class. So, best estimate of Basswood in the [2,6] in DBH class should be an average of 40 and 20 (i.e., mean(c(40,20))) which is 30.\nThe code below computes the desired stand table estimate (i.e., averages across plots) all at once. Your job is to study this code and convince yourself you understand it and can replicate it for different data. Take it apart. Run it bit by bit. Reverse engineer it to understand how it works. Use math by hand to confirm the average from the two tables above are the values you see in the table below.\n\nexample_plots %&gt;% \n  complete(plot_id, species, dbh_4in, fill = list(tf = 0)) %&gt;%\n  group_by(plot_id, species, dbh_4in) %&gt;%\n  summarize(tf_plot_level = sum(tf)) %&gt;% ## Plot-level summary of trees per acre.\n  group_by(species, dbh_4in) %&gt;% \n  summarise(mean_tpa = mean(tf_plot_level)) %&gt;% ## Forest-level mean of trees per acre.\n  pivot_wider(names_from = dbh_4in, values_from = mean_tpa)\n\n`summarise()` has grouped output by 'plot_id', 'species'. You can override\nusing the `.groups` argument.\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species  `[2,6]` `(6,10]` `(10,14]`\n  &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Basswood      30        0         0\n2 Beech          0        0        30\n3 Red oak       10       10         0"
  },
  {
    "objectID": "slides/w8d2.html#agenda",
    "href": "slides/w8d2.html#agenda",
    "title": "Advanced grouping and summarization",
    "section": "Agenda",
    "text": "Agenda\n\ngroup_by() and summarize() in further detail,\nCounting with n() and n_distinct(),\nWorking across() columns."
  },
  {
    "objectID": "slides/w8d2.html#dplyr-verbs",
    "href": "slides/w8d2.html#dplyr-verbs",
    "title": "Advanced grouping and summarization",
    "section": "dplyr verbs",
    "text": "dplyr verbs\nRecall the standard dplyr verb form:\n\nverb(data, action)\n\n\n\nThe first argument of any dplyr verb is the data (a tibble or data.frame), and the next arguments specify how we are using the verb().\nSince the first argument is always the data, dplyr functions can easily be “piped” between to create a pipeline from one verb to another.\nA very common pipeline between verbs occurs between group_by() and summarize()."
  },
  {
    "objectID": "slides/w8d2.html#again-we-will-use-more_pets",
    "href": "slides/w8d2.html#again-we-will-use-more_pets",
    "title": "Advanced grouping and summarization",
    "section": "Again, we will use more_pets",
    "text": "Again, we will use more_pets\n\nlibrary(tidyverse)\nmore_pets &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\", \"Marvin\", \"Figaro\", \"Slim\"),\n  ages = c(6, 5, 3, 11, 11, 3, 6),\n  meals_per_day = c(2, 3, 3, 3, 1, 2, 2),\n  type_of_animal = c(\"dog\", rep(\"cat\", 3), \"sheep/ram\", \"cat\", \"dog\")\n)\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 dog           \n2 Pickle     5             3 cat           \n3 Kyle       3             3 cat           \n4 Nubs      11             3 cat           \n5 Marvin    11             1 sheep/ram     \n6 Figaro     3             2 cat           \n7 Slim       6             2 dog"
  },
  {
    "objectID": "slides/w8d2.html#summarization",
    "href": "slides/w8d2.html#summarization",
    "title": "Advanced grouping and summarization",
    "section": "Summarization",
    "text": "Summarization\n\n\nData summaries are some of the best ways to learn from the data we have.\nWith increasingly large data, it can be very helpful to summarize.\ndplyr provides intuitive and powerful ways to summarize data.\nRecall: they call their function for summarization, suprisingly, summarize()"
  },
  {
    "objectID": "slides/w8d2.html#summarization-1",
    "href": "slides/w8d2.html#summarization-1",
    "title": "Advanced grouping and summarization",
    "section": "Summarization",
    "text": "Summarization\n\nThe summarize() function takes a very similar form to the other dplyr functions.\nIn particular, it is of the form:\n\n\nsummarize(data, new_summary_column_name = summarization_code)"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-value-of-the-pets-ages",
    "href": "slides/w8d2.html#get-the-mean-value-of-the-pets-ages",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean value of the pet’s ages",
    "text": "Get the mean value of the pet’s ages\n\nmore_pets %&gt;%\n  summarize(avg_age = mean(ages))\n\n# A tibble: 1 × 1\n  avg_age\n    &lt;dbl&gt;\n1    6.43"
  },
  {
    "objectID": "slides/w8d2.html#get-the-total-years-lived-by-the-pets",
    "href": "slides/w8d2.html#get-the-total-years-lived-by-the-pets",
    "title": "Advanced grouping and summarization",
    "section": "Get the total years lived by the pets",
    "text": "Get the total years lived by the pets\n\n\n# A tibble: 1 × 1\n  years_lived\n        &lt;dbl&gt;\n1          45"
  },
  {
    "objectID": "slides/w8d2.html#get-the-total-years-lived-by-the-pets-1",
    "href": "slides/w8d2.html#get-the-total-years-lived-by-the-pets-1",
    "title": "Advanced grouping and summarization",
    "section": "Get the total years lived by the pets",
    "text": "Get the total years lived by the pets\n\nmore_pets %&gt;%\n  summarize(years_lived = sum(ages))\n\n# A tibble: 1 × 1\n  years_lived\n        &lt;dbl&gt;\n1          45"
  },
  {
    "objectID": "slides/w8d2.html#custom-functions-in-summarize",
    "href": "slides/w8d2.html#custom-functions-in-summarize",
    "title": "Advanced grouping and summarization",
    "section": "Custom functions in summarize()",
    "text": "Custom functions in summarize()\nRecall the quadratic mean:\n\nquad_mean &lt;- function(x) {\n  return(sqrt(sum(x^2)) / length(x))\n}"
  },
  {
    "objectID": "slides/w8d2.html#custom-functions-in-summarize-1",
    "href": "slides/w8d2.html#custom-functions-in-summarize-1",
    "title": "Advanced grouping and summarization",
    "section": "Custom functions in summarize()",
    "text": "Custom functions in summarize()\nRecall the quadratic mean:\n\nquad_mean &lt;- function(x) {\n  return(sqrt(sum(x^2)) / length(x))\n}\n\nmore_pets %&gt;%\n  summarize(q_mean = quad_mean(ages),\n            a_mean = mean(ages))\n\n# A tibble: 1 × 2\n  q_mean a_mean\n   &lt;dbl&gt;  &lt;dbl&gt;\n1   2.70   6.43\n\n\n\n\nWe can use our own functions within a summarize!"
  },
  {
    "objectID": "slides/w8d2.html#group_by",
    "href": "slides/w8d2.html#group_by",
    "title": "Advanced grouping and summarization",
    "section": "group_by()",
    "text": "group_by()\n\n\nThe group_by() function allows us to group our tibble by a variable of interest.\ngroup_by() on its own, does not change the rows or columns of the tibble, it just makes it “grouped”\nHowever, when we go to summarize() “grouped” data, we get the results for each group.\nLet’s try it out!"
  },
  {
    "objectID": "slides/w8d2.html#average-age-for-each-type-of-pet",
    "href": "slides/w8d2.html#average-age-for-each-type-of-pet",
    "title": "Advanced grouping and summarization",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 dog           \n2 Pickle     5             3 cat           \n3 Kyle       3             3 cat           \n4 Nubs      11             3 cat           \n5 Marvin    11             1 sheep/ram     \n6 Figaro     3             2 cat           \n7 Slim       6             2 dog"
  },
  {
    "objectID": "slides/w8d2.html#average-age-for-each-type-of-pet-1",
    "href": "slides/w8d2.html#average-age-for-each-type-of-pet-1",
    "title": "Advanced grouping and summarization",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets %&gt;% \n  group_by(type_of_animal)\n\n# A tibble: 7 × 4\n# Groups:   type_of_animal [3]\n  names   ages meals_per_day type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 dog           \n2 Pickle     5             3 cat           \n3 Kyle       3             3 cat           \n4 Nubs      11             3 cat           \n5 Marvin    11             1 sheep/ram     \n6 Figaro     3             2 cat           \n7 Slim       6             2 dog"
  },
  {
    "objectID": "slides/w8d2.html#average-age-for-each-type-of-pet-2",
    "href": "slides/w8d2.html#average-age-for-each-type-of-pet-2",
    "title": "Advanced grouping and summarization",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets %&gt;% \n  group_by(type_of_animal) %&gt;%\n  summarize(avg_age = mean(ages))\n\n# A tibble: 3 × 2\n  type_of_animal avg_age\n  &lt;chr&gt;            &lt;dbl&gt;\n1 cat                5.5\n2 dog                6  \n3 sheep/ram         11"
  },
  {
    "objectID": "slides/w8d2.html#how-many-of-each-type-of-animal",
    "href": "slides/w8d2.html#how-many-of-each-type-of-animal",
    "title": "Advanced grouping and summarization",
    "section": "How many of each type of animal?",
    "text": "How many of each type of animal?\n\n\n# A tibble: 3 × 2\n  type_of_animal number_of_types\n  &lt;chr&gt;                    &lt;int&gt;\n1 cat                          4\n2 dog                          2\n3 sheep/ram                    1"
  },
  {
    "objectID": "slides/w8d2.html#how-many-of-each-type-of-animal-1",
    "href": "slides/w8d2.html#how-many-of-each-type-of-animal-1",
    "title": "Advanced grouping and summarization",
    "section": "How many of each type of animal?",
    "text": "How many of each type of animal?\n\nmore_pets %&gt;% \n  group_by(type_of_animal) %&gt;%\n  summarize(number_of_types = n())\n\n# A tibble: 3 × 2\n  type_of_animal number_of_types\n  &lt;chr&gt;                    &lt;int&gt;\n1 cat                          4\n2 dog                          2\n3 sheep/ram                    1"
  },
  {
    "objectID": "slides/w8d2.html#whats-going-on-with-n",
    "href": "slides/w8d2.html#whats-going-on-with-n",
    "title": "Advanced grouping and summarization",
    "section": "What’s going on with n()",
    "text": "What’s going on with n()\n\n\nThe n() function counts for us!\nWhen we use n(), nothing ever goes in the parentheses.\nFor our cases, we will use n() in within a summarize() or mutate() on a grouped dataset. n() counts the rows in each group for us."
  },
  {
    "objectID": "slides/w8d2.html#number-of-other-animals-of-the-same-type",
    "href": "slides/w8d2.html#number-of-other-animals-of-the-same-type",
    "title": "Advanced grouping and summarization",
    "section": "Number of other animals of the same type",
    "text": "Number of other animals of the same type\n\n\n# A tibble: 7 × 5\n# Groups:   type_of_animal [3]\n  names   ages meals_per_day type_of_animal other_of_same\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 Dude       6             2 dog                        1\n2 Pickle     5             3 cat                        3\n3 Kyle       3             3 cat                        3\n4 Nubs      11             3 cat                        3\n5 Marvin    11             1 sheep/ram                  0\n6 Figaro     3             2 cat                        3\n7 Slim       6             2 dog                        1"
  },
  {
    "objectID": "slides/w8d2.html#number-of-other-animals-of-the-same-type-1",
    "href": "slides/w8d2.html#number-of-other-animals-of-the-same-type-1",
    "title": "Advanced grouping and summarization",
    "section": "Number of other animals of the same type",
    "text": "Number of other animals of the same type\n\nmore_pets %&gt;% \n  group_by(type_of_animal) %&gt;%\n  mutate(other_of_same = n() - 1) \n\n# A tibble: 7 × 5\n# Groups:   type_of_animal [3]\n  names   ages meals_per_day type_of_animal other_of_same\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 Dude       6             2 dog                        1\n2 Pickle     5             3 cat                        3\n3 Kyle       3             3 cat                        3\n4 Nubs      11             3 cat                        3\n5 Marvin    11             1 sheep/ram                  0\n6 Figaro     3             2 cat                        3\n7 Slim       6             2 dog                        1"
  },
  {
    "objectID": "slides/w8d2.html#number-of-types-of-animals",
    "href": "slides/w8d2.html#number-of-types-of-animals",
    "title": "Advanced grouping and summarization",
    "section": "Number of types of animals",
    "text": "Number of types of animals\n\n\n# A tibble: 1 × 1\n  n_types\n    &lt;int&gt;\n1       3"
  },
  {
    "objectID": "slides/w8d2.html#number-of-types-of-animals-1",
    "href": "slides/w8d2.html#number-of-types-of-animals-1",
    "title": "Advanced grouping and summarization",
    "section": "Number of types of animals",
    "text": "Number of types of animals\n\nmore_pets %&gt;% \n  summarize(n_types = n_distinct(type_of_animal))\n\n# A tibble: 1 × 1\n  n_types\n    &lt;int&gt;\n1       3"
  },
  {
    "objectID": "slides/w8d2.html#the-n_distinct-function",
    "href": "slides/w8d2.html#the-n_distinct-function",
    "title": "Advanced grouping and summarization",
    "section": "The n_distinct() function",
    "text": "The n_distinct() function\n\n\nUsed similarly to n(), but takes columns as inputs,\nCounts the number of distinct values in the supplied columns,\nCan be used grouped."
  },
  {
    "objectID": "slides/w8d2.html#number-of-unique-ages-for-each-type-of-animal",
    "href": "slides/w8d2.html#number-of-unique-ages-for-each-type-of-animal",
    "title": "Advanced grouping and summarization",
    "section": "Number of unique ages for each type of animal",
    "text": "Number of unique ages for each type of animal\n\n\n# A tibble: 3 × 2\n  type_of_animal unique_ages\n  &lt;chr&gt;                &lt;int&gt;\n1 cat                      3\n2 dog                      1\n3 sheep/ram                1"
  },
  {
    "objectID": "slides/w8d2.html#number-of-unique-ages-for-each-type-of-animal-1",
    "href": "slides/w8d2.html#number-of-unique-ages-for-each-type-of-animal-1",
    "title": "Advanced grouping and summarization",
    "section": "Number of unique ages for each type of animal",
    "text": "Number of unique ages for each type of animal\n\nmore_pets %&gt;%\n  group_by(type_of_animal) %&gt;%\n  summarize(unique_ages = n_distinct(ages))\n\n# A tibble: 3 × 2\n  type_of_animal unique_ages\n  &lt;chr&gt;                &lt;int&gt;\n1 cat                      3\n2 dog                      1\n3 sheep/ram                1"
  },
  {
    "objectID": "slides/w8d2.html#across",
    "href": "slides/w8d2.html#across",
    "title": "Advanced grouping and summarization",
    "section": "across()",
    "text": "across()\n\n\nacross() takes two arguments: .cols and .fns\nThe .cols argument specifies the columns we’d like to apply our function, .fns, to.\nIn practice, we use across() within a mutate() or a summarize().\nLet’s try it out!"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-of-ages-and-meals_per_day",
    "href": "slides/w8d2.html#get-the-mean-of-ages-and-meals_per_day",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean of ages and meals_per_day",
    "text": "Get the mean of ages and meals_per_day\n\nmore_pets %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = mean)\n  )\n\n# A tibble: 1 × 2\n   ages meals_per_day\n  &lt;dbl&gt;         &lt;dbl&gt;\n1  6.43          2.29"
  },
  {
    "objectID": "slides/w8d2.html#make-the-ages-and-meals_per_day-columns-integers",
    "href": "slides/w8d2.html#make-the-ages-and-meals_per_day-columns-integers",
    "title": "Advanced grouping and summarization",
    "section": "Make the ages and meals_per_day columns integers",
    "text": "Make the ages and meals_per_day columns integers\n\n\n# A tibble: 7 × 4\n  names   ages meals_per_day type_of_animal\n  &lt;chr&gt;  &lt;int&gt;         &lt;int&gt; &lt;chr&gt;         \n1 Dude       6             2 dog           \n2 Pickle     5             3 cat           \n3 Kyle       3             3 cat           \n4 Nubs      11             3 cat           \n5 Marvin    11             1 sheep/ram     \n6 Figaro     3             2 cat           \n7 Slim       6             2 dog"
  },
  {
    "objectID": "slides/w8d2.html#make-the-ages-and-meals_per_day-columns-integers-1",
    "href": "slides/w8d2.html#make-the-ages-and-meals_per_day-columns-integers-1",
    "title": "Advanced grouping and summarization",
    "section": "Make the ages and meals_per_day columns integers",
    "text": "Make the ages and meals_per_day columns integers\n\nmore_pets %&gt;%\n  mutate(\n    across(.cols = c(ages, meals_per_day),\n           .fns = as.integer)\n  )\n\n# A tibble: 7 × 4\n  names   ages meals_per_day type_of_animal\n  &lt;chr&gt;  &lt;int&gt;         &lt;int&gt; &lt;chr&gt;         \n1 Dude       6             2 dog           \n2 Pickle     5             3 cat           \n3 Kyle       3             3 cat           \n4 Nubs      11             3 cat           \n5 Marvin    11             1 sheep/ram     \n6 Figaro     3             2 cat           \n7 Slim       6             2 dog"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day",
    "href": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean and standard deviation of ages and meals_per_day",
    "text": "Get the mean and standard deviation of ages and meals_per_day\nBad example\n\nmore_pets %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = mean)\n  )\n\n# A tibble: 1 × 2\n   ages meals_per_day\n  &lt;dbl&gt;         &lt;dbl&gt;\n1  6.43          2.29\n\nmore_pets %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = sd)\n  )\n\n# A tibble: 1 × 2\n   ages meals_per_day\n  &lt;dbl&gt;         &lt;dbl&gt;\n1  3.36         0.756"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-1",
    "href": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-1",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean and standard deviation of ages and meals_per_day",
    "text": "Get the mean and standard deviation of ages and meals_per_day\nBetter\n\nmore_pets %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = c(mean, sd))\n  )\n\n# A tibble: 1 × 4\n  ages_1 ages_2 meals_per_day_1 meals_per_day_2\n   &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1   6.43   3.36            2.29           0.756"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-2",
    "href": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-2",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean and standard deviation of ages and meals_per_day",
    "text": "Get the mean and standard deviation of ages and meals_per_day\nBest\n\nmore_pets %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = c(mean = mean, standard_deviation = sd))\n  )\n\n# A tibble: 1 × 4\n  ages_mean ages_standard_deviation meals_per_day_mean meals_per_day_standard_…¹\n      &lt;dbl&gt;                   &lt;dbl&gt;              &lt;dbl&gt;                     &lt;dbl&gt;\n1      6.43                    3.36               2.29                     0.756\n# ℹ abbreviated name: ¹​meals_per_day_standard_deviation"
  },
  {
    "objectID": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-grouped-by-type-of-animal",
    "href": "slides/w8d2.html#get-the-mean-and-standard-deviation-of-ages-and-meals_per_day-grouped-by-type-of-animal",
    "title": "Advanced grouping and summarization",
    "section": "Get the mean and standard deviation of ages and meals_per_day, grouped by type of animal",
    "text": "Get the mean and standard deviation of ages and meals_per_day, grouped by type of animal\n\nmore_pets %&gt;%\n  group_by(type_of_animal) %&gt;%\n  summarize(\n    across(.cols = c(ages, meals_per_day),\n           .fns = c(mean = mean, standard_deviation = sd))\n  )\n\n# A tibble: 3 × 5\n  type_of_animal ages_mean ages_standard_deviation meals_per_day_mean\n  &lt;chr&gt;              &lt;dbl&gt;                   &lt;dbl&gt;              &lt;dbl&gt;\n1 cat                  5.5                    3.79               2.75\n2 dog                  6                      0                  2   \n3 sheep/ram           11                     NA                  1   \n# ℹ 1 more variable: meals_per_day_standard_deviation &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w8d2.html#specifying-function-arguments-in-calls-to-across",
    "href": "slides/w8d2.html#specifying-function-arguments-in-calls-to-across",
    "title": "Advanced grouping and summarization",
    "section": "Specifying function arguments in calls to across()",
    "text": "Specifying function arguments in calls to across()\nConsider the toy dataset:\n\ntrees &lt;- tibble(\n  dbh = c(15, 9, NA),\n  height = c(50, 34, 33),\n  spp = c(\"doug-fir\", \"madrone\", \"doug-fir\")\n)\ntrees\n\n# A tibble: 3 × 3\n    dbh height spp     \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   \n1    15     50 doug-fir\n2     9     34 madrone \n3    NA     33 doug-fir"
  },
  {
    "objectID": "slides/w8d2.html#what-if-we-want-the-mean-dbh-and-height",
    "href": "slides/w8d2.html#what-if-we-want-the-mean-dbh-and-height",
    "title": "Advanced grouping and summarization",
    "section": "What if we want the mean dbh and height?",
    "text": "What if we want the mean dbh and height?\n\ntrees %&gt;%\n  summarize(\n    across(.cols = c(dbh, height),\n           .fns = mean)\n  )\n\n# A tibble: 1 × 2\n    dbh height\n  &lt;dbl&gt;  &lt;dbl&gt;\n1    NA     39\n\n\n\n\nreturns NA :-("
  },
  {
    "objectID": "slides/w8d2.html#we-need-lambda-syntax",
    "href": "slides/w8d2.html#we-need-lambda-syntax",
    "title": "Advanced grouping and summarization",
    "section": "We need “lambda syntax”",
    "text": "We need “lambda syntax”\n\ntrees %&gt;%\n  summarize(\n    across(.cols = c(dbh, height),\n           .fns = ~ mean(.x, na.rm = TRUE))\n  )\n\n# A tibble: 1 × 2\n    dbh height\n  &lt;dbl&gt;  &lt;dbl&gt;\n1    12     39"
  },
  {
    "objectID": "slides/w8d2.html#we-need-lambda-syntax-1",
    "href": "slides/w8d2.html#we-need-lambda-syntax-1",
    "title": "Advanced grouping and summarization",
    "section": "We need “lambda syntax”",
    "text": "We need “lambda syntax”\n\ntrees %&gt;%\n  summarize(\n    across(.cols = c(dbh, height),\n           .fns = ~ mean(.x, na.rm = TRUE))\n  )\n\n# A tibble: 1 × 2\n    dbh height\n  &lt;dbl&gt;  &lt;dbl&gt;\n1    12     39\n\n\n\n\nBefore, we had .fns = mean, but with lambda syntax we can specify additional arguments in the newfound parentheses.\nWe use the tilde ~ to specify lambda syntax.\nAfter we’ve specified the ~, we can now put parentheses after the function and specify additional arguments."
  },
  {
    "objectID": "slides/w8d2.html#we-need-lambda-syntax-2",
    "href": "slides/w8d2.html#we-need-lambda-syntax-2",
    "title": "Advanced grouping and summarization",
    "section": "We need “lambda syntax”",
    "text": "We need “lambda syntax”\n\ntrees %&gt;%\n  summarize(\n    across(.cols = c(dbh, height),\n           .fns = ~ mean(.x, na.rm = TRUE))\n  )\n\n# A tibble: 1 × 2\n    dbh height\n  &lt;dbl&gt;  &lt;dbl&gt;\n1    12     39\n\n\n\nWe now must specify .x in the place where the columns go (before, this happened implicitly)"
  },
  {
    "objectID": "slides/w8d2.html#next-time",
    "href": "slides/w8d2.html#next-time",
    "title": "Advanced grouping and summarization",
    "section": "Next time",
    "text": "Next time\n\nJoining tibbles with dplyr"
  },
  {
    "objectID": "slides/w11d1.html#annoucements",
    "href": "slides/w11d1.html#annoucements",
    "title": "Creating graphics with ggplot2",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm II is Thursday, November 14th, during lab time.\nMaterial on the midterm will include all material through Week 11 (this week!).\nThe midterm will be of similar form to the last midterm.\nClosed materials, but you are allowed one 8.5” x 11” sheet of paper, double-sided, hand-written note sheet."
  },
  {
    "objectID": "slides/w11d1.html#agenda",
    "href": "slides/w11d1.html#agenda",
    "title": "Creating graphics with ggplot2",
    "section": "Agenda",
    "text": "Agenda\n\nComponents of a graphic (i.e. the grammar of graphics)\nComposing a graphic"
  },
  {
    "objectID": "slides/w11d1.html#what-is-a-graphic-made-up-of",
    "href": "slides/w11d1.html#what-is-a-graphic-made-up-of",
    "title": "Creating graphics with ggplot2",
    "section": "What is a graphic made up of?",
    "text": "What is a graphic made up of?"
  },
  {
    "objectID": "slides/w11d1.html#what-is-a-graphic-made-up-of-1",
    "href": "slides/w11d1.html#what-is-a-graphic-made-up-of-1",
    "title": "Creating graphics with ggplot2",
    "section": "What is a graphic made up of?",
    "text": "What is a graphic made up of?\n\n\nData, and\nVisual components"
  },
  {
    "objectID": "slides/w11d1.html#data",
    "href": "slides/w11d1.html#data",
    "title": "Creating graphics with ggplot2",
    "section": "Data",
    "text": "Data\nThat graphics we will create use data in the same form as we have seen thus far in the course.\nIn other words, we will use tibbles to create graphics"
  },
  {
    "objectID": "slides/w11d1.html#data-1",
    "href": "slides/w11d1.html#data-1",
    "title": "Creating graphics with ggplot2",
    "section": "Data",
    "text": "Data\nWhat might the rows and columns of the tibble used to create this graphic be?"
  },
  {
    "objectID": "slides/w11d1.html#visual-components",
    "href": "slides/w11d1.html#visual-components",
    "title": "Creating graphics with ggplot2",
    "section": "Visual components",
    "text": "Visual components\nIn order to create a graphic or “plot”, one must choose visualize the variables of the data to the attributes of the plot. Further, one must choose the cosmetic properties of the plot.\nLayers can be specified as a variety of components:\n\n\ngeom: the geometric shape that the data are mapped to,\n\nExamples: point, line, bar, text, path, …\n\naesthetics: The visual properties of the geom.\n\nExamples: x-position, y-position, color, fill, shape\n\ncoord: coordinate system,\n\nExamples: Cartesian, polar, lon/lat projection\n\nscale: how data are mapped to certain aesthetics.\n\nExample: which colors or shapes to use?\n\n\nfacet: a technique to split plots into multiple panels,\nthemes: the cosmetic attributes of the plot."
  },
  {
    "objectID": "slides/w11d1.html#visual-components-1",
    "href": "slides/w11d1.html#visual-components-1",
    "title": "Creating graphics with ggplot2",
    "section": "Visual components",
    "text": "Visual components\nWhat are the visual components used in this graphic? (geoms, aesthetics, coords, scale, facets, themes)"
  },
  {
    "objectID": "slides/w11d1.html#consider-the-fef-dataset",
    "href": "slides/w11d1.html#consider-the-fef-dataset",
    "title": "Creating graphics with ggplot2",
    "section": "Consider the fef dataset",
    "text": "Consider the fef dataset\n\nlibrary(tidyverse)\nfef &lt;- read_csv(\"../labs/datasets/FEF_trees.csv\")\nfef\n\n# A tibble: 88 × 18\n   watershed  year  plot species     dbh_in height_ft stem_green_kg top_green_kg\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1         3  1991    29 Acer rubrum    6        48            92.2         13.1\n 2         3  1991    33 Acer rubrum    6.9      48           102.          23.1\n 3         3  1991    35 Acer rubrum    6.4      48           124.           8.7\n 4         3  1991    39 Acer rubrum    6.5      49            91.7         39  \n 5         3  1991    44 Acer rubrum    7.2      51           186.           8.9\n 6         3  1992    26 Acer rubrum    3.1      40            20.8          0.9\n 7         3  1992    26 Acer rubrum    2        30.5           5.6          0.9\n 8         3  1992    26 Acer rubrum    4.1      50            54.1          8.6\n 9         3  1992    48 Acer rubrum    2.4      28            10.2          0.7\n10         3  1992    48 Acer rubrum    2.7      40.4          20.2          5  \n# ℹ 78 more rows\n# ℹ 10 more variables: smbranch_green_kg &lt;dbl&gt;, lgbranch_green_kg &lt;dbl&gt;,\n#   allwoody_green_kg &lt;dbl&gt;, leaves_green_kg &lt;dbl&gt;, stem_dry_kg &lt;dbl&gt;,\n#   top_dry_kg &lt;dbl&gt;, smbranch_dry_kg &lt;dbl&gt;, lgbranch_dry_kg &lt;dbl&gt;,\n#   allwoody_dry_kg &lt;dbl&gt;, leaves_dry_kg &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot",
    "href": "slides/w11d1.html#lets-create-a-plot",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nFirst, our canvas:\n\nggplot()"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-1",
    "href": "slides/w11d1.html#lets-create-a-plot-1",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nThen, we specify the data:\n\nggplot(data = fef)"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-2",
    "href": "slides/w11d1.html#lets-create-a-plot-2",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nQuestion: why is this still blank?\n\nggplot(data = fef)"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-3",
    "href": "slides/w11d1.html#lets-create-a-plot-3",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nAnswer: we need to specify aesthetic mappings!\n\nggplot(data = fef, mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-4",
    "href": "slides/w11d1.html#lets-create-a-plot-4",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nWe’ve now specified that “species” will be mapped to the x-axis, and “dbh_in” will be mapped to the y-axis.\n\n\nBut we still haven’t specified what geometry to map these aesthetic attributes to.\n\n\n\nggplot(data = fef, mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-5",
    "href": "slides/w11d1.html#lets-create-a-plot-5",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nWe’ve now specified that we will map these aesthetics to “points”.\n\nggplot(data = fef, mapping = aes(x = species, y = dbh_in)) +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-6",
    "href": "slides/w11d1.html#lets-create-a-plot-6",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nYou can also specify the aesthetic mapping in the geometry layer:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-7",
    "href": "slides/w11d1.html#lets-create-a-plot-7",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s take a look at other geometric objects we could map aesthetics to:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-8",
    "href": "slides/w11d1.html#lets-create-a-plot-8",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s take a look at other geometric objects we could map aesthetics to:\n\nggplot(data = fef) +\n  geom_boxplot(mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-9",
    "href": "slides/w11d1.html#lets-create-a-plot-9",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s take a look at other geometric objects we could map aesthetics to:\n\nggplot(data = fef) +\n  geom_violin(mapping = aes(x = species, y = dbh_in))"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-10",
    "href": "slides/w11d1.html#lets-create-a-plot-10",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nWe can also add layers on top of each other\n\nggplot(data = fef, mapping = aes(x = species, y = dbh_in)) +\n  geom_violin() +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d1.html#lets-create-a-plot-11",
    "href": "slides/w11d1.html#lets-create-a-plot-11",
    "title": "Creating graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nNote here that I moved the mapping back to ggplot(): “inheriting aesthetics”\n\nggplot(data = fef, mapping = aes(x = species, y = dbh_in)) +\n  geom_violin() +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d1.html#a-different-plot-what-are-the-mappings",
    "href": "slides/w11d1.html#a-different-plot-what-are-the-mappings",
    "title": "Creating graphics with ggplot2",
    "section": "A different plot: what are the mappings?",
    "text": "A different plot: what are the mappings?\n\nggplot(data = fef, mapping = aes(x = dbh_in, y = height_ft)) +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d1.html#a-different-plot-what-are-the-mappings-1",
    "href": "slides/w11d1.html#a-different-plot-what-are-the-mappings-1",
    "title": "Creating graphics with ggplot2",
    "section": "A different plot: what are the mappings?",
    "text": "A different plot: what are the mappings?\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d1.html#modifying-the-scale-changing-colors",
    "href": "slides/w11d1.html#modifying-the-scale-changing-colors",
    "title": "Creating graphics with ggplot2",
    "section": "Modifying the scale: changing colors",
    "text": "Modifying the scale: changing colors\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() + \n  scale_color_manual(values = c(\"firebrick\", \"plum\",\"aquamarine\", \"steelblue\"))"
  },
  {
    "objectID": "slides/w11d1.html#modifying-the-scale-changing-colors-1",
    "href": "slides/w11d1.html#modifying-the-scale-changing-colors-1",
    "title": "Creating graphics with ggplot2",
    "section": "Modifying the scale: changing colors",
    "text": "Modifying the scale: changing colors\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() + \n  scale_color_brewer(palette = \"Set2\")"
  },
  {
    "objectID": "slides/w11d1.html#adding-another-layer-smoothing-line",
    "href": "slides/w11d1.html#adding-another-layer-smoothing-line",
    "title": "Creating graphics with ggplot2",
    "section": "Adding another layer: smoothing line",
    "text": "Adding another layer: smoothing line\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() + \n  geom_smooth() +\n  scale_color_brewer(palette = \"Set2\")"
  },
  {
    "objectID": "slides/w11d1.html#adding-another-layer-smoothing-line-1",
    "href": "slides/w11d1.html#adding-another-layer-smoothing-line-1",
    "title": "Creating graphics with ggplot2",
    "section": "Adding another layer: smoothing line",
    "text": "Adding another layer: smoothing line\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() + \n  geom_smooth(se = FALSE) +\n  scale_color_brewer(palette = \"Set2\")"
  },
  {
    "objectID": "slides/w11d1.html#changing-the-size-mapping",
    "href": "slides/w11d1.html#changing-the-size-mapping",
    "title": "Creating graphics with ggplot2",
    "section": "Changing the size mapping",
    "text": "Changing the size mapping\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point(size = 3) + \n  geom_smooth(se = FALSE) +\n  scale_color_brewer(palette = \"Set2\")"
  },
  {
    "objectID": "slides/w11d1.html#changing-the-size-mapping-1",
    "href": "slides/w11d1.html#changing-the-size-mapping-1",
    "title": "Creating graphics with ggplot2",
    "section": "Changing the size mapping",
    "text": "Changing the size mapping\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() + \n  geom_smooth(se = FALSE, linewidth = 3) +\n  scale_color_brewer(palette = \"Set2\")"
  },
  {
    "objectID": "slides/w11d1.html#a-different-way-to-look-by-species-facets",
    "href": "slides/w11d1.html#a-different-way-to-look-by-species-facets",
    "title": "Creating graphics with ggplot2",
    "section": "A different way to look by species: facets",
    "text": "A different way to look by species: facets\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft)) +\n  geom_point() +\n  facet_wrap(~species)"
  },
  {
    "objectID": "slides/w11d1.html#changing-the-number-of-rows-of-facets",
    "href": "slides/w11d1.html#changing-the-number-of-rows-of-facets",
    "title": "Creating graphics with ggplot2",
    "section": "Changing the number of rows of facets",
    "text": "Changing the number of rows of facets\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft)) +\n  geom_point() +\n  facet_wrap(~species, nrow = 1)"
  },
  {
    "objectID": "slides/w11d1.html#adding-a-smoothing-line",
    "href": "slides/w11d1.html#adding-a-smoothing-line",
    "title": "Creating graphics with ggplot2",
    "section": "Adding a smoothing line",
    "text": "Adding a smoothing line\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1)"
  },
  {
    "objectID": "slides/w11d1.html#color-aesthetic-mapping-facet-by-species.",
    "href": "slides/w11d1.html#color-aesthetic-mapping-facet-by-species.",
    "title": "Creating graphics with ggplot2",
    "section": "Color aesthetic mapping + facet by species.",
    "text": "Color aesthetic mapping + facet by species.\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1)"
  },
  {
    "objectID": "slides/w11d1.html#new-color-scale",
    "href": "slides/w11d1.html#new-color-scale",
    "title": "Creating graphics with ggplot2",
    "section": "New color scale",
    "text": "New color scale\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\")"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme",
    "href": "slides/w11d1.html#specifying-a-theme",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_bw()"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme-1",
    "href": "slides/w11d1.html#specifying-a-theme-1",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal()"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme-2",
    "href": "slides/w11d1.html#specifying-a-theme-2",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_dark()"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme-3",
    "href": "slides/w11d1.html#specifying-a-theme-3",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nlibrary(ggthemes)\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_fivethirtyeight()"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme-4",
    "href": "slides/w11d1.html#specifying-a-theme-4",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_economist()"
  },
  {
    "objectID": "slides/w11d1.html#specifying-a-theme-5",
    "href": "slides/w11d1.html#specifying-a-theme-5",
    "title": "Creating graphics with ggplot2",
    "section": "Specifying a theme",
    "text": "Specifying a theme\n\nggplot(data = fef, mapping = aes(x = dbh_in,\n                                 y = height_ft,\n                                 color = species)) +\n  geom_point() +\n  geom_smooth(se = FALSE) + \n  facet_wrap(~species, nrow = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_solarized()"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow",
    "href": "slides/w11d1.html#napoleons-march-on-moscow",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow",
    "text": "Napoleon’s march on Moscow"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\ncities &lt;- read_table(\"minard-cities.txt\")\ntroops &lt;- read_table(\"minard-troops.txt\")"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-1",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-1",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\ncities\n\n# A tibble: 20 × 3\n    long   lat city          \n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         \n 1  24    55   Kowno         \n 2  25.3  54.7 Wilna         \n 3  26.4  54.4 Smorgoni      \n 4  26.8  54.3 Moiodexno     \n 5  27.7  55.2 Gloubokoe     \n 6  27.6  53.9 Minsk         \n 7  28.5  54.3 Studienska    \n 8  28.7  55.5 Polotzk       \n 9  29.2  54.4 Bobr          \n10  30.2  55.3 Witebsk       \n11  30.4  54.5 Orscha        \n12  30.4  53.9 Mohilow       \n13  32    54.8 Smolensk      \n14  33.2  54.9 Dorogobouge   \n15  34.3  55.2 Wixma         \n16  34.4  55.5 Chjat         \n17  36    55.5 Mojaisk       \n18  37.6  55.8 Moscou        \n19  36.6  55.3 Tarantino     \n20  36.5  55   Malo-Jarosewii"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-2",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-2",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\ntroops\n\n# A tibble: 51 × 5\n    long   lat survivors direction group\n   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1  24    54.9    340000 A             1\n 2  24.5  55      340000 A             1\n 3  25.5  54.5    340000 A             1\n 4  26    54.7    320000 A             1\n 5  27    54.8    300000 A             1\n 6  28    54.9    280000 A             1\n 7  28.5  55      240000 A             1\n 8  29    55.1    210000 A             1\n 9  30    55.2    180000 A             1\n10  30.3  55.3    175000 A             1\n# ℹ 41 more rows"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-3",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-3",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(data = troops, mapping = aes(long, lat))"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-4",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-4",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group))"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-5",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-5",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group)) + \n  geom_text(data = cities, mapping = aes(label = city), size = 4)"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-6",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-6",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group)) + \n  geom_text(data = cities, mapping = aes(label = city), size = 4) + \n  scale_color_manual(values = c(\"darkgoldenrod\",\"grey50\"))"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-7",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-7",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group)) + \n  geom_text(data = cities, mapping = aes(label = city), size = 4) + \n  scale_color_manual(values = c(\"darkgoldenrod\",\"grey50\")) +\n  labs(x = \"\", y = \"\")"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-8",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-8",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group)) + \n  geom_text(data = cities, mapping = aes(label = city), size = 4) + \n  scale_color_manual(values = c(\"darkgoldenrod\",\"grey50\")) +\n  labs(x = \"\", y = \"\") + \n  theme_solarized()"
  },
  {
    "objectID": "slides/w11d1.html#napoleons-march-on-moscow-in-r-9",
    "href": "slides/w11d1.html#napoleons-march-on-moscow-in-r-9",
    "title": "Creating graphics with ggplot2",
    "section": "Napoleon’s march on Moscow: in R",
    "text": "Napoleon’s march on Moscow: in R\n\nggplot(mapping = aes(long, lat)) +\n  geom_path(data = troops, aes(size = survivors, color = direction, group = group)) + \n  geom_text(data = cities, mapping = aes(label = city), size = 4) + \n  scale_color_manual(values = c(\"darkgoldenrod\",\"grey50\")) +\n  labs(x = \"\", y = \"\") + \n  theme_solarized() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "slides/w11d1.html#questions-to-consider",
    "href": "slides/w11d1.html#questions-to-consider",
    "title": "Creating graphics with ggplot2",
    "section": "Questions to consider",
    "text": "Questions to consider\n\nHow should we depict the species in these graphics? What is best? (hint: it depends)\nWhat separates a good graphic from a bad one? From a great one?"
  },
  {
    "objectID": "slides/w11d1.html#next-time",
    "href": "slides/w11d1.html#next-time",
    "title": "Creating graphics with ggplot2",
    "section": "Next time",
    "text": "Next time\n\nMore plotting with ggplot2!\n\nhistograms and bar plots\ncareful considerations when making plots"
  },
  {
    "objectID": "slides/w9d1.html#agenda",
    "href": "slides/w9d1.html#agenda",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Agenda",
    "text": "Agenda\n\nCombining tibbles (i.e. data joins)\nApplications of data joins to forestry"
  },
  {
    "objectID": "slides/w9d1.html#data-joins-in-r",
    "href": "slides/w9d1.html#data-joins-in-r",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Data Joins in R",
    "text": "Data Joins in R\nToday, we’ll talk about joining tibbles in R with dplyr.\n\nArtwork by Allison Horst."
  },
  {
    "objectID": "slides/w9d1.html#data-joins-in-r-1",
    "href": "slides/w9d1.html#data-joins-in-r-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Data Joins in R",
    "text": "Data Joins in R\nRecall that the dplyr package, short for “data pliers”, is an R package all about wrangling data.\n\nToday, we will explore it’s tools for joining data tables (i.e. “tibbles”)."
  },
  {
    "objectID": "slides/w9d1.html#data-joins-in-r-2",
    "href": "slides/w9d1.html#data-joins-in-r-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Data Joins in R",
    "text": "Data Joins in R\nIn particular, we’ll look at a few ways to join the following tables x and y:"
  },
  {
    "objectID": "slides/w9d1.html#motivation",
    "href": "slides/w9d1.html#motivation",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Motivation",
    "text": "Motivation\n\n\nIt is common in forestry, and in particular forest inventory, to have multiple tibbles where data are stored due to a variety of factors.\nIn order to perform most statistical analyses, you must have the necessary data in one tibble.\nExample: the US Forest Service, Forest Inventory & Analysis stores plot-level, tree-level, subplot-level, … data in one database. Researchers must combine these data into a singular table to do analyses."
  },
  {
    "objectID": "slides/w9d1.html#types-of-data-joins",
    "href": "slides/w9d1.html#types-of-data-joins",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Types of Data Joins",
    "text": "Types of Data Joins\nThe dplyr package, which is part of the tidyverse, includes functions for two general types of joins:\n\n\nMutating joins, which combine the columns of tibbles x and y, and\nFiltering joins, which match the rows of tibbles x and y."
  },
  {
    "objectID": "slides/w9d1.html#types-of-data-joins-1",
    "href": "slides/w9d1.html#types-of-data-joins-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Types of Data Joins",
    "text": "Types of Data Joins\nThe dplyr package, which is part of the tidyverse, includes functions for two general types of joins:\n\nMutating joins, which combine the columns of tibbles x and y, and\nFiltering joins, which match the rows of tibbles x and y.\n\nThink of how mutate() adds columns to a tibble, while filter() removes rows."
  },
  {
    "objectID": "slides/w9d1.html#example-data",
    "href": "slides/w9d1.html#example-data",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Example Data",
    "text": "Example Data\nFor the following examples of data joins, we will use the tibbles from the first slide. We can load this data into R:\n\nlibrary(tidyverse)\nx &lt;- tibble(spp_code = c(\"ABBA\", \"BEPA\", \"PIST\"),\n            common_name = c(\"balsum fir\", \"paper birch\", \"white pine\"))\n\ny &lt;- tibble(spp_code = c(\"ABBA\", \"BEPA\", \"LALA\"),\n            latin_name = c(\"Abies balsamea\", \n                           \"Betula papyrifera\",\n                           \"Larix laricina\"))"
  },
  {
    "objectID": "slides/w9d1.html#mutating-joins",
    "href": "slides/w9d1.html#mutating-joins",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Mutating Joins",
    "text": "Mutating Joins\ndplyr contains four mutating joins:\n\nleft_join(x, y) keeps all rows of x, but if a row in y does not match to x, an NA is assigned to that row in the new columns."
  },
  {
    "objectID": "slides/w9d1.html#mutating-joins-1",
    "href": "slides/w9d1.html#mutating-joins-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Mutating Joins",
    "text": "Mutating Joins\ndplyr contains four mutating joins:\n\nleft_join(x, y) keeps all rows of x, but if a row in y does not match to x, an NA is assigned to that row in the new columns.\nright_join(x, y) is equivalent to left_join(y, x), except for column order."
  },
  {
    "objectID": "slides/w9d1.html#mutating-joins-2",
    "href": "slides/w9d1.html#mutating-joins-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Mutating Joins",
    "text": "Mutating Joins\ndplyr contains four mutating joins:\n\nleft_join(x, y) keeps all rows of x, but if a row in y does not match to x, an NA is assigned to that row in the new columns.\nright_join(x, y) is equivalent to left_join(y, x), except for column order.\n\ninner_join(x, y) keeps only the rows matched between x and y."
  },
  {
    "objectID": "slides/w9d1.html#mutating-joins-3",
    "href": "slides/w9d1.html#mutating-joins-3",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Mutating Joins",
    "text": "Mutating Joins\ndplyr contains four mutating joins:\n\nleft_join(x, y) keeps all rows of x, but if a row in y does not match to x, an NA is assigned to that row in the new columns.\nright_join(x, y) is equivalent to left_join(y, x), except for column order.\n\ninner_join(x, y) keeps only the rows matched between x and y.\nfull_join(x, y) keeps all rows of both x and y."
  },
  {
    "objectID": "slides/w9d1.html#examples-mutating-joins",
    "href": "slides/w9d1.html#examples-mutating-joins",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Examples: Mutating Joins",
    "text": "Examples: Mutating Joins\nRecall our example data\n\nx\n\n# A tibble: 3 × 2\n  spp_code common_name\n  &lt;chr&gt;    &lt;chr&gt;      \n1 ABBA     balsum fir \n2 BEPA     paper birch\n3 PIST     white pine \n\ny\n\n# A tibble: 3 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera\n3 LALA     Larix laricina"
  },
  {
    "objectID": "slides/w9d1.html#left_join",
    "href": "slides/w9d1.html#left_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "left_join()",
    "text": "left_join()\n\nleft_join(x, y)\n\nJoining with `by = join_by(spp_code)`\n\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;"
  },
  {
    "objectID": "slides/w9d1.html#left_join-1",
    "href": "slides/w9d1.html#left_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "left_join()",
    "text": "left_join()\n\nleft_join(x, y)\n\nJoining with `by = join_by(spp_code)`\n\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n\n\nBut what’s that message about?\n\"Joining with `by = join_by(spp_code)`\""
  },
  {
    "objectID": "slides/w9d1.html#we-need-to-specify-a-key",
    "href": "slides/w9d1.html#we-need-to-specify-a-key",
    "title": "Combining multiple tibbles with dplyr",
    "section": "We need to specify a key 🔑",
    "text": "We need to specify a key 🔑\nA key is can just be thought of the name(s) of the column(s) you’re joining by. In the left_join() from the last slide, R assumed we were joining by the column spp_code since both x and y have a column with that name."
  },
  {
    "objectID": "slides/w9d1.html#we-need-to-specify-a-key-1",
    "href": "slides/w9d1.html#we-need-to-specify-a-key-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "We need to specify a key 🔑",
    "text": "We need to specify a key 🔑\nA key is can just be thought of the name(s) of the column(s) you’re joining by. In the left_join() from the last slide, R assumed we were joining by the column spp_code since both x and y have a column with that name.\nKeys are important, especially when the columns you are joining by have different names, or you are joining by multiple columns."
  },
  {
    "objectID": "slides/w9d1.html#left_join-with-a",
    "href": "slides/w9d1.html#left_join-with-a",
    "title": "Combining multiple tibbles with dplyr",
    "section": "left_join(), with a 🔑",
    "text": "left_join(), with a 🔑\n\nleft_join(x, y, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n\n\n\nNotice that we specify this key with the by argument. This is the same for all joins in dplyr."
  },
  {
    "objectID": "slides/w9d1.html#right_join",
    "href": "slides/w9d1.html#right_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "right_join()",
    "text": "right_join()\n\nright_join(y, x, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 PIST     &lt;NA&gt;              white pine"
  },
  {
    "objectID": "slides/w9d1.html#right_join-1",
    "href": "slides/w9d1.html#right_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "right_join()",
    "text": "right_join()\n\nright_join(y, x, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 PIST     &lt;NA&gt;              white pine \n\n\nNotice that this is the same as our previous left_join().\nWhat happens if we try switching the order of x and y?\n\nright_join(x, y, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#right_join-2",
    "href": "slides/w9d1.html#right_join-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "right_join()",
    "text": "right_join()\n\nright_join(y, x, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 PIST     &lt;NA&gt;              white pine \n\n\nNotice that this is the same as our previous left_join().\nWhat happens if we try switching the order of x and y?\n\nright_join(x, y, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 LALA     &lt;NA&gt;        Larix laricina"
  },
  {
    "objectID": "slides/w9d1.html#inner_join",
    "href": "slides/w9d1.html#inner_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "inner_join()",
    "text": "inner_join()\nHow many rows will the output have?\n\ninner_join(x, y, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#inner_join-1",
    "href": "slides/w9d1.html#inner_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "inner_join()",
    "text": "inner_join()\nHow many rows will the output have?\n\ninner_join(x, y, by = \"spp_code\")\n\n# A tibble: 2 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n\n\nWhy is this the result?"
  },
  {
    "objectID": "slides/w9d1.html#full_join",
    "href": "slides/w9d1.html#full_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "full_join()",
    "text": "full_join()\nHow many rows will the output have?\n\nfull_join(x, y, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#full_join-1",
    "href": "slides/w9d1.html#full_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "full_join()",
    "text": "full_join()\nHow many rows will the output have?\n\nfull_join(x, y, by = \"spp_code\")\n\n# A tibble: 4 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n4 LALA     &lt;NA&gt;        Larix laricina   \n\n\nWhy is this the result?"
  },
  {
    "objectID": "slides/w9d1.html#filtering-joins",
    "href": "slides/w9d1.html#filtering-joins",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Filtering Joins",
    "text": "Filtering Joins\ndplyr contains two filtering joins:\n\nsemi_join(x, y) keeps all the rows in x that have a match in y."
  },
  {
    "objectID": "slides/w9d1.html#filtering-joins-1",
    "href": "slides/w9d1.html#filtering-joins-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Filtering Joins",
    "text": "Filtering Joins\ndplyr contains two filtering joins:\n\nsemi_join(x, y) keeps all the rows in x that have a match in y.\nanti_join(x, y) removes all the rows in x that have a match in y.\n\nNote: Unlike mutating joins, filtering joins do not add any columns to the data."
  },
  {
    "objectID": "slides/w9d1.html#semi_join",
    "href": "slides/w9d1.html#semi_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "semi_join()",
    "text": "semi_join()\nHow many rows will this semi_join return? How many columns?\n\nsemi_join(x, y, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#semi_join-1",
    "href": "slides/w9d1.html#semi_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "semi_join()",
    "text": "semi_join()\nHow many rows will this semi_join return? How many columns?\n\nsemi_join(x, y, by = \"spp_code\")\n\n# A tibble: 2 × 2\n  spp_code common_name\n  &lt;chr&gt;    &lt;chr&gt;      \n1 ABBA     balsum fir \n2 BEPA     paper birch"
  },
  {
    "objectID": "slides/w9d1.html#semi_join-2",
    "href": "slides/w9d1.html#semi_join-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "semi_join()",
    "text": "semi_join()\nWhat about this semi_join? Will it be the same as semi_join(x, y)?\n\nsemi_join(y, x, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#semi_join-3",
    "href": "slides/w9d1.html#semi_join-3",
    "title": "Combining multiple tibbles with dplyr",
    "section": "semi_join()",
    "text": "semi_join()\nWhat about this semi_join? Will it be the same as semi_join(x, y)?\n\nsemi_join(y, x, by = \"spp_code\")\n\n# A tibble: 2 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera"
  },
  {
    "objectID": "slides/w9d1.html#anti_join",
    "href": "slides/w9d1.html#anti_join",
    "title": "Combining multiple tibbles with dplyr",
    "section": "anti_join()",
    "text": "anti_join()\nLet’s see what anti_join does:\n\nanti_join(x, y, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#anti_join-1",
    "href": "slides/w9d1.html#anti_join-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "anti_join()",
    "text": "anti_join()\nLet’s see what anti_join does:\n\nanti_join(x, y, by = \"spp_code\")\n\n# A tibble: 1 × 2\n  spp_code common_name\n  &lt;chr&gt;    &lt;chr&gt;      \n1 PIST     white pine \n\n\nWhy do we get this output?"
  },
  {
    "objectID": "slides/w9d1.html#anti_join-2",
    "href": "slides/w9d1.html#anti_join-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "anti_join()",
    "text": "anti_join()\nWhat happens if we switch the order of x and y?\n\nanti_join(y, x, by = \"spp_code\")"
  },
  {
    "objectID": "slides/w9d1.html#anti_join-3",
    "href": "slides/w9d1.html#anti_join-3",
    "title": "Combining multiple tibbles with dplyr",
    "section": "anti_join()",
    "text": "anti_join()\nWhat happens if we switch the order of x and y?\n\nanti_join(y, x, by = \"spp_code\")\n\n# A tibble: 1 × 2\n  spp_code latin_name    \n  &lt;chr&gt;    &lt;chr&gt;         \n1 LALA     Larix laricina"
  },
  {
    "objectID": "slides/w9d1.html#an-important-subtlety-column-names",
    "href": "slides/w9d1.html#an-important-subtlety-column-names",
    "title": "Combining multiple tibbles with dplyr",
    "section": "An Important Subtlety: Column Names",
    "text": "An Important Subtlety: Column Names\nSo far, we have joined x and y by the spp_code column.\nBut what if y had the same column named differently:\n\ny &lt;- y %&gt;%\n  rename(species_code = spp_code)\ny\n\n# A tibble: 3 × 2\n  species_code latin_name       \n  &lt;chr&gt;        &lt;chr&gt;            \n1 ABBA         Abies balsamea   \n2 BEPA         Betula papyrifera\n3 LALA         Larix laricina"
  },
  {
    "objectID": "slides/w9d1.html#how-do-we-join-x-and-y",
    "href": "slides/w9d1.html#how-do-we-join-x-and-y",
    "title": "Combining multiple tibbles with dplyr",
    "section": "How Do We Join x and y?",
    "text": "How Do We Join x and y?\n\nleft_join(x, y)\n\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n\n\nLooks like we need to specify by (our 🔑)"
  },
  {
    "objectID": "slides/w9d1.html#how-do-we-join-x-and-y-1",
    "href": "slides/w9d1.html#how-do-we-join-x-and-y-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "How Do We Join x and y?",
    "text": "How Do We Join x and y?\n\nleft_join(x, y)\n\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n\n\nLooks like we need to specify by (our 🔑)\n\nleft_join(x, y, by = \"spp_code\")\n\nError in `left_join()`:\n! Join columns in `y` must be present in the data.\n✖ Problem with `spp_code`.\n\n\nStill not working!"
  },
  {
    "objectID": "slides/w9d1.html#how-do-we-join-x-and-y-2",
    "href": "slides/w9d1.html#how-do-we-join-x-and-y-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "How Do We Join x and y?",
    "text": "How Do We Join x and y?\n\nleft_join(x, y)\n\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n\n\nLooks like we need to specify by (our 🔑)\n\nleft_join(x, y, by = \"spp_code\")\n\nError in `left_join()`:\n! Join columns in `y` must be present in the data.\n✖ Problem with `spp_code`.\n\n\nStill not working!\n\nleft_join(x, y, by = c(\"spp_code\" = \"species_code\"))\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;"
  },
  {
    "objectID": "slides/w9d1.html#today-applying-allometric-equations-using-joins",
    "href": "slides/w9d1.html#today-applying-allometric-equations-using-joins",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Today: Applying Allometric Equations Using Joins",
    "text": "Today: Applying Allometric Equations Using Joins\nAllometric equations are regression equations that relate measurements like species, DBH, and perhaps height to more difficult and expensive to measure quantities such as stem volume or biomass."
  },
  {
    "objectID": "slides/w9d1.html#today-applying-allometric-equations-using-joins-1",
    "href": "slides/w9d1.html#today-applying-allometric-equations-using-joins-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Today: Applying Allometric Equations Using Joins",
    "text": "Today: Applying Allometric Equations Using Joins\nAllometric equations are regression equations that relate measurements like species, DBH, and perhaps height to more difficult and expensive to measure quantities such as stem volume or biomass.\n\nAllometric equations take the inexpensive measurements as input (e.g., species and DBH) and return estimates of the expensive quantity (e.g., height, volume, biomass)"
  },
  {
    "objectID": "slides/w9d1.html#today-applying-allometric-equations-using-joins-2",
    "href": "slides/w9d1.html#today-applying-allometric-equations-using-joins-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Today: Applying Allometric Equations Using Joins",
    "text": "Today: Applying Allometric Equations Using Joins\nAllometric equations are regression equations that relate measurements like species, DBH, and perhaps height to more difficult and expensive to measure quantities such as stem volume or biomass.\n\nAllometric equations take the inexpensive measurements as input (e.g., species and DBH) and return estimates of the expensive quantity (e.g., height, volume, biomass)\nToday, we’ll focus on calculating tree height based on DBH and species."
  },
  {
    "objectID": "slides/w9d1.html#the-model",
    "href": "slides/w9d1.html#the-model",
    "title": "Combining multiple tibbles with dplyr",
    "section": "The Model",
    "text": "The Model\nThe model we’ll use to calculate height is as follows \\[\n\\text{height} = 4.5 + \\exp\\left( \\beta_1 + \\frac{\\beta_2}{\\text{DBH} + 1.0} \\right)\n\\] where \\(\\beta_1\\), \\(\\beta_2\\) are stored in “datasets/FVS_NE_coefficients.csv” and are different for each forest vegetation code.\nWe’ll access data from a few tibbles in order to create our final height calculation."
  },
  {
    "objectID": "slides/w9d1.html#the-data-stands",
    "href": "slides/w9d1.html#the-data-stands",
    "title": "Combining multiple tibbles with dplyr",
    "section": "The Data: stands",
    "text": "The Data: stands\n\nlibrary(tidyverse)\nstands &lt;- read_csv(\"../labs/datasets/two_stands_wo_ht_vol.csv\")\nhead(stands)\n\n# A tibble: 6 × 4\n  stand_id plot_id scientific_name   DBH_in\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n1        1       1 Abies balsamea      11.3\n2        1       1 Pinus strobus        9.8\n3        1       1 Pinus strobus       10.7\n4        1       3 Betula papyrifera   15.4\n5        1       3 Pinus strobus       13.1\n6        2       1 Larix laricina       7.1\n\ndim(stands)\n\n[1] 15  4"
  },
  {
    "objectID": "slides/w9d1.html#the-data-stands-1",
    "href": "slides/w9d1.html#the-data-stands-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "The Data: stands",
    "text": "The Data: stands\n\nlibrary(tidyverse)\nstands &lt;- read_csv(\"../labs/datasets/two_stands_wo_ht_vol.csv\")\nhead(stands)\n\n# A tibble: 6 × 4\n  stand_id plot_id scientific_name   DBH_in\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n1        1       1 Abies balsamea      11.3\n2        1       1 Pinus strobus        9.8\n3        1       1 Pinus strobus       10.7\n4        1       3 Betula papyrifera   15.4\n5        1       3 Pinus strobus       13.1\n6        2       1 Larix laricina       7.1\n\ndim(stands)\n\n[1] 15  4\n\n\nBig Picture: We’d like to calculate tree height for each row of this tibble. To do so, we’ll need to load another tibble."
  },
  {
    "objectID": "slides/w9d1.html#the-data-fvs-coefficients-our-betas",
    "href": "slides/w9d1.html#the-data-fvs-coefficients-our-betas",
    "title": "Combining multiple tibbles with dplyr",
    "section": "The Data: FVS Coefficients (our \\(\\beta\\)’s)",
    "text": "The Data: FVS Coefficients (our \\(\\beta\\)’s)\n\nht_coeffs &lt;- read_csv(\"../labs/datasets/FVS_NE_coefficients.csv\")\nht_coeffs\n\n# A tibble: 108 × 3\n   USFS_FVS_code beta_1 beta_2\n   &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n 1 BF              4.51  -6.01\n 2 TA              4.51  -6.01\n 3 WS              4.51  -6.01\n 4 RS              4.51  -6.01\n 5 NS              4.51  -6.01\n 6 BS              4.51  -6.01\n 7 PI              4.51  -6.01\n 8 RN              4.51  -6.01\n 9 WP              4.61  -6.19\n10 LP              4.69  -6.88\n# ℹ 98 more rows"
  },
  {
    "objectID": "slides/w9d1.html#q-how-can-we-join-these-tibbles",
    "href": "slides/w9d1.html#q-how-can-we-join-these-tibbles",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: How can we join these tibbles?",
    "text": "Q: How can we join these tibbles?\n\nhead(stands)\n\n# A tibble: 6 × 4\n  stand_id plot_id scientific_name   DBH_in\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n1        1       1 Abies balsamea      11.3\n2        1       1 Pinus strobus        9.8\n3        1       1 Pinus strobus       10.7\n4        1       3 Betula papyrifera   15.4\n5        1       3 Pinus strobus       13.1\n6        2       1 Larix laricina       7.1\n\nhead(ht_coeffs)\n\n# A tibble: 6 × 3\n  USFS_FVS_code beta_1 beta_2\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1 BF              4.51  -6.01\n2 TA              4.51  -6.01\n3 WS              4.51  -6.01\n4 RS              4.51  -6.01\n5 NS              4.51  -6.01\n6 BS              4.51  -6.01"
  },
  {
    "objectID": "slides/w9d1.html#a-we-need-another-tibble",
    "href": "slides/w9d1.html#a-we-need-another-tibble",
    "title": "Combining multiple tibbles with dplyr",
    "section": "A: We need another tibble!",
    "text": "A: We need another tibble!"
  },
  {
    "objectID": "slides/w9d1.html#a-we-need-another-tibble-1",
    "href": "slides/w9d1.html#a-we-need-another-tibble-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "A: We need another tibble!",
    "text": "A: We need another tibble!\nThe “spp_codes” tibble contains the columns needed to be able to link “stands” and “ht_coeffs”.\n\nspp_codes &lt;- read_csv(\"../labs/datasets/USFS_species_codes.csv\")\nhead(spp_codes)\n\n# A tibble: 6 × 5\n  common_name   scientific_name USFS_FVS_code USFS_FIA_code PLANTS_code\n  &lt;chr&gt;         &lt;chr&gt;           &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;      \n1 balsam fir    Abies balsamea  BF                       12 ABBA       \n2 tamarack      Larix laricina  TA                       71 LALA       \n3 white spruce  Picea glauca    WS                       94 PIGL       \n4 red spruce    Picea rubens    RS                       97 PIRU       \n5 Norway spruce Picea abies     NS                       91 PIAB       \n6 black spruce  Picea mariana   BS                       95 PIMA"
  },
  {
    "objectID": "slides/w9d1.html#now-we-can-join-our-data",
    "href": "slides/w9d1.html#now-we-can-join-our-data",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Now We Can Join Our Data",
    "text": "Now We Can Join Our Data\n\nhead(stands, n = 3)\n\n# A tibble: 3 × 4\n  stand_id plot_id scientific_name DBH_in\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1        1       1 Abies balsamea    11.3\n2        1       1 Pinus strobus      9.8\n3        1       1 Pinus strobus     10.7\n\nstands &lt;- stands %&gt;%\n  left_join(spp_codes, by = \"scientific_name\") %&gt;%\n  select(-common_name, -USFS_FIA_code, -PLANTS_code) # remove unecessary columns\nhead(stands, n = 3)\n\n# A tibble: 3 × 5\n  stand_id plot_id scientific_name DBH_in USFS_FVS_code\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;        \n1        1       1 Abies balsamea    11.3 BF           \n2        1       1 Pinus strobus      9.8 WP           \n3        1       1 Pinus strobus     10.7 WP           \n\n\n\nNow, “stands” contains the USFS_FVS_code column"
  },
  {
    "objectID": "slides/w9d1.html#q-why-did-we-use-a-left_join-in-the-last-slide",
    "href": "slides/w9d1.html#q-why-did-we-use-a-left_join-in-the-last-slide",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: Why did we use a left_join() in the last slide?",
    "text": "Q: Why did we use a left_join() in the last slide?"
  },
  {
    "objectID": "slides/w9d1.html#q-why-did-we-use-a-left_join-in-the-last-slide-1",
    "href": "slides/w9d1.html#q-why-did-we-use-a-left_join-in-the-last-slide-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: Why did we use a left_join() in the last slide?",
    "text": "Q: Why did we use a left_join() in the last slide?\nA: We want to retain all the rows of “stands”, but only the rows in “spp_codes” that match in “stands”."
  },
  {
    "objectID": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match",
    "href": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: How can we check if all rows had a scientific_name match?",
    "text": "Q: How can we check if all rows had a scientific_name match?"
  },
  {
    "objectID": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match-1",
    "href": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: How can we check if all rows had a scientific_name match?",
    "text": "Q: How can we check if all rows had a scientific_name match?\nA: Use anti_join()!"
  },
  {
    "objectID": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match-2",
    "href": "slides/w9d1.html#q-how-can-we-check-if-all-rows-had-a-scientific_name-match-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Q: How can we check if all rows had a scientific_name match?",
    "text": "Q: How can we check if all rows had a scientific_name match?\nA: Use anti_join()!\n\nanti_join(stands, spp_codes, by = \"scientific_name\")\n\n# A tibble: 0 × 5\n# ℹ 5 variables: stand_id &lt;dbl&gt;, plot_id &lt;dbl&gt;, scientific_name &lt;chr&gt;,\n#   DBH_in &lt;dbl&gt;, USFS_FVS_code &lt;chr&gt;"
  },
  {
    "objectID": "slides/w9d1.html#join-betas-to-stands",
    "href": "slides/w9d1.html#join-betas-to-stands",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Join \\(\\beta\\)’s to “stands”",
    "text": "Join \\(\\beta\\)’s to “stands”"
  },
  {
    "objectID": "slides/w9d1.html#join-betas-to-stands-1",
    "href": "slides/w9d1.html#join-betas-to-stands-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Join \\(\\beta\\)’s to “stands”",
    "text": "Join \\(\\beta\\)’s to “stands”\nQ: What type of join should we use?"
  },
  {
    "objectID": "slides/w9d1.html#join-betas-to-stands-2",
    "href": "slides/w9d1.html#join-betas-to-stands-2",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Join \\(\\beta\\)’s to “stands”",
    "text": "Join \\(\\beta\\)’s to “stands”\nQ: What type of join should we use?\nA: A left_join() (or a right_join(), if you’d like)\n\nstands &lt;- left_join(stands, ht_coeffs, by = \"USFS_FVS_code\")\n\n# or alternatively\n# stands &lt;- right_join(ht_coeffs, stands, by = \"USFS_FVS_code\")\n\nhead(stands)\n\n# A tibble: 6 × 7\n  stand_id plot_id scientific_name   DBH_in USFS_FVS_code beta_1 beta_2\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1        1       1 Abies balsamea      11.3 BF              4.51  -6.01\n2        1       1 Pinus strobus        9.8 WP              4.61  -6.19\n3        1       1 Pinus strobus       10.7 WP              4.61  -6.19\n4        1       3 Betula papyrifera   15.4 PB              4.44  -4.09\n5        1       3 Pinus strobus       13.1 WP              4.61  -6.19\n6        2       1 Larix laricina       7.1 TA              4.51  -6.01"
  },
  {
    "objectID": "slides/w9d1.html#now-we-can-make-our-calculation",
    "href": "slides/w9d1.html#now-we-can-make-our-calculation",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Now We Can Make Our Calculation!",
    "text": "Now We Can Make Our Calculation!\nRecall the equation for height: \\[\n\\text{height} = 4.5 + \\exp\\left( \\beta_1 + \\frac{\\beta_2}{\\text{DBH} + 1.0} \\right)\n\\]"
  },
  {
    "objectID": "slides/w9d1.html#now-we-can-make-our-calculation-1",
    "href": "slides/w9d1.html#now-we-can-make-our-calculation-1",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Now We Can Make Our Calculation!",
    "text": "Now We Can Make Our Calculation!\nRecall the equation for height: \\[\n\\text{height} = 4.5 + \\exp\\left( \\beta_1 + \\frac{\\beta_2}{\\text{DBH} + 1.0} \\right)\n\\]\n\nstands &lt;- stands %&gt;%\n  mutate(height_ft = 4.5 + exp( beta_1 + beta_2 / (DBH_in + 1) ) ) %&gt;%\n  select(-beta_1, -beta_2) # Don't need these anymore\nhead(stands)\n\n# A tibble: 6 × 6\n  stand_id plot_id scientific_name   DBH_in USFS_FVS_code height_ft\n     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1        1       1 Abies balsamea      11.3 BF                 60.2\n2        1       1 Pinus strobus        9.8 WP                 61.1\n3        1       1 Pinus strobus       10.7 WP                 63.6\n4        1       3 Betula papyrifera   15.4 PB                 70.5\n5        1       3 Pinus strobus       13.1 WP                 69.2\n6        2       1 Larix laricina       7.1 TA                 47.7"
  },
  {
    "objectID": "slides/w9d1.html#next-time",
    "href": "slides/w9d1.html#next-time",
    "title": "Combining multiple tibbles with dplyr",
    "section": "Next time",
    "text": "Next time\n\nReshaping data with tidyr"
  },
  {
    "objectID": "labs/lab_08_web.html",
    "href": "labs/lab_08_web.html",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "",
    "text": "Welcome to Lab 8! Today, we’ll focus on writing extensive dplyr code on larger data. We will both use the verbs individually and “write a sentence” with the verbs by stringing them together with pipes.\n\n\n\nUse dplyr verbs together with pipes on larger datasets.\n\n\n\n\nUpload your rendered PDF (lab_08.pdf) and Quarto (lab_08.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_08_web.html#welcome",
    "href": "labs/lab_08_web.html#welcome",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "",
    "text": "Welcome to Lab 8! Today, we’ll focus on writing extensive dplyr code on larger data. We will both use the verbs individually and “write a sentence” with the verbs by stringing them together with pipes.\n\n\n\nUse dplyr verbs together with pipes on larger datasets.\n\n\n\n\nUpload your rendered PDF (lab_08.pdf) and Quarto (lab_08.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_08_web.html#data-pdxtrees",
    "href": "labs/lab_08_web.html#data-pdxtrees",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Data: pdxTrees",
    "text": "Data: pdxTrees\nThe pdxTrees R package contains measurements of every tree in the Portland, Oregon metro area. In particular, it contains two datasets, which we will call parks and streets. The parks dataset contains all of the trees in 174 parks in Portland. The streets dataset contains all the trees on the streets of Portland. The hex sticker for pdxTrees (as seen below) contains a fun easter egg from the city of Portland, as its graphics are done in a similar fashion to the famous airport carpet."
  },
  {
    "objectID": "labs/lab_08_web.html#methods-dplyr",
    "href": "labs/lab_08_web.html#methods-dplyr",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Methods: dplyr",
    "text": "Methods: dplyr\nUse dplyr function that we’ve learned over the past few weeks to answer the questions in this lab."
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-0",
    "href": "labs/lab_08_web.html#exercise-0",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 0",
    "text": "Exercise 0\nLoad any packages you’ll need for this lab below. Note, you’ll need to install pdxTrees with install.packages(\"pdxTrees\") before you can load it with library(pdxTrees)."
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-1",
    "href": "labs/lab_08_web.html#exercise-1",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nPart (a)\nLoad the data. For this lab, we will load both the parks and streets datasets. To do so, run the get_pdxTrees_parks() and get_pdxTrees_streets() functions (note, you don’t need to specify any arguments for these functions) and assign them to parks and streets, respectively.\nYour datasets should look like this when you print parks and streets as follows:\n\nparks\n\n# A tibble: 25,534 × 34\n   Longitude Latitude UserID Genus      Family   DBH Inventory_Date      Species\n       &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;  \n 1     -123.     45.6 1      Pseudotsu… Pinac…  37.4 2017-05-09 00:00:00 PSME   \n 2     -123.     45.6 2      Pseudotsu… Pinac…  32.5 2017-05-09 00:00:00 PSME   \n 3     -123.     45.6 3      Crataegus  Rosac…   9.7 2017-05-09 00:00:00 CRLA   \n 4     -123.     45.6 4      Quercus    Fagac…  10.3 2017-05-09 00:00:00 QURU   \n 5     -123.     45.6 5      Pseudotsu… Pinac…  33.2 2017-05-09 00:00:00 PSME   \n 6     -123.     45.6 6      Pseudotsu… Pinac…  32.1 2017-05-09 00:00:00 PSME   \n 7     -123.     45.6 7      Pseudotsu… Pinac…  28.4 2017-05-09 00:00:00 PSME   \n 8     -123.     45.6 8      Pseudotsu… Pinac…  27.2 2017-05-09 00:00:00 PSME   \n 9     -123.     45.6 9      Pseudotsu… Pinac…  35.2 2017-05-09 00:00:00 PSME   \n10     -123.     45.6 10     Pseudotsu… Pinac…  32.4 2017-05-09 00:00:00 PSME   \n# ℹ 25,524 more rows\n# ℹ 26 more variables: Common_Name &lt;chr&gt;, Condition &lt;chr&gt;, Tree_Height &lt;dbl&gt;,\n#   Crown_Width_NS &lt;dbl&gt;, Crown_Width_EW &lt;dbl&gt;, Crown_Base_Height &lt;dbl&gt;,\n#   Collected_By &lt;chr&gt;, Park &lt;chr&gt;, Scientific_Name &lt;chr&gt;,\n#   Functional_Type &lt;chr&gt;, Mature_Size &lt;fct&gt;, Native &lt;chr&gt;, Edible &lt;chr&gt;,\n#   Nuisance &lt;chr&gt;, Structural_Value &lt;dbl&gt;, Carbon_Storage_lb &lt;dbl&gt;,\n#   Carbon_Storage_value &lt;dbl&gt;, Carbon_Sequestration_lb &lt;dbl&gt;, …\n\nstreets\n\n# A tibble: 218,602 × 23\n   UserID Inventory_Date      Species   DBH Condition Site_Type Site_Width Wires\n   &lt;chr&gt;  &lt;dttm&gt;              &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n 1 1      2010-08-21 00:00:00 PRPL     6.10 Good      &lt;NA&gt;               9 High…\n 2 2      2010-08-21 00:00:00 ACMA    36.3  Poor      &lt;NA&gt;               9 High…\n 3 3      2010-08-21 00:00:00 PLAC    20.5  Fair      &lt;NA&gt;               9 No HV\n 4 4      2010-08-21 00:00:00 CO       8.20 Fair      &lt;NA&gt;               9 No HV\n 5 5      2010-08-21 00:00:00 ACMA    55.7  Good      &lt;NA&gt;               9 No HV\n 6 6      2010-08-21 00:00:00 ACPL    18.6  Good      &lt;NA&gt;               9 No HV\n 7 7      2010-08-21 00:00:00 ACPL    18.8  Good      &lt;NA&gt;               9 No HV\n 8 8      2010-08-21 00:00:00 ACPL    16    Good      &lt;NA&gt;               9 No HV\n 9 9      2010-08-21 00:00:00 QU       6.20 Good      &lt;NA&gt;               9 No HV\n10 10     2010-08-21 00:00:00 ACPL    19.3  Fair      &lt;NA&gt;               9 No HV\n# ℹ 218,592 more rows\n# ℹ 15 more variables: Site_Development &lt;chr&gt;, Site_Size &lt;chr&gt;, Notes &lt;chr&gt;,\n#   Address &lt;chr&gt;, Neighborhood &lt;chr&gt;, Collected_By &lt;chr&gt;, Scientific &lt;chr&gt;,\n#   Family &lt;chr&gt;, Genus &lt;chr&gt;, Common_Name &lt;chr&gt;, Functional_Type &lt;chr&gt;,\n#   Edible &lt;chr&gt;, Longitude &lt;dbl&gt;, Latitude &lt;dbl&gt;, Mature_Size &lt;fct&gt;\n\n\n\n\nPart (b)\nTake a look at the documentation by running ?get_pdxTrees_parks and ?get_pdxTrees_streets in your console, and tell me about two columns (what are their names? what do they measure? units? factor levels? etc.) from each of the datasets (four total)."
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-2",
    "href": "labs/lab_08_web.html#exercise-2",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 2",
    "text": "Exercise 2\nFind how many trees of each species (use the common name column for species here and throughout the lab) are in the parks dataset, and order the data from greatest number of trees in a species to least. Notice I’ve called the number of trees num_trees.\n\n\n# A tibble: 304 × 2\n   Common_Name               num_trees\n   &lt;chr&gt;                         &lt;int&gt;\n 1 Douglas-Fir                    6783\n 2 Norway Maple                   1502\n 3 Western Redcedar                964\n 4 Northern Red Oak                736\n 5 Pin Oak                         619\n 6 Incense Cedar                   507\n 7 Bigleaf Maple                   490\n 8 Japanese Flowering Cherry       418\n 9 American Elm                    379\n10 Giant Sequoia                   349\n# ℹ 294 more rows"
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-3",
    "href": "labs/lab_08_web.html#exercise-3",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 3",
    "text": "Exercise 3\nA staple of Portland living in the springtime is to go out and see the Japanese Flowering Cherry trees beginning to bloom. Find the park with the most Japanese Flowering Cherry trees, and how many there are in that park.\n\n\n# A tibble: 1 × 2\n  Park                           num_cherries\n  &lt;chr&gt;                                 &lt;int&gt;\n1 Gov Tom McCall Waterfront Park          104"
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-4",
    "href": "labs/lab_08_web.html#exercise-4",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 4",
    "text": "Exercise 4\n\nPart (a)\nFind the top 5 parks with the most total DBH (i.e. the sum of all the trees DBH in those parks).\n\n\n# A tibble: 5 × 2\n  Park             total_DBH\n  &lt;chr&gt;                &lt;dbl&gt;\n1 Mt Tabor Park       31965.\n2 Columbia Park       26952.\n3 Laurelhurst Park    26890.\n4 Washington Park     16081.\n5 John Luby Park      14519.\n\n\nMt. Tabor Park is one of my personal favorites in Portland, I used to live just a few blocks away. It is a wonderful place to watch the sun set over the West hills of the city. Not only does it have the most DBH in all of the parks in Portland, but Portland’s drinking water is stored in giant reservoirs at that park!\n\n\nPart (b)\nFind the top 5 parks with the highest DBH per tree (in other words, the 5 highest mean DBHs), along with how many trees are in those parks.\n\n\n# A tibble: 5 × 3\n  Park               mean_DBH number_of_trees\n  &lt;chr&gt;                 &lt;dbl&gt;           &lt;int&gt;\n1 Heritage Tree Park     59                 1\n2 Johnswood Property     43.1              18\n3 Patton Square Park     37.0              13\n4 Hancock Park           32.5             104\n5 Laurelwood Park        31.2              13\n\n\nWow! Heritage Tree Park has one giant tree!"
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-5",
    "href": "labs/lab_08_web.html#exercise-5",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 5",
    "text": "Exercise 5\nThere is a column in the parks dataset that represents the amount of carbon (in lbs) each tree has sequestered. Find the park with the highest carbon sequestration.\n\n\n# A tibble: 1 × 2\n  Park          carbon_sequestered\n  &lt;chr&gt;                      &lt;dbl&gt;\n1 Mt Tabor Park             36515.\n\n\nNice job, Mt. Tabor!"
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-6",
    "href": "labs/lab_08_web.html#exercise-6",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 6",
    "text": "Exercise 6\nThe parks dataset has a wide variety of numeric columns measuring things from DBH to pollution removal value of a given tree. Take the mean of all of these numeric columns, grouped by park. Make sure to remove NAs in the mean() function.\nHINT: In across() you can set .cols = where(is.numeric) to apply a function across all numeric columns.\n\n\n# A tibble: 174 × 18\n   Park       Longitude Latitude   DBH Tree_Height Crown_Width_NS Crown_Width_EW\n   &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 Albert Ke…     -123.     45.5  20.5        83.7           32.3           31.8\n 2 Alberta P…     -123.     45.6  28.4        96.6           45.5           43.4\n 3 Ankeny Pl…     -123.     45.5  30.8        69             62             62.2\n 4 April Hil…     -123.     45.5  18.9        47.9           34.0           33  \n 5 Arbor Lod…     -123.     45.6  19.2        49.4           39.8           39.7\n 6 Argay Park     -123.     45.6  19.6        46.2           35.3           35.3\n 7 Berkeley …     -123.     45.5  26.7        72.9           44.9           47.7\n 8 Berrydale…     -123.     45.5  23.6        69.8           41.3           39.3\n 9 Bloomingt…     -123.     45.5  24.1        62.6           47.9           48.2\n10 Brentwood…     -123.     45.5  17.4        40.8           29.7           30.8\n# ℹ 164 more rows\n# ℹ 11 more variables: Crown_Base_Height &lt;dbl&gt;, Structural_Value &lt;dbl&gt;,\n#   Carbon_Storage_lb &lt;dbl&gt;, Carbon_Storage_value &lt;dbl&gt;,\n#   Carbon_Sequestration_lb &lt;dbl&gt;, Carbon_Sequestration_value &lt;dbl&gt;,\n#   Stormwater_ft &lt;dbl&gt;, Stormwater_value &lt;dbl&gt;, Pollution_Removal_value &lt;dbl&gt;,\n#   Pollution_Removal_oz &lt;dbl&gt;, Total_Annual_Services &lt;dbl&gt;"
  },
  {
    "objectID": "labs/lab_08_web.html#exercise-7",
    "href": "labs/lab_08_web.html#exercise-7",
    "title": "Advanced Data Wrangling with dplyr",
    "section": "Exercise 7",
    "text": "Exercise 7\nFor this exercise, consider the streets dataset.\n\nPart (a)\nThere is a column delineating the edibility of the trees in the dataset. Find the possible values for this column and how many trees correspond to each value.\n\n\n# A tibble: 3 × 2\n  Edible n_rows\n  &lt;chr&gt;   &lt;int&gt;\n1 fruit    3649\n2 no     211954\n3 nut      2999\n\n\n\n\nPart (b)\nCreate a new tibble called forager that contains all rows of the streets with edible fruits or nuts but only the columns denoting the common name, neighborhood, condition, and edibility.\n\nforager\n\n# A tibble: 6,648 × 4\n   Common_Name Neighborhood Condition Edible\n   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt; \n 1 Persimmon   Concordia    Good      fruit \n 2 Walnut      Concordia    Fair      nut   \n 3 Walnut      Concordia    Fair      nut   \n 4 Walnut      Concordia    Fair      nut   \n 5 Walnut      Concordia    Good      nut   \n 6 Walnut      Concordia    Fair      nut   \n 7 Walnut      Concordia    Fair      nut   \n 8 Walnut      Concordia    Poor      nut   \n 9 Walnut      Concordia    Fair      nut   \n10 Fig         Concordia    Poor      fruit \n# ℹ 6,638 more rows\n\n\n\n\nPart (c)\nCreate a new logical column and save it in the forager dataset. Name it fruit_edible. The values in this columns should be TRUE or FALSE depending on if the given tree has edible fruits or not\n\nforager\n\n# A tibble: 6,648 × 5\n   Common_Name Neighborhood Condition Edible fruit_edible\n   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;  &lt;lgl&gt;       \n 1 Persimmon   Concordia    Good      fruit  TRUE        \n 2 Walnut      Concordia    Fair      nut    FALSE       \n 3 Walnut      Concordia    Fair      nut    FALSE       \n 4 Walnut      Concordia    Fair      nut    FALSE       \n 5 Walnut      Concordia    Good      nut    FALSE       \n 6 Walnut      Concordia    Fair      nut    FALSE       \n 7 Walnut      Concordia    Fair      nut    FALSE       \n 8 Walnut      Concordia    Poor      nut    FALSE       \n 9 Walnut      Concordia    Fair      nut    FALSE       \n10 Fig         Concordia    Poor      fruit  TRUE        \n# ℹ 6,638 more rows\n\n\n\n\nPart (d)\nArrange the forager dataset by the column you just created in (c), so that the TRUE values are at the top, and save this change to the forager dataset.\n\nforager\n\n# A tibble: 6,648 × 5\n   Common_Name Neighborhood Condition Edible fruit_edible\n   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;  &lt;lgl&gt;       \n 1 Persimmon   Concordia    Good      fruit  TRUE        \n 2 Fig         Concordia    Poor      fruit  TRUE        \n 3 Fig         Concordia    Good      fruit  TRUE        \n 4 Fig         Concordia    Fair      fruit  TRUE        \n 5 Fig         Concordia    Poor      fruit  TRUE        \n 6 Fig         Concordia    Good      fruit  TRUE        \n 7 Fig         Concordia    Fair      fruit  TRUE        \n 8 Persimmon   Concordia    Good      fruit  TRUE        \n 9 Persimmon   Concordia    Fair      fruit  TRUE        \n10 Persimmon   Concordia    Fair      fruit  TRUE        \n# ℹ 6,638 more rows\n\n\n\n\nPart (e)\nThe Edible column in named in a bit of a funny way. Rename the column to Edible_Component and save this change to the forager dataset.\n\nforager\n\n# A tibble: 6,648 × 5\n   Common_Name Neighborhood Condition Edible_Component fruit_edible\n   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;            &lt;lgl&gt;       \n 1 Persimmon   Concordia    Good      fruit            TRUE        \n 2 Fig         Concordia    Poor      fruit            TRUE        \n 3 Fig         Concordia    Good      fruit            TRUE        \n 4 Fig         Concordia    Fair      fruit            TRUE        \n 5 Fig         Concordia    Poor      fruit            TRUE        \n 6 Fig         Concordia    Good      fruit            TRUE        \n 7 Fig         Concordia    Fair      fruit            TRUE        \n 8 Persimmon   Concordia    Good      fruit            TRUE        \n 9 Persimmon   Concordia    Fair      fruit            TRUE        \n10 Persimmon   Concordia    Fair      fruit            TRUE        \n# ℹ 6,638 more rows\n\n\n\n\nPart (f)\nWhich five neighborhoods would a fruit loving forager most like to live (in other words, what are the five neighborhoods with the most trees with edible fruit)?\nHINT: using the sum() function on logical data will make all the TRUEs 1s and all the FALSEs 0s.\n\n\n# A tibble: 5 × 2\n  Neighborhood      n_edible_fruit_trees\n  &lt;chr&gt;                            &lt;int&gt;\n1 Montavilla                         166\n2 Sellwood-Moreland                  154\n3 Richmond                           148\n4 Rose City Park                     127\n5 Woodstock                          125\n\n\nThe Sellwood-Moreland and Woodstock neighborhoods are the heart of southeast Portland (in my opinion). The pdxTrees R package was written primarily in the Woodstock neighborhood, as a matter of fact. Sellwood-Moreland sits just to the west of Woodstock and has a variety of top-tier coffee shops, along with a gorgeous riverfront park with off-leash dogs allowed. Quite the place to be if you are a fruit forager, too!\n\n\nPart (g)\nOf the five neighborhoods found in part (e), what are the conditions of the edible fruit bearing trees (in other words, how many are in Good condition, Fair condition, etc., grouped by these five neighborhoods).\nHINT: you can use group_by() to group by multiple groups at once. Example: group_by(column1, column2).\n\n\n`summarise()` has grouped output by 'Neighborhood'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 15 × 3\n# Groups:   Neighborhood [5]\n   Neighborhood      Condition num_fruit_trees\n   &lt;chr&gt;             &lt;chr&gt;               &lt;int&gt;\n 1 Montavilla        Fair                   92\n 2 Montavilla        Good                   63\n 3 Montavilla        Poor                   11\n 4 Richmond          Fair                   36\n 5 Richmond          Good                  104\n 6 Richmond          Poor                    8\n 7 Rose City Park    Fair                   71\n 8 Rose City Park    Good                   54\n 9 Rose City Park    Poor                    2\n10 Sellwood-Moreland Fair                   56\n11 Sellwood-Moreland Good                   89\n12 Sellwood-Moreland Poor                    9\n13 Woodstock         Fair                   39\n14 Woodstock         Good                   77\n15 Woodstock         Poor                    9"
  },
  {
    "objectID": "slides/w1d1.html#agenda",
    "href": "slides/w1d1.html#agenda",
    "title": "Welcome to FOR 128!",
    "section": "Agenda",
    "text": "Agenda\n\nIntroductions\nCourse goals\nCourse expectations + syllabus\nExplore course website\nPreparing for Thursday"
  },
  {
    "objectID": "slides/w1d1.html#engagement",
    "href": "slides/w1d1.html#engagement",
    "title": "Welcome to FOR 128!",
    "section": "Engagement",
    "text": "Engagement\n\n\n\nIt has become harder and harder to stay focused over the last decade given the massive rise in wearable and mobile technology.\nIf you’ll be using a laptop to take notes, please avoid distractions to yourself and classmates by silencing notifications and avoiding checking emails, news, social media, etc.\nPlease leave your phone on silent and put it somewhere where it won’t distract you."
  },
  {
    "objectID": "slides/w1d1.html#about-me",
    "href": "slides/w1d1.html#about-me",
    "title": "Welcome to FOR 128!",
    "section": "About me",
    "text": "About me\n\n\nI’m Grayson, a PhD student in Forestry.\nBefore coming to Michigan State, I worked as a Data Scientist contracting for the USDA Forest Service.\nBefore that, I majored in Mathematics & Statistics at Reed College."
  },
  {
    "objectID": "slides/w1d1.html#about-me-1",
    "href": "slides/w1d1.html#about-me-1",
    "title": "Welcome to FOR 128!",
    "section": "About me",
    "text": "About me\n\n\nI ❤️ teaching, especially about Data Science + Forestry.\nIn the past, I’ve co-directed a Forestry Data Science lab for undergraduates."
  },
  {
    "objectID": "slides/w1d1.html#about-me-2",
    "href": "slides/w1d1.html#about-me-2",
    "title": "Welcome to FOR 128!",
    "section": "About me",
    "text": "About me\n\nI ❤️ teaching, especially about Data Science + Forestry.\nIn the past, I’ve co-directed a Forestry Data Science lab for undergraduates."
  },
  {
    "objectID": "slides/w1d1.html#path-to-forestry-data-science",
    "href": "slides/w1d1.html#path-to-forestry-data-science",
    "title": "Welcome to FOR 128!",
    "section": "Path to Forestry Data Science",
    "text": "Path to Forestry Data Science\n\n\nTake this class and engage thoughtfully with the material. ✅\nTake FOR 372 (offered this spring) to gain more domain-specific statistical expertise.\nA wide variety of knowledge in statistics, computer science, and your domain field of expertise (forestry) is important.\nEngage in undergraduate research opportunities!"
  },
  {
    "objectID": "slides/w1d1.html#course-goals",
    "href": "slides/w1d1.html#course-goals",
    "title": "Welcome to FOR 128!",
    "section": "Course goals",
    "text": "Course goals\n\n\nGetting to know your computer and using it thoughtfully\n\noperating systems,\nfiles,\ndirectories,\ngood naming conventions,\nfile organization"
  },
  {
    "objectID": "slides/w1d1.html#course-goals-1",
    "href": "slides/w1d1.html#course-goals-1",
    "title": "Welcome to FOR 128!",
    "section": "Course goals",
    "text": "Course goals\n\n\nLearn how to use a variety of data science tools with forestry applications\n\nThe R programming language,\nThe RStudio IDE,\nQuarto (for reproducible reports)\n\nLearn extensive R programming skills\n\nbase R and tidyverse approaches\ndata structures\ncustom functions\ndata wrangling & reshaping\nbeautiful plots with ggplot2"
  },
  {
    "objectID": "slides/w1d1.html#syllabus-materials",
    "href": "slides/w1d1.html#syllabus-materials",
    "title": "Welcome to FOR 128!",
    "section": "Syllabus: Materials",
    "text": "Syllabus: Materials\nTextbook: IFDAR\nIntroduction to Forestry Data Analysis with R, by Andrew O. Finley and Jeffrey W. Doser. Available free, online: www.finley-lab.com/files/ifdar/\nTechnologies: R, RStudio, a laptop\nR is a free and open source programming language, and RStudio is an Integrated Development Environment (IDE) which allows for streamlined use of the R programming language. Both are free to install, and installation instructions will be provided in this course. A laptop that can run R and RStudio is required for this course."
  },
  {
    "objectID": "slides/w1d1.html#syllabus-meetings",
    "href": "slides/w1d1.html#syllabus-meetings",
    "title": "Welcome to FOR 128!",
    "section": "Syllabus: Meetings",
    "text": "Syllabus: Meetings"
  },
  {
    "objectID": "slides/w1d1.html#syllabus-assessments",
    "href": "slides/w1d1.html#syllabus-assessments",
    "title": "Welcome to FOR 128!",
    "section": "Syllabus: Assessments",
    "text": "Syllabus: Assessments\n\n\nLab reports (40%)\n\nLab reports are assigned on Thursdays during lab time, and due the following Wednesday at 5pm on D2L. We will have a lab each week (except for the week of the midterm exam).\n\nMidterm Exams (20%)\n\nThere will be two midterm exams, one on week 6 and one on week 12. Each midterm is worth 10% of the final grade.\n\nIn-class quizzes (15%)\n\nIn-class quizzes do not have a regular schedule and will occur based on the material we get through."
  },
  {
    "objectID": "slides/w1d1.html#syllabus-assessments-1",
    "href": "slides/w1d1.html#syllabus-assessments-1",
    "title": "Welcome to FOR 128!",
    "section": "Syllabus: Assessments",
    "text": "Syllabus: Assessments\n\n\nLecture tickets (10%)\n\nLecture tickets are due at the beginning of every lecture, handed in in-person, by you.\n\nFinal Project (15%)\n\nThe details of the final project will be discussed as the semester goes on."
  },
  {
    "objectID": "slides/w1d1.html#syllabus-collaboration",
    "href": "slides/w1d1.html#syllabus-collaboration",
    "title": "Welcome to FOR 128!",
    "section": "Syllabus: Collaboration",
    "text": "Syllabus: Collaboration\n\n\nWorking with classmates on labs and lecture tickets is perfectly acceptable.\nHowever, please cite your collaborator(s) at the top of your assignment.\nCollaboration on exams and quizzes is strictly prohibited.\nBut what is collaboration?"
  },
  {
    "objectID": "slides/w1d1.html#artificial-intelligence-ai",
    "href": "slides/w1d1.html#artificial-intelligence-ai",
    "title": "Welcome to FOR 128!",
    "section": "Artificial Intelligence (AI)",
    "text": "Artificial Intelligence (AI)\n\n\n\n“…a key goal of this course is for you to learn how to thoughtfully, ethically, and independently write code and extract knowledge from data”\nAI tools are being used by others to write code, but as Data Scientists, we must write code responsibly\nAt this stage of learning how to code, AI tools inhibit learning and understanding."
  },
  {
    "objectID": "slides/w1d1.html#next-time",
    "href": "slides/w1d1.html#next-time",
    "title": "Welcome to FOR 128!",
    "section": "Next time:",
    "text": "Next time:\n\nCome to class with a laptop\nComplete Lecture Ticket 1 before lecture on Thursday."
  },
  {
    "objectID": "slides/w5d2.html#annoucements",
    "href": "slides/w5d2.html#annoucements",
    "title": "Functions",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm 1 is in one week, Oct 3, during lab time.\nLab 3 grades coming soon.\nLab 4 grades by end of weekend."
  },
  {
    "objectID": "slides/w5d2.html#agenda",
    "href": "slides/w5d2.html#agenda",
    "title": "Functions",
    "section": "Agenda",
    "text": "Agenda\n\nWarm-up\nLoops\nForestry functions\nQuarto practice"
  },
  {
    "objectID": "slides/w5d2.html#warm-up-activity",
    "href": "slides/w5d2.html#warm-up-activity",
    "title": "Functions",
    "section": "Warm-up activity",
    "text": "Warm-up activity\nWrite a function that takes two vectors as arguments (inputs) and does the following:\nTakes the difference of the vectors’ means. In other words, take the mean() of each input and subtract the first input’s mean() from the second input’s mean(). Make sure to handle NA values that might exist in the vectors. Name this function diff_in_means().\nBonus: (only do if you have time) add a requirement that a and b are the same length vector.\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/w5d2.html#warm-up-activity-possible-solution",
    "href": "slides/w5d2.html#warm-up-activity-possible-solution",
    "title": "Functions",
    "section": "Warm-up activity: possible solution",
    "text": "Warm-up activity: possible solution\n\ndiff_in_means &lt;- function(a, b, na.rm = FALSE) {\n  if (na.rm) {\n    a &lt;- a[!is.na(a)]\n    b &lt;- b[!is.na[b]]\n  }\n  \n  a_mean &lt;- mean(a)\n  b_mean &lt;- mean(b)\n  \n  return(a_mean - b_mean)\n}"
  },
  {
    "objectID": "slides/w5d2.html#warm-up-activity-possible-solution-with-bonus",
    "href": "slides/w5d2.html#warm-up-activity-possible-solution-with-bonus",
    "title": "Functions",
    "section": "Warm-up activity: possible solution with bonus",
    "text": "Warm-up activity: possible solution with bonus\n\ndiff_in_means &lt;- function(a, b, na.rm = FALSE) {\n  stopifnot(\n    \"Arguments `a` and `b` must be the same length.\" = length(a) == length(b)\n  )\n  \n  if (na.rm) {\n    a &lt;- a[!is.na(a)]\n    b &lt;- b[!is.na(b)]\n  }\n  \n  a_mean &lt;- mean(a)\n  b_mean &lt;- mean(b)\n  \n  return(a_mean - b_mean)\n}"
  },
  {
    "objectID": "slides/w5d2.html#loops-1",
    "href": "slides/w5d2.html#loops-1",
    "title": "Functions",
    "section": "Loops",
    "text": "Loops\n\n\nLoops are important to R and many other programming languages.\nUnderstanding how to read, write, and utilize loops are key skills for data scientists.\nWe’ll introduce two types of loops in R: while and for loops"
  },
  {
    "objectID": "slides/w5d2.html#while-loops",
    "href": "slides/w5d2.html#while-loops",
    "title": "Functions",
    "section": "while loops",
    "text": "while loops\n\nwhile loops look as follows:\n\n\nwhile (condition is true) {\n  run this code until condition is false\n}"
  },
  {
    "objectID": "slides/w5d2.html#while-loops-1",
    "href": "slides/w5d2.html#while-loops-1",
    "title": "Functions",
    "section": "while loops",
    "text": "while loops\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "slides/w5d2.html#for-loops",
    "href": "slides/w5d2.html#for-loops",
    "title": "Functions",
    "section": "for loops",
    "text": "for loops\n\nfor loops look as follows:\n\n\nfor (variable in vector) {\n  run this code until through each element of the vector\n}"
  },
  {
    "objectID": "slides/w5d2.html#for-loops-1",
    "href": "slides/w5d2.html#for-loops-1",
    "title": "Functions",
    "section": "for loops",
    "text": "for loops\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "slides/w5d2.html#for-loops-2",
    "href": "slides/w5d2.html#for-loops-2",
    "title": "Functions",
    "section": "for loops",
    "text": "for loops\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "slides/w5d2.html#for-loop-in-a-function",
    "href": "slides/w5d2.html#for-loop-in-a-function",
    "title": "Functions",
    "section": "for loop in a function",
    "text": "for loop in a function\n\nmy_mean &lt;- function(x) {\n  total &lt;- 0\n  \n  for (i in 1:length(x)) {\n    total &lt;- total + x[i]\n  }\n  \n  average &lt;- total / length(x)\n  \n  return(average)\n}"
  },
  {
    "objectID": "slides/w5d2.html#basal-area",
    "href": "slides/w5d2.html#basal-area",
    "title": "Functions",
    "section": "Basal area",
    "text": "Basal area\n\n\n\n\nBasal area is the measurement of a tree’s cross-sectional area at breast height, and is derived from the diameter at breast height measurement.\nOftentimes, we care about the basal area in a given stand and want to report basal area on a per-unit-area basis (e.g. square feet per acre or square meters per hectare), but we only have DBH measurements."
  },
  {
    "objectID": "slides/w5d2.html#calculating-basal-area",
    "href": "slides/w5d2.html#calculating-basal-area",
    "title": "Functions",
    "section": "Calculating basal area",
    "text": "Calculating basal area\nBasal area in square feet per acre: \\[\n\\text{BA} = \\frac{\\pi}{144} \\cdot \\left( \\frac{\\text{DBH}}{2} \\right)^2 = \\frac{\\pi}{4\\cdot 144} \\cdot \\text{DBH}^2\n\\] Basal area in square meters per hectare: \\[\n\\text{BA} = \\frac{\\pi}{10000} \\cdot \\left( \\frac{\\text{DBH}}{2} \\right)^2 = \\frac{\\pi}{4\\cdot 10000} \\cdot \\text{DBH}^2\n\\] Basal area is of the form:\n\\(\\text{forester's constant} \\times \\text{DBH}^2\\)"
  },
  {
    "objectID": "slides/w5d2.html#implementation-in-r",
    "href": "slides/w5d2.html#implementation-in-r",
    "title": "Functions",
    "section": "Implementation in R",
    "text": "Implementation in R\nWhat we want: A function that\n\n\nhas sensible input checks,\ncomputes basal area in either square feet per acre or square meters per hectare, and\nis flexible enough to allow for DBH measurements to be in inches or centimeters."
  },
  {
    "objectID": "slides/w5d2.html#implementation-in-r-1",
    "href": "slides/w5d2.html#implementation-in-r-1",
    "title": "Functions",
    "section": "Implementation in R",
    "text": "Implementation in R\nHow we’ll do it:\n\n\nDefine the forester’s constant for whichever units DBH measurements are in,\nConvert inches to centimeters or vise versa to satisfy our formula for basal area,\nCompute basal area based on our formula,\nGo back and add some sensible input checks."
  },
  {
    "objectID": "slides/w5d2.html#calculating-basal-area-1",
    "href": "slides/w5d2.html#calculating-basal-area-1",
    "title": "Functions",
    "section": "Calculating basal area",
    "text": "Calculating basal area\nBasal area in square feet per acre: \\[\n\\text{BA} = \\frac{\\pi}{144} \\cdot \\left( \\frac{\\text{DBH}}{2} \\right)^2 = \\frac{\\pi}{4\\cdot 144} \\cdot \\text{DBH}^2\n\\] Basal area in square meters per hectare: \\[\n\\text{BA} = \\frac{\\pi}{10000} \\cdot \\left( \\frac{\\text{DBH}}{2} \\right)^2 = \\frac{\\pi}{4\\cdot 10000} \\cdot \\text{DBH}^2\n\\] There are 2.54 centimeters in an inch."
  },
  {
    "objectID": "slides/w5d2.html#next-time",
    "href": "slides/w5d2.html#next-time",
    "title": "Functions",
    "section": "Next time",
    "text": "Next time\n\nIntroduction to the tidyverse"
  },
  {
    "objectID": "slides/w2d1.html#agenda",
    "href": "slides/w2d1.html#agenda",
    "title": "Intro to Practical Computing",
    "section": "Agenda",
    "text": "Agenda\n\nReview\nNaming best practices\nFiles and directories"
  },
  {
    "objectID": "slides/w2d1.html#last-week",
    "href": "slides/w2d1.html#last-week",
    "title": "Intro to Practical Computing",
    "section": "Last week",
    "text": "Last week\n\nSyllabus\nLab 1\nTools for the course: R, RStudio, and Quarto"
  },
  {
    "objectID": "slides/w2d1.html#syllabus",
    "href": "slides/w2d1.html#syllabus",
    "title": "Intro to Practical Computing",
    "section": "Syllabus",
    "text": "Syllabus\n\n\nRecall lecture tickets are due in person at the beginning of lecture.\n\nCourse late policy has been added to online version.\nLet’s quickly review the late policy."
  },
  {
    "objectID": "slides/w2d1.html#lab-1",
    "href": "slides/w2d1.html#lab-1",
    "title": "Intro to Practical Computing",
    "section": "Lab 1",
    "text": "Lab 1\n\n\nIf you’re having troubles, technical or otherwise, come to office hours.\nMake sure to turn in (.pdf and .qmd) to D2L by 5pm on Wednesday (tomorrow)."
  },
  {
    "objectID": "slides/w2d1.html#data-science-tools",
    "href": "slides/w2d1.html#data-science-tools",
    "title": "Intro to Practical Computing",
    "section": "Data Science Tools",
    "text": "Data Science Tools\n\n\nR is a programming language.\nRStudio is an IDE (what we use to interact with R and our computer).\nQuarto is a markdown language, for writing reports."
  },
  {
    "objectID": "slides/w2d1.html#practical-computing-1",
    "href": "slides/w2d1.html#practical-computing-1",
    "title": "Intro to Practical Computing",
    "section": "Practical computing",
    "text": "Practical computing\n\n\nUnderstanding your computer and its file system is vital to success in this class and beyond.\nLast week, we threw you into the deep end with data science tools.\nThis week, we’ll spend a bit more time on the details to help you interact with your computer and these tools.\nToday, we’ll focus on file systems and file/folder naming."
  },
  {
    "objectID": "slides/w2d1.html#naming-files-and-folders",
    "href": "slides/w2d1.html#naming-files-and-folders",
    "title": "Intro to Practical Computing",
    "section": "Naming files and folders",
    "text": "Naming files and folders\nSome best practices are important for naming files and folders:\n\n\nUse consistent casing:\n\ndelimiter naming, e.g. lab_01.qmd or cat_pictures\ncamel case, e.g., finalProjectMaterials.qmd or catPictures\n\nName your files and folders clearly, concisely, and informatively:\n\nGood: for128_f24\nBad: my_work_for_forestry128_in_fall_2024\nReally bad: myWorkFor_forestry128_inFall_2024"
  },
  {
    "objectID": "slides/w2d1.html#file-systems-directories",
    "href": "slides/w2d1.html#file-systems-directories",
    "title": "Intro to Practical Computing",
    "section": "File systems / directories",
    "text": "File systems / directories\n\n\nEvery time you create or download a file, you are storing it somewhere in your computer’s file system.\nBut where? 🤔"
  },
  {
    "objectID": "slides/w2d1.html#file-systems-directories-1",
    "href": "slides/w2d1.html#file-systems-directories-1",
    "title": "Intro to Practical Computing",
    "section": "File systems / directories",
    "text": "File systems / directories\n\nThink of your computer’s file system as a tree"
  },
  {
    "objectID": "slides/w2d1.html#the-root",
    "href": "slides/w2d1.html#the-root",
    "title": "Intro to Practical Computing",
    "section": "The root",
    "text": "The root\nThe root directory is the start or base of your file system.\n\n\nOn Windows, the root is C:/\nOn macOS and Linux, the root is /"
  },
  {
    "objectID": "slides/w2d1.html#your-home-directory",
    "href": "slides/w2d1.html#your-home-directory",
    "title": "Intro to Practical Computing",
    "section": "Your home directory",
    "text": "Your home directory\nWhen interacting with your computer, you are logged in as a user. Each user has a home directory.\nFor example:\n\n\nOn Windows, C:/Users/Sarah\nOn macOS and Linux, /home/sarah"
  },
  {
    "objectID": "slides/w2d1.html#your-home-directory-1",
    "href": "slides/w2d1.html#your-home-directory-1",
    "title": "Intro to Practical Computing",
    "section": "Your home directory",
    "text": "Your home directory\nIt is often easier to use a shortcut to access your home directory: ~. On Windows, macOS, and Linux, you can use ~ to access your home directory:\n\n~ is equivalent to C:/Users/Sarah and /home/sarah"
  },
  {
    "objectID": "slides/w2d1.html#paths",
    "href": "slides/w2d1.html#paths",
    "title": "Intro to Practical Computing",
    "section": "Paths",
    "text": "Paths\nC:/Users/Sarah and /home/sarah are examples of paths. In particular, these are paths to Sarah’s home directory."
  },
  {
    "objectID": "slides/w2d1.html#paths-1",
    "href": "slides/w2d1.html#paths-1",
    "title": "Intro to Practical Computing",
    "section": "Paths",
    "text": "Paths\n\n\nPaths specify the location of a file or folder on your computer, let’s look at a few examples:\n\n/\n/home/sarah\n/home/sarah/Desktop\n/home/sarah/Documents/for128/lab_01.qmd\n~/Documents/for128/lab_01.qmd"
  },
  {
    "objectID": "slides/w2d1.html#paths-2",
    "href": "slides/w2d1.html#paths-2",
    "title": "Intro to Practical Computing",
    "section": "Paths",
    "text": "Paths\n\nEquivalent paths, on Windows:\n\nC:/\nC:/Users/Sarah\nC:/Users/Sarah/Desktop\nC:/Users/Sarah/Documents/for128/lab_01.qmd\n~/Documents/for128/lab_01.qmd"
  },
  {
    "objectID": "slides/w2d1.html#relative-vs.-absolute-paths",
    "href": "slides/w2d1.html#relative-vs.-absolute-paths",
    "title": "Intro to Practical Computing",
    "section": "Relative vs. absolute paths",
    "text": "Relative vs. absolute paths\n\n\nSo far, we’ve only shown absolute paths.\nAbsolute paths show a file or folder in reference to your computer’s file system.\nRelative paths, on the other hand, show a file or folder in relation to a working directory."
  },
  {
    "objectID": "slides/w2d1.html#working-directory-example",
    "href": "slides/w2d1.html#working-directory-example",
    "title": "Intro to Practical Computing",
    "section": "Working directory example",
    "text": "Working directory example\n\n\nRecall the absolute path to lab_01.qmd:\n\n/home/sarah/Documents/for128/lab_01.qmd\n\nSay our working directory is the documents folder:\n\n/home/sarah/Documents\n\nThen the relative path to lab_01.qmd is:\n\nfor128/lab_01.qmd"
  },
  {
    "objectID": "slides/w2d1.html#why",
    "href": "slides/w2d1.html#why",
    "title": "Intro to Practical Computing",
    "section": "Why?",
    "text": "Why?\n\n\nReproducibility!\n\nThey will work on any computer, not just your own.\n\nClear and concise.\nBut really, reproducibility."
  },
  {
    "objectID": "slides/w2d1.html#what-have-we-learned",
    "href": "slides/w2d1.html#what-have-we-learned",
    "title": "Intro to Practical Computing",
    "section": "What have we learned?",
    "text": "What have we learned?\n\n\nIn Quarto, the default working directory is the folder where the quarto document lives.\n\nCrucial note: this may be different than the working directory in your R console.\n\nYou can set your working directory in R with setwd()\n\nJust for your R console, though. This does not apply to Quarto documents.\n\nYou can get your current working directory in R with getwd()"
  },
  {
    "objectID": "slides/w2d1.html#next-time",
    "href": "slides/w2d1.html#next-time",
    "title": "Intro to Practical Computing",
    "section": "Next time",
    "text": "Next time\n\nRemember, lab 1 is due tomorrow at 5pm on D2L.\nRStudio projects.\nReading and writing data."
  },
  {
    "objectID": "slides/w6d1.html#annoucements",
    "href": "slides/w6d1.html#annoucements",
    "title": "Welcome to the tidyverse",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm 1 is this Thursday, Oct 3, during lab time."
  },
  {
    "objectID": "slides/w6d1.html#agenda",
    "href": "slides/w6d1.html#agenda",
    "title": "Welcome to the tidyverse",
    "section": "Agenda",
    "text": "Agenda\n\nMidterm format overview\nIntro to the tidyverse\nQuiz + group activity"
  },
  {
    "objectID": "slides/w6d1.html#reminder-from-the-syllabus",
    "href": "slides/w6d1.html#reminder-from-the-syllabus",
    "title": "Welcome to the tidyverse",
    "section": "Reminder from the syllabus",
    "text": "Reminder from the syllabus\nArtificial intelligence (AI) tools, such as ChatGPT, are being used to generate code, analyze data, and much more. However, a key goal of this course is for you to learn how to thoughtfully, ethically, and independently write code and extract knowledge from data. Therefore, the use of generative AI tools, such as ChatGPT and others, are strictly prohibited in any stage of the work process for this course. If you have questions about whether a tool is allowed for this course, ask the Instructor before using it.\nViolations of this policy are considered academic misconduct."
  },
  {
    "objectID": "slides/w6d1.html#midterm-i-overview",
    "href": "slides/w6d1.html#midterm-i-overview",
    "title": "Welcome to the tidyverse",
    "section": "Midterm I overview",
    "text": "Midterm I overview\n\n\nThe test will be taken in person, in lab.\n5 questions, all equally weighted. You only have to answer 4 of 5 questions. If you answer 5, I will count the 4 you did the best on.\nThere will be a paper test with the questions on it, but you will answer them in a Quarto document (similar to your labs).\nLecture slides and previous labs/quizzes are your best resource for success.\nQuestions cover material from chapters 1 - 5 of IFDAR, or Week 5 Day 2."
  },
  {
    "objectID": "slides/w6d1.html#what-is-the-tidyverse",
    "href": "slides/w6d1.html#what-is-the-tidyverse",
    "title": "Welcome to the tidyverse",
    "section": "What is the tidyverse",
    "text": "What is the tidyverse\n\n\nA collection of R packages that work together to provide extensive and intuitive data analysis functions.\nIn this class, we will focus on 5 tidyverse packages:\n\ntibble, to improve on the data.frame,\nreadr, to improve reading and writing data,\ndplyr, to manipulate and summarize data “data plyers”,\ntidyr, to clean and reshape data, and\nggplot2, to produce beautiful graphics with intuitive syntax “the grammer of graphics”."
  },
  {
    "objectID": "slides/w6d1.html#a-note-on-the-course",
    "href": "slides/w6d1.html#a-note-on-the-course",
    "title": "Welcome to the tidyverse",
    "section": "A note on the course",
    "text": "A note on the course\n\n\nSo far, we have almost entirely focused on R in its “base” form. That is, R with only built-in functions.\nBase R has many advantages: especially in being fast and reliable.\nHowever, I believe that the tidyverse can provide a more intuitive approach to data analysis."
  },
  {
    "objectID": "slides/w6d1.html#next-time",
    "href": "slides/w6d1.html#next-time",
    "title": "Welcome to the tidyverse",
    "section": "Next time",
    "text": "Next time\n\nReview day. We will discuss any questions about the material for the midterm.\nCome ready to ask any last minute questions, discuss approaches to problems, etc."
  },
  {
    "objectID": "tickets/ticket_08.html",
    "href": "tickets/ticket_08.html",
    "title": "Lecture Ticket 8",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 5"
  },
  {
    "objectID": "tickets/ticket_08.html#reading",
    "href": "tickets/ticket_08.html#reading",
    "title": "Lecture Ticket 8",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 5"
  },
  {
    "objectID": "tickets/ticket_08.html#questions",
    "href": "tickets/ticket_08.html#questions",
    "title": "Lecture Ticket 8",
    "section": "Questions",
    "text": "Questions\nConsider the function:\n\nmy_pets &lt;- function(species) {\n  if (species == \"dog\") {\n    return(\"Dude\")\n  } else if (species == \"cat\") {\n    return(c(\"Pickle\", \"Kyle\", \"Nubs\"))\n  } else {\n    return(\"Not my pet\")\n  }\n}\n\n\nWhat would my_pets(species = \"dog\") return?\nWhat would my_pets(species = \"bird\") return?\nWhat would my_pets(species = \"cat\") return?"
  },
  {
    "objectID": "tickets/ticket_01.html",
    "href": "tickets/ticket_01.html",
    "title": "Lecture Ticket 1",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 1\nBegin Chapter 2 (STOP at the bottom of page 19)"
  },
  {
    "objectID": "tickets/ticket_01.html#reading",
    "href": "tickets/ticket_01.html#reading",
    "title": "Lecture Ticket 1",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 1\nBegin Chapter 2 (STOP at the bottom of page 19)"
  },
  {
    "objectID": "tickets/ticket_01.html#tasks",
    "href": "tickets/ticket_01.html#tasks",
    "title": "Lecture Ticket 1",
    "section": "Tasks",
    "text": "Tasks\n\n1. Install R and RStudio\nAs discussed in IFDAR, go to Posit’s website. Install R first, and then install RStudio.\n\n\n2. Run your first R command\nIn the console, type in the following command and press Enter to run it:\n\nrnorm(1)\n\n\n\n3. Record your result\nCome to class on Thursday with a piece of paper with your name on it that includes the result (it will be a number) from running rnorm(1) in task 2.\nIf you were unable to install R and RStudio and ran into issues, instead come to class with a piece of paper with your name on it that explains the issue you were having with installation."
  },
  {
    "objectID": "tickets/ticket_13.html",
    "href": "tickets/ticket_13.html",
    "title": "Lecture Ticket 13",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.1 - 7.5"
  },
  {
    "objectID": "tickets/ticket_13.html#reading",
    "href": "tickets/ticket_13.html#reading",
    "title": "Lecture Ticket 13",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.1 - 7.5"
  },
  {
    "objectID": "tickets/ticket_13.html#questions",
    "href": "tickets/ticket_13.html#questions",
    "title": "Lecture Ticket 13",
    "section": "Questions",
    "text": "Questions\n\nConsider the following dataset:\n\n\nten_cars &lt;- head(mtcars, n = 10)\nten_cars\n\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n\n\nHow would we use dplyr to filter for rows with horse power (hp) greater than 100? How would we use base R to do the same thing? Which do you prefer?"
  },
  {
    "objectID": "tickets/ticket_20.html",
    "href": "tickets/ticket_20.html",
    "title": "Lecture Ticket 20",
    "section": "",
    "text": "None."
  },
  {
    "objectID": "tickets/ticket_20.html#reading",
    "href": "tickets/ticket_20.html#reading",
    "title": "Lecture Ticket 20",
    "section": "",
    "text": "None."
  },
  {
    "objectID": "tickets/ticket_20.html#questions",
    "href": "tickets/ticket_20.html#questions",
    "title": "Lecture Ticket 20",
    "section": "Questions",
    "text": "Questions\nFor this lecture ticket, please just bring a piece of paper with your name on it."
  },
  {
    "objectID": "tickets/ticket_18.html",
    "href": "tickets/ticket_18.html",
    "title": "Lecture Ticket 18",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nReview Chapter 8"
  },
  {
    "objectID": "tickets/ticket_18.html#reading",
    "href": "tickets/ticket_18.html#reading",
    "title": "Lecture Ticket 18",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nReview Chapter 8"
  },
  {
    "objectID": "tickets/ticket_18.html#questions",
    "href": "tickets/ticket_18.html#questions",
    "title": "Lecture Ticket 18",
    "section": "Questions",
    "text": "Questions\n\nWhat are each of the arguments to pivot_longer() and pivot_wider() that we will use? What must be specified for each of those arguments?\nWhat about the “FACE” dataset made it not tidy?"
  },
  {
    "objectID": "tickets/ticket_16.html",
    "href": "tickets/ticket_16.html",
    "title": "Lecture Ticket 16",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.14 - 7.15"
  },
  {
    "objectID": "tickets/ticket_16.html#reading",
    "href": "tickets/ticket_16.html#reading",
    "title": "Lecture Ticket 16",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.14 - 7.15"
  },
  {
    "objectID": "tickets/ticket_16.html#questions",
    "href": "tickets/ticket_16.html#questions",
    "title": "Lecture Ticket 16",
    "section": "Questions",
    "text": "Questions\n\nWhat are the two major types of joins that we read about? What differentiates them?\nWe read about six joins. What are they? What do each of them do?\nWhich two joins are the most similar to each other?\nWhat is your favorite join? Why?"
  },
  {
    "objectID": "tickets/ticket_14.html",
    "href": "tickets/ticket_14.html",
    "title": "Lecture Ticket 14",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.6 - 7.9, 7.12"
  },
  {
    "objectID": "tickets/ticket_14.html#reading",
    "href": "tickets/ticket_14.html#reading",
    "title": "Lecture Ticket 14",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.6 - 7.9, 7.12"
  },
  {
    "objectID": "tickets/ticket_14.html#questions",
    "href": "tickets/ticket_14.html#questions",
    "title": "Lecture Ticket 14",
    "section": "Questions",
    "text": "Questions\n\nWhat do mutate() and transmute() do? How are they different?\nWhat does the pipe (%&gt;%) operator do?\nWhat’s your favorite dplyr verb we’ve learned about so far? Why?"
  },
  {
    "objectID": "tickets/ticket_11.html",
    "href": "tickets/ticket_11.html",
    "title": "Lecture Ticket 11",
    "section": "",
    "text": "No lecture ticket today. Come to lecture with any last minute questions you might have about the midterm!"
  },
  {
    "objectID": "tickets/ticket_09.html",
    "href": "tickets/ticket_09.html",
    "title": "Lecture Ticket 9",
    "section": "",
    "text": "No reading this time."
  },
  {
    "objectID": "tickets/ticket_09.html#reading",
    "href": "tickets/ticket_09.html#reading",
    "title": "Lecture Ticket 9",
    "section": "",
    "text": "No reading this time."
  },
  {
    "objectID": "tickets/ticket_09.html#questions",
    "href": "tickets/ticket_09.html#questions",
    "title": "Lecture Ticket 9",
    "section": "Questions",
    "text": "Questions\n\nWhat concepts from this course do you feel confident about?\nWhat concepts from this course are you struggling with?"
  },
  {
    "objectID": "tickets/ticket_03.html",
    "href": "tickets/ticket_03.html",
    "title": "Lecture Ticket 3",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 3"
  },
  {
    "objectID": "tickets/ticket_03.html#reading",
    "href": "tickets/ticket_03.html#reading",
    "title": "Lecture Ticket 3",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 3"
  },
  {
    "objectID": "tickets/ticket_03.html#questions",
    "href": "tickets/ticket_03.html#questions",
    "title": "Lecture Ticket 3",
    "section": "Questions",
    "text": "Questions\n\nWhat function is used to set a working directory in R? How about to get your current working directory?\nWhat is the difference between a relative and absolute path?\nConsider the following absolute path:\n\n/home/grayson/courses/for128/lab_01.qmd\nIf the working directory is /home/grayson/courses/, what is the relative path to lab_01.qmd?"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Andrew Finley (finleya@msu.edu, Room 211 Natural Resources Building)\nResearch Assistant: Grayson White (whitegra@msu.edu, Room 211 Natural Resources Building)\nEmails: Direct all email inquiries regarding the course and material covered to both the Instructor and Research Assistant, Andrew Finley and Grayson White (both as recipient, or CC’d).\nLinks:\n\nThe course website, www.for128.org, for course information, lecture slides, and course materials.\nD2L, for course feedback and non-public course materials.\n\nCourse Description:\nThis course covers foundational skills needed to work efficiently within a computing environment. The course serves as an introduction to exploratory data analysis (EDA) using the R programming language. Use of R focuses on cleaning, structuring, and enriching raw data to facilitate EDA. The course is designed as a general precursor for subsequent discipline-specific courses. Learning occurs in a hands-on active environment with topics motivated using real datasets from environmental and biological sciences."
  },
  {
    "objectID": "syllabus.html#useful-information",
    "href": "syllabus.html#useful-information",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Andrew Finley (finleya@msu.edu, Room 211 Natural Resources Building)\nResearch Assistant: Grayson White (whitegra@msu.edu, Room 211 Natural Resources Building)\nEmails: Direct all email inquiries regarding the course and material covered to both the Instructor and Research Assistant, Andrew Finley and Grayson White (both as recipient, or CC’d).\nLinks:\n\nThe course website, www.for128.org, for course information, lecture slides, and course materials.\nD2L, for course feedback and non-public course materials.\n\nCourse Description:\nThis course covers foundational skills needed to work efficiently within a computing environment. The course serves as an introduction to exploratory data analysis (EDA) using the R programming language. Use of R focuses on cleaning, structuring, and enriching raw data to facilitate EDA. The course is designed as a general precursor for subsequent discipline-specific courses. Learning occurs in a hands-on active environment with topics motivated using real datasets from environmental and biological sciences."
  },
  {
    "objectID": "syllabus.html#learning-outcomes",
    "href": "syllabus.html#learning-outcomes",
    "title": "Syllabus",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nUpon completion of this course students should be able to:\n\napply best practices for naming and organizing files within a directory structure to facilitate an efficient and reproducible workflow,\ntransform raw data into more readily used formats, i.e., perform key “data wrangling” tasks such as data cleaning, structuring, enriching, and validating,\nconduct basic Exploratory Data Analysis (EDA), i.e., apply built-in and costume written functions to explore data characteristics and communicate findings using summary tables, graphics, and basic summary statistics."
  },
  {
    "objectID": "syllabus.html#learning-materials-tools",
    "href": "syllabus.html#learning-materials-tools",
    "title": "Syllabus",
    "section": "Learning Materials & Tools",
    "text": "Learning Materials & Tools\nTextbook: Introduction to Forestry Data Analysis with R, by Andrew O. Finley and Jeffrey W. Doser. Available free, online: www.finley-lab.com/files/ifdar/\nR and RStudio: R is a free and open source programming language, and RStudio is an Integrated Development Environment (IDE) which allows for streamlined use of the R programming language. Both are free to install, and installation instructions will be provided in this course. A laptop that can run R and RStudio is required for this course."
  },
  {
    "objectID": "syllabus.html#meetings-office-hours",
    "href": "syllabus.html#meetings-office-hours",
    "title": "Syllabus",
    "section": "Meetings & Office Hours",
    "text": "Meetings & Office Hours\nWe’ll have a lecture-style meeting twice a week, and a lab meeting once a week.\n\nLectures are on Tuesdays and Thursdays, 9:10am - 10am, Natural Resources Building, Room 152.\nLabs are on Thursdays, 10:20am - 12:10pm, Natural Resources Building, Room 223.\n\nOutside of lectures and labs, I will also hold office hours.\n\nOffice hours will be held Tuesdays (10:30am - 11:30am) and Thursdays (1:30pm - 2:30pm), Natural Resources Building, Room 211.\nIf these times do not work for you, we also hold office hours by appointment. Please email to set up a time to meet.\n\nOffice hours are a great way to get help on assignments you are stuck on, ask questions you didn’t get a chance to ask in class, familiarize yourself with the instructor and course expectations, and much more! Further, office hours can be a very helpful tool for your success in this course and beyond in college. Attending office hours is a great habit!"
  },
  {
    "objectID": "syllabus.html#assessments",
    "href": "syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\nIn this course, you’ll be assessed based on your work and participation. In particular:\n\nLab reports (40%)\n\nLab reports are assigned on Thursdays during lab time, and due the following Wednesday at 5pm on D2L. We will have a lab each week (except for the week of the midterm exam).\nThe lowest lab grade is dropped.\n\nMidterm Exams (20%)\n\nThere will be two midterm exams, one on week 6 and one on week 12. Each midterm is worth 10% of the final grade.\n\nFinal Project (15%)\n\nRather than a final exam, we will have a final group project with project presentations during the final exam time period. More details to come as the semester goes on.\n\nIn-class quizzes (15%)\n\nIn-class quizzes do not have a regular schedule and will occur based on the material we get through.\nThe lowest in-class quiz grade is dropped.\n\nLecture tickets (10%)\n\nLecture tickets are due at the beginning of every lecture, handed in in-person, by you.\nThe lowest three (3) lecture ticket grades will be dropped.\n\n\nGrades are calculated on a four point scale and correspond to the following grade percent:\n\n\n\nGrade percent\nGrade points\n\n\n\n\n90% - 100%\n4.0\n\n\n85.0% - 89.9%\n3.5\n\n\n80.0% - 84.9%\n3.0\n\n\n75.0% - 79.9%\n2.5\n\n\n70.0% - 74.9%\n2.0\n\n\n65.0% - 69.9%\n1.5\n\n\n60.0 - 64.9%\n1.0\n\n\n0% - 60%\n0.0"
  },
  {
    "objectID": "syllabus.html#late-work-policy",
    "href": "syllabus.html#late-work-policy",
    "title": "Syllabus",
    "section": "Late work policy",
    "text": "Late work policy\n\nLabs turned in after the deadline will not be accepted unless an extension was granted by the Instructor and/or Research Assistant prior to the deadline. Note though that one (1) lab will be dropped and not counted towards your grade.\nIf you anticipate not being able to make a midterm, reach out to the Instructor and/or Research Assistant at least a week in advance. Note that midterms will occur during lab time on weeks 6 and 12.\nLate lecture tickets will not be accepted. Note though that three (3) lecture tickets will be dropped and not counted towards your grade.\nIn-class quizzes cannot be made up outside of class. Note though that one (1) in-class quiz will be dropped and not counted towards your grade.\nThe final project must be turned in on time."
  },
  {
    "objectID": "syllabus.html#collaboration-policy-for-for-128",
    "href": "syllabus.html#collaboration-policy-for-for-128",
    "title": "Syllabus",
    "section": "Collaboration Policy for FOR 128",
    "text": "Collaboration Policy for FOR 128\nWorking with your classmates on difficult and interesting problems can not only help your learning, but help you get to know each other. Therefore, we allow and encourage collaboration on lab reports and lecture tickets. However, collaboration on exams and quizzes is strictly prohibited and will be considered academic misconduct.\nIf you choose to collaborate with a classmate, please add their name to the top of your assignment, and list them as a collaborator, e.g.:\nCollaborator(s): Elliot Shannon, Romain Boutelet\nBut what is collaboration?\nFor FOR 128, collaboration can look like: working with classmates together on a given problem, doing scratch work, helping each other get un-stuck on a part of a problem, and even coming to a solution. However, you must write up your own problem solutions individually and cannot copy other’s solutions (even those who you have collaborated with). Further, copying code from a collaborator, classmate, or generative AI tool (see the following section) is strictly prohibited and will be considered academic misconduct."
  },
  {
    "objectID": "syllabus.html#ai-policy-for-for-128",
    "href": "syllabus.html#ai-policy-for-for-128",
    "title": "Syllabus",
    "section": "AI Policy for FOR 128",
    "text": "AI Policy for FOR 128\nArtificial intelligence (AI) tools, such as ChatGPT, are being used to generate code, analyze data, and much more. However, a key goal of this course is for you to learn how to thoughtfully, ethically, and independently write code and extract knowledge from data. Therefore, the use of generative AI tools, such as ChatGPT and others, are strictly prohibited in any stage of the work process for this course. If you have questions about whether a tool is allowed for this course, ask the Instructor before using it.\nViolations of this policy are considered academic misconduct."
  },
  {
    "objectID": "recordings.html",
    "href": "recordings.html",
    "title": "Lecture Recordings",
    "section": "",
    "text": "Week 1, day 1: Welcome to the course. Available here.\nWeek 1, day 2: Data science tools. Available here.\nWeek 2, day 1: Practical computing. Available here.\nWeek 2, day 2: Reading and writing data. Available here.\nWeek 3, day 1: No recording available.\nWeek 3, day 2: Data structures. Available here.\nWeek 4, day 1: No recording available.\nWeek 4, day 2: Review of data structures & intro to functions. Available here.\nWeek 5, day 1: Functions and conditionals. Available here.\nWeek 5, day 2: Functions. NOTE: audio issues. Available here.\nWeek 6, day 1: Welcome to the tidyverse. Available here.\nWeek 6, day 2: Midterm review day. No recording.\nWeek 7, day 1: tibble and readr. Available here.\nWeek 7, day 2: Introduction to data wrangling with dplyr. Available here.\nWeek 8, day 1: More data wrangling with dplyr. Available here.\nWeek 8, day 2: Advanced grouping and summarizing. Available here.\nWeek 9, day 1: Combining multiple tibbles. Available here.\nWeek 10, day 1: Reshaping data with tidyr. Available here.\nWeek 10, day 2: Reshaping data with tidyr, part 2. Available here.\nWeek 11, day 1: The grammar of graphics. Available here."
  },
  {
    "objectID": "recordings.html#recordings",
    "href": "recordings.html#recordings",
    "title": "Lecture Recordings",
    "section": "",
    "text": "Week 1, day 1: Welcome to the course. Available here.\nWeek 1, day 2: Data science tools. Available here.\nWeek 2, day 1: Practical computing. Available here.\nWeek 2, day 2: Reading and writing data. Available here.\nWeek 3, day 1: No recording available.\nWeek 3, day 2: Data structures. Available here.\nWeek 4, day 1: No recording available.\nWeek 4, day 2: Review of data structures & intro to functions. Available here.\nWeek 5, day 1: Functions and conditionals. Available here.\nWeek 5, day 2: Functions. NOTE: audio issues. Available here.\nWeek 6, day 1: Welcome to the tidyverse. Available here.\nWeek 6, day 2: Midterm review day. No recording.\nWeek 7, day 1: tibble and readr. Available here.\nWeek 7, day 2: Introduction to data wrangling with dplyr. Available here.\nWeek 8, day 1: More data wrangling with dplyr. Available here.\nWeek 8, day 2: Advanced grouping and summarizing. Available here.\nWeek 9, day 1: Combining multiple tibbles. Available here.\nWeek 10, day 1: Reshaping data with tidyr. Available here.\nWeek 10, day 2: Reshaping data with tidyr, part 2. Available here.\nWeek 11, day 1: The grammar of graphics. Available here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "For 128 Michigan State University\nFall 2024\n\n\n\nWednesday office hours: 12:30 - 2:30\n\n\n\n\n\n\n\n\n\n\n\nMidterm I this week.\n\n\n\n\nExtra office hours this week:\n\nMonday 9/23: 10:30am - 11:30am\nTuesday 9/24: 10am - 11am (note the 30 minute change)\nWednesday 9/25: 12:30pm - 2pm\nThursday 9/26: 1:30pm - 2:30pm (regular time)\n\n\n\n\n\n\n\nThe lecture notes are available.\n\n\n\n\n\n\n\n\nWe’ll go through vectors.qmd in class.\n\n\n\n\n\nLecture materials:\n\nIn-class work: vectors_dataframes.qmd\nData for in-class work: Loblolly.csv\n\nSupplementary lab materials:\n\nExample R script lab setup: lab_03_example.R\nLab 3 data: FEF_trees.csv\n\n\n\n\n\n\n\n\n\nOffice hours will be moved to 1:30 - 2:30 today.\nLab 1 is due Wednesday on D2L.\n\n\n\n\n\n\n\n\n\n\n\nBefore coming to class, please read the syllabus.\nNo lecture ticket today.\n\n\n\n\n\nWe’ll have a lecture ticket due at the beginning of class. See the assignments page.\nLab 1, also available on the assignments page, will be assigned."
  },
  {
    "objectID": "index.html#week-9-october-20---26",
    "href": "index.html#week-9-october-20---26",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "Wednesday office hours: 12:30 - 2:30"
  },
  {
    "objectID": "index.html#week-6-september-29---october-5",
    "href": "index.html#week-6-september-29---october-5",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "Midterm I this week."
  },
  {
    "objectID": "index.html#week-5-september-22---28",
    "href": "index.html#week-5-september-22---28",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "Extra office hours this week:\n\nMonday 9/23: 10:30am - 11:30am\nTuesday 9/24: 10am - 11am (note the 30 minute change)\nWednesday 9/25: 12:30pm - 2pm\nThursday 9/26: 1:30pm - 2:30pm (regular time)"
  },
  {
    "objectID": "index.html#week-4-september-15---21",
    "href": "index.html#week-4-september-15---21",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "The lecture notes are available."
  },
  {
    "objectID": "index.html#week-3-september-8---14",
    "href": "index.html#week-3-september-8---14",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "We’ll go through vectors.qmd in class.\n\n\n\n\n\nLecture materials:\n\nIn-class work: vectors_dataframes.qmd\nData for in-class work: Loblolly.csv\n\nSupplementary lab materials:\n\nExample R script lab setup: lab_03_example.R\nLab 3 data: FEF_trees.csv"
  },
  {
    "objectID": "index.html#week-2-september-1---7",
    "href": "index.html#week-2-september-1---7",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "Office hours will be moved to 1:30 - 2:30 today.\nLab 1 is due Wednesday on D2L."
  },
  {
    "objectID": "index.html#week-1-august-25---31",
    "href": "index.html#week-1-august-25---31",
    "title": "Practical Computing   and Data Science Tools",
    "section": "",
    "text": "Before coming to class, please read the syllabus.\nNo lecture ticket today.\n\n\n\n\n\nWe’ll have a lecture ticket due at the beginning of class. See the assignments page.\nLab 1, also available on the assignments page, will be assigned."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Labs are turned in on D2L.\n\n\n\nAssignment\nAvailable\nDue\n\n\n\n\nLab 1\nThursday 8/27 (at lab time)\nWednesday 9/4 (at 5pm)\n\n\nLab 2\nThursday 9/5 (at lab time)\nWednesday 9/11 (at 5pm)\n\n\nLab 3\nThursday 9/12 (at lab time)\nWednesday 9/18 (at 5pm)\n\n\nLab 4\nThursday 9/19 (at lab time)\nWednesday 9/25 (at 5pm)\n\n\nLab 5\nThursday 9/26 (at lab time)\nWednesday 10/2 (at 5pm)\n\n\nLab 6\nThursday 10/10 (at lab time)\nWednesday 10/16 (at 5pm)\n\n\nLab 7, Instructions & Output\nThursday 10/17 (at lab time)\nWednesday 10/23 (at 5pm)\n\n\nLab 8, Instructions & Output\nThursday 10/24 (at lab time)\nWednesday 10/30 (at 5pm)\n\n\nLab 9, Instructions & Output, Data\nThursday 10/31 (at lab time)\nWednesday 11/6 (at 5pm)\n\n\nLab 10\nThursday 11/7 (at lab time)\nWednesday 11/13 (at 5pm)\n\n\nLab 11\nThursday 11/21 (at lab time)\nWednesday 11/27 (at 5pm)"
  },
  {
    "objectID": "assignments.html#labs",
    "href": "assignments.html#labs",
    "title": "Assignments",
    "section": "",
    "text": "Labs are turned in on D2L.\n\n\n\nAssignment\nAvailable\nDue\n\n\n\n\nLab 1\nThursday 8/27 (at lab time)\nWednesday 9/4 (at 5pm)\n\n\nLab 2\nThursday 9/5 (at lab time)\nWednesday 9/11 (at 5pm)\n\n\nLab 3\nThursday 9/12 (at lab time)\nWednesday 9/18 (at 5pm)\n\n\nLab 4\nThursday 9/19 (at lab time)\nWednesday 9/25 (at 5pm)\n\n\nLab 5\nThursday 9/26 (at lab time)\nWednesday 10/2 (at 5pm)\n\n\nLab 6\nThursday 10/10 (at lab time)\nWednesday 10/16 (at 5pm)\n\n\nLab 7, Instructions & Output\nThursday 10/17 (at lab time)\nWednesday 10/23 (at 5pm)\n\n\nLab 8, Instructions & Output\nThursday 10/24 (at lab time)\nWednesday 10/30 (at 5pm)\n\n\nLab 9, Instructions & Output, Data\nThursday 10/31 (at lab time)\nWednesday 11/6 (at 5pm)\n\n\nLab 10\nThursday 11/7 (at lab time)\nWednesday 11/13 (at 5pm)\n\n\nLab 11\nThursday 11/21 (at lab time)\nWednesday 11/27 (at 5pm)"
  },
  {
    "objectID": "assignments.html#lecture-tickets",
    "href": "assignments.html#lecture-tickets",
    "title": "Assignments",
    "section": "Lecture Tickets",
    "text": "Lecture Tickets\nLecture tickets are turned in on a piece of paper in-person at lecture.\n\n\n\nAssignment\nAvailable\nDue\n\n\n\n\nLecture ticket 1\nTuesday 8/27 (by 5pm)\nThursday 8/29 (in lecture)\n\n\nLecture ticket 2\nThursday 8/29 (by 5pm)\nTuesday 9/3 (in lecture)\n\n\nLecture ticket 3\nTuesday 9/3 (by 5pm)\nThursday 9/5 (in lecture)\n\n\nLecture ticket 4\nThursday 9/5 (by 5pm)\nTuesday 9/10 (in lecture)\n\n\nLecture ticket 5\nTuesday 9/10 (by 5pm)\nThursday 9/12 (in lecture)\n\n\nLecture ticket 6\nThursday 9/12 (by 5pm)\nTuesday 9/17 (in lecture)\n\n\nLecture ticket 7\nTuesday 9/17 (by 5pm)\nThursday 9/19 (in lecture)\n\n\nLecture ticket 8\nThursday 9/19 (by 5pm)\nTuesday 9/24 (in lecture)\n\n\nLecture ticket 9\nTuesday 9/24 (by 5pm)\nThursday 9/26 (in lecture)\n\n\nLecture ticket 10\nThursday 9/26 (by 5pm)\nTuesday 10/1 (in lecture)\n\n\nLecture ticket 11\nTuesday 10/1 (by 5pm)\nThursday 10/3 (in lecture)\n\n\nLecture ticket 12\nThursday 10/3 (by 5pm)\nTuesday 10/8 (in lecture)\n\n\nLecture ticket 13\nTuesday 10/8 (by 5pm)\nThursday 10/10 (in lecture)\n\n\nLecture ticket 14\nThursday 10/10 (by 5pm)\nTuesday 10/15 (in lecture)\n\n\nLecture ticket 15\nTuesday 10/15 (by 5pm)\nThursday 10/17 (in lecture)\n\n\nLecture ticket 16\nThursday 10/17 (by 5pm)\nThursday 10/24 (in lecture)\n\n\nLecture ticket 17\nThursday 10/24 (by 5pm)\nTuesday 10/29 (in lecture)\n\n\nLecture ticket 18\nTuesday 10/29 (by 5pm)\nThursday 10/31 (in lecture)\n\n\nLecture ticket 19\nThursday 10/31 (by 5pm)\nTuesday 11/5 (in lecture)\n\n\nLecture ticket 20\nTuesday 11/5 (by 5pm)\nThursday 11/7 (in lecture)\n\n\nLecture ticket 21\nThursday 11/7 (by 5pm)\nTuesday 11/12 (in lecture)\n\n\nLecture ticket 22\nTuesday 11/12 (by 5pm)\nThursday 11/14 (in lecture)\n\n\nLecture ticket 23\nThursday 11/14 (by 5pm)\nTuesday 11/19 (in lecture)\n\n\nLecture ticket 24\nTuesday 11/19 (by 5pm)\nTuesday 11/26 (in lecture)\n\n\nLecture ticket 25\nTuesday 11/26 (by 5pm)\nThursday 11/28 (in lecture)\n\n\nLecture ticket 26\nThursday 11/28 (by 5pm)\nTuesday 12/3 (in lecture)\n\n\nLecture ticket 27\nTuesday 12/3 (by 5pm)\nThursday 12/5 (in lecture)"
  },
  {
    "objectID": "final_project.html",
    "href": "final_project.html",
    "title": "Final Project",
    "section": "",
    "text": "In this class, we’ve learned how to analyze data in the R programming language. From reading in the data, to tidying and reshaping, to wrangling, and finally to plotting. The final project asks you to find a dataset that is interesting to you and analyze it with the tools we’ve learned in class. The dataset you use for the class should be environmental in some sense. It could relate to forestry, water and water quality, animals, climate, etc. We will include some datasets that could be a good choice for this project, but you are not limited to these datasets.\nThis is a group project, with groups of 3-5 people. You can choose your groups, but if you are having trouble finding a group or your group is too small (&lt; 3 people), please let Grayson know and we will combine you or your group with others."
  },
  {
    "objectID": "final_project.html#description",
    "href": "final_project.html#description",
    "title": "Final Project",
    "section": "",
    "text": "In this class, we’ve learned how to analyze data in the R programming language. From reading in the data, to tidying and reshaping, to wrangling, and finally to plotting. The final project asks you to find a dataset that is interesting to you and analyze it with the tools we’ve learned in class. The dataset you use for the class should be environmental in some sense. It could relate to forestry, water and water quality, animals, climate, etc. We will include some datasets that could be a good choice for this project, but you are not limited to these datasets.\nThis is a group project, with groups of 3-5 people. You can choose your groups, but if you are having trouble finding a group or your group is too small (&lt; 3 people), please let Grayson know and we will combine you or your group with others."
  },
  {
    "objectID": "final_project.html#components",
    "href": "final_project.html#components",
    "title": "Final Project",
    "section": "Components",
    "text": "Components\nThe final project will be composed of four components: a group member submission, a proposal, a blog post, and a presentation. For each component, your group will submit one document via D2L.\n\nThe group member submission\nDue date: Tuesday, November 12th, 5pm.\nPlease submit a document to D2L with the names of your group members. Remember, groups of 3-5 people are allowed. If you are having trouble finding a group or your group is too small (&lt; 3 people), please let Grayson know and we will combine you or your group with others.\n\n\nThe proposal\nDue date: Tuesday, November 19th, 5pm.\nPlease submit a brief proposal of the project you would like to do. This should be a (no longer than 2 page) document outlining the data you will use and an idea of the story or information that you’d like to try to extract from the data. For this part, it is strongly recommended that you download the data you would like to use and take a look at it. In the proposal, describe any challenges you anticipate having working with the data, and the steps needed to get the data into a form that will be easy to work with in R. It is expected that this document is well-written, explains the data you’d like to work with, and conveys your ideas and hopes for what you’d like to do with the data (i.e. what your blog post will be about).\n\n\nThe blog post\nDue date: Wednesday, December 11th, 5pm.\nThe blog post is the heart of the final project. You and your group members will write a blog post in a Quarto document that takes the raw data you are using and tells a story with it. The blog post will include the story of getting the data, wrangling the data, and plots and summaries of the data. The blog posts will be posted on the course website (with groups permission), you have the right to not include your blog post on the course website, or to anonymize your blog post for the course website.\nMore details to come on the blog post.\n\n\nThe presentation\nDue date: Slides submitted by Wednesday, December 11th, 5pm. Presentations to be completed in class during the final exam slot on December 12th.\nYou and your group will present the results from your analyses (i.e. findings from the blog post) in slide show form to your classmates during the final exam slot. Groups will present together, and presentation time should be shared relatively equally between group members.\nMore details to come on the presentation."
  },
  {
    "objectID": "final_project.html#evaluation",
    "href": "final_project.html#evaluation",
    "title": "Final Project",
    "section": "Evaluation",
    "text": "Evaluation\nThe final project is worth 15% of your final grade. The proposal, blog post, and presentation will contribute to this 15%."
  },
  {
    "objectID": "midterm.html",
    "href": "midterm.html",
    "title": "Midterm I",
    "section": "",
    "text": "The midterm files are available below:\n\nmidterm_01.qmd\nLoblolly.csv"
  },
  {
    "objectID": "midterm.html#files",
    "href": "midterm.html#files",
    "title": "Midterm I",
    "section": "",
    "text": "The midterm files are available below:\n\nmidterm_01.qmd\nLoblolly.csv"
  },
  {
    "objectID": "slides/w3d1.html#agenda",
    "href": "slides/w3d1.html#agenda",
    "title": "Data Structures: Vectors",
    "section": "Agenda",
    "text": "Agenda\n\nOverview of data structures\nA tour of vectors"
  },
  {
    "objectID": "slides/w3d1.html#data-structures",
    "href": "slides/w3d1.html#data-structures",
    "title": "Data Structures: Vectors",
    "section": "Data structures",
    "text": "Data structures\n\nA data structure is a format for organizing and storing data. The structure is designed so that data can be accessed and worked with in specific ways.\nStructures are either homogeneous or heterogeneous, which describes the data types they hold (one type versus multiple types).\nStructures can also be characterized by their dimensionality, see Table Table 1.\n\n\n\n\nTable 1: Dimension and type content of base data structures in R.\n\n\n\n\n\nDimension\nHomogeneous\nHeterogeneous\n\n\n\n\n1\nAtomic vector\nList\n\n\n2\nMatrix\nData frame\n\n\nN\nArray"
  },
  {
    "objectID": "slides/w3d1.html#data-structures-1",
    "href": "slides/w3d1.html#data-structures-1",
    "title": "Data Structures: Vectors",
    "section": "Data structures",
    "text": "Data structures\n\nLet’s take a look at vectors.qmd."
  },
  {
    "objectID": "tickets/ticket_02.html",
    "href": "tickets/ticket_02.html",
    "title": "Lecture Ticket 2",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 2\nChapter 3: read through section 3.3.1 (STOP at 3.3.2 External data)"
  },
  {
    "objectID": "tickets/ticket_02.html#reading",
    "href": "tickets/ticket_02.html#reading",
    "title": "Lecture Ticket 2",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nFinish Chapter 2\nChapter 3: read through section 3.3.1 (STOP at 3.3.2 External data)"
  },
  {
    "objectID": "tickets/ticket_02.html#questions",
    "href": "tickets/ticket_02.html#questions",
    "title": "Lecture Ticket 2",
    "section": "Questions",
    "text": "Questions\n\nWhat are the two main operators used in R for assignment?\nWhat code would you write to assign the value 37 to the object favorite_number?\nOpen RStudio and check your working directory by entering a command into the R console. What is your working directory? Example: /Users/graysonwhite/Documents/"
  },
  {
    "objectID": "tickets/ticket_05.html",
    "href": "tickets/ticket_05.html",
    "title": "Lecture Ticket 5",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.3, 4.4 and 4.5 (Stop at 4.6)"
  },
  {
    "objectID": "tickets/ticket_05.html#reading",
    "href": "tickets/ticket_05.html#reading",
    "title": "Lecture Ticket 5",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.3, 4.4 and 4.5 (Stop at 4.6)"
  },
  {
    "objectID": "tickets/ticket_05.html#questions",
    "href": "tickets/ticket_05.html#questions",
    "title": "Lecture Ticket 5",
    "section": "Questions",
    "text": "Questions\n\nHow many dimensions do dataframes have?\nConsider the dataframe treedat. How would you access the element in the second row and third column of treedat?"
  },
  {
    "objectID": "tickets/ticket_10.html",
    "href": "tickets/ticket_10.html",
    "title": "Lecture Ticket 10",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 6"
  },
  {
    "objectID": "tickets/ticket_10.html#reading",
    "href": "tickets/ticket_10.html#reading",
    "title": "Lecture Ticket 10",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 6"
  },
  {
    "objectID": "tickets/ticket_10.html#questions",
    "href": "tickets/ticket_10.html#questions",
    "title": "Lecture Ticket 10",
    "section": "Questions",
    "text": "Questions\n\nWhat is a tibble? How does it relate to a data.frame?\nWhy do we prefer reading in data with readr over base R?\nAre all tibbles data.frames? Are all data.frames tibbles?"
  },
  {
    "objectID": "tickets/ticket_12.html",
    "href": "tickets/ticket_12.html",
    "title": "Lecture Ticket 12",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nReview Chapter 6\nBegin Chapter 7 (read the introduction and 7.1)"
  },
  {
    "objectID": "tickets/ticket_12.html#reading",
    "href": "tickets/ticket_12.html#reading",
    "title": "Lecture Ticket 12",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nReview Chapter 6\nBegin Chapter 7 (read the introduction and 7.1)"
  },
  {
    "objectID": "tickets/ticket_12.html#questions",
    "href": "tickets/ticket_12.html#questions",
    "title": "Lecture Ticket 12",
    "section": "Questions",
    "text": "Questions\n\nYou want to read in a file called “my_data.csv” on your computer and assign it to an object called dat in R. Now, we’ve learned two approaches to reading in data (base and tidyverse). How would you read it into R (a) with base and (b) with tidyverse?\nWhat are the dplyr verbs that we will learn in Chapter 7? What do each of them do?"
  },
  {
    "objectID": "tickets/ticket_15.html",
    "href": "tickets/ticket_15.html",
    "title": "Lecture Ticket 15",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.10 - 7.11, 7.13"
  },
  {
    "objectID": "tickets/ticket_15.html#reading",
    "href": "tickets/ticket_15.html#reading",
    "title": "Lecture Ticket 15",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 7: sections 7.10 - 7.11, 7.13"
  },
  {
    "objectID": "tickets/ticket_15.html#questions",
    "href": "tickets/ticket_15.html#questions",
    "title": "Lecture Ticket 15",
    "section": "Questions",
    "text": "Questions\n\nWhat do n() and n_distinct() do? How are they different?\nWhat two arguments do we always specify when we use across()?\nWhen we use across(), we use it within a few dplyr verbs – what are those verbs?\nWhat concepts in dplyr are you confidently understanding? What concepts are you still struggling with?"
  },
  {
    "objectID": "tickets/ticket_17.html",
    "href": "tickets/ticket_17.html",
    "title": "Lecture Ticket 17",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 8"
  },
  {
    "objectID": "tickets/ticket_17.html#reading",
    "href": "tickets/ticket_17.html#reading",
    "title": "Lecture Ticket 17",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 8"
  },
  {
    "objectID": "tickets/ticket_17.html#questions",
    "href": "tickets/ticket_17.html#questions",
    "title": "Lecture Ticket 17",
    "section": "Questions",
    "text": "Questions\n\nWhat makes data tidy?\nWhat do pivot_longer() and pivot_wider() do?\nWhat does unite() do?"
  },
  {
    "objectID": "tickets/ticket_19.html",
    "href": "tickets/ticket_19.html",
    "title": "Lecture Ticket 19",
    "section": "",
    "text": "Read the following article: A Layered Grammar of Graphics."
  },
  {
    "objectID": "tickets/ticket_19.html#reading",
    "href": "tickets/ticket_19.html#reading",
    "title": "Lecture Ticket 19",
    "section": "",
    "text": "Read the following article: A Layered Grammar of Graphics."
  },
  {
    "objectID": "tickets/ticket_19.html#questions",
    "href": "tickets/ticket_19.html#questions",
    "title": "Lecture Ticket 19",
    "section": "Questions",
    "text": "Questions\n\nWhat is a geometry? What are some examples of geometries?\nWhat is an aesthetic? What are some examples of aesthetics?\nWhat is a scale? How do scales differ between continuous and categorical variables?"
  },
  {
    "objectID": "tickets/ticket_04.html",
    "href": "tickets/ticket_04.html",
    "title": "Lecture Ticket 4",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.1 and 4.2 (Stop at 4.3 Factors)"
  },
  {
    "objectID": "tickets/ticket_04.html#reading",
    "href": "tickets/ticket_04.html#reading",
    "title": "Lecture Ticket 4",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.1 and 4.2 (Stop at 4.3 Factors)"
  },
  {
    "objectID": "tickets/ticket_04.html#questions",
    "href": "tickets/ticket_04.html#questions",
    "title": "Lecture Ticket 4",
    "section": "Questions",
    "text": "Questions\n\nWhat is a qualitative variable? What about a quantitative variable? How are they different?\nWhat does the c() function do?\nSuppose you have the following vector:\n\n\nheight_in &lt;- c(70, 62, 72, 67)\nheight_in\n\n[1] 70 62 72 67\n\n\nWhat code would you write to replace the second element of height_in with the value 63?"
  },
  {
    "objectID": "labs/lab_03.html",
    "href": "labs/lab_03.html",
    "title": "Vectors and Dataframes",
    "section": "",
    "text": "Create, subset, and manipulate vectors and data frames.\nPractice reading data from external files.\nGet some practice writing R scripts.\n\n\n\n\nCreate a new directory called lab_03 within your labs directory (e.g., ~/FOR_128/labs/lab_03). In RStudio set lab_03 as your working directory. Download and move the FEF_trees.csv file from the D2L lab page to your lab_03 directory.\nCreate a new script and save it as lab_03.R (it should save to your working directory).\nNow, use our book, help “man” pages, Google, your intuition, and experimentation to describe the behavior of the code in each of the following questions. For each question, write and execute the code in each question then, using a comment #, add notes above the code to describe/define its behavior (see example script lab_03_example.R in the lab’s D2L page)."
  },
  {
    "objectID": "labs/lab_03.html#getting-started",
    "href": "labs/lab_03.html#getting-started",
    "title": "Vectors and Dataframes",
    "section": "",
    "text": "Create, subset, and manipulate vectors and data frames.\nPractice reading data from external files.\nGet some practice writing R scripts.\n\n\n\n\nCreate a new directory called lab_03 within your labs directory (e.g., ~/FOR_128/labs/lab_03). In RStudio set lab_03 as your working directory. Download and move the FEF_trees.csv file from the D2L lab page to your lab_03 directory.\nCreate a new script and save it as lab_03.R (it should save to your working directory).\nNow, use our book, help “man” pages, Google, your intuition, and experimentation to describe the behavior of the code in each of the following questions. For each question, write and execute the code in each question then, using a comment #, add notes above the code to describe/define its behavior (see example script lab_03_example.R in the lab’s D2L page)."
  },
  {
    "objectID": "labs/lab_03.html#questions",
    "href": "labs/lab_03.html#questions",
    "title": "Vectors and Dataframes",
    "section": "Questions",
    "text": "Questions\n\nFunctions and index subsetting of vectors and data frames\nUse the code below to create the plt data frame.\n\nspp &lt;- c(\"tsugca\", \"tsugca\", \"betual\", \"acerru\", \"pinust\", \"pinust\", \"betual\", \"acerru\")\ndbh &lt;- c(15, 12, 6.6, 9.3, 28.1, 9.23, 15.3, 11.1)\nqual &lt;- c(\"ugs\", \"ags\", \"ags\", \"ugs\", \"ags\", \"ags\", \"ugs\", \"ags\")\nlive &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE)\n\nplt &lt;- data.frame(spp, dbh, qual, live)\n\n\nplt \nclass(plt) \nnames(plt) \nnrow(plt) \nncol(plt) \ndim(plt) \nlength(plt) \nplt[2:4,c(1,4)] \nplt[1:3,c(\"spp\", \"dbh\")] \nplt$qual \nclass(plt$qual) \nhead(plt) \ntail(plt) \nhead(plt, n=3) \ntail(plt, n=2) \nplt.cpy &lt;- plt \nplt.cpy[1:3,1] &lt;-  c(\"pinust\", \"pinust\", \"acerru\") \nplt.cpy[1:2,1] &lt;-  c(\"pinust\", \"pinust\", \"acerru\") \nplt.cpy$live[8] &lt;- FALSE \nplt.cpy[8,\"live\"] &lt;- TRUE \nrep(\"ugs\", nrow(plt.cpy)) \nplt.cpy[,\"status\"] &lt;- rep(\"ugs\", nrow(plt.cpy)) \n!TRUE \ncolnames(plt.cpy)[4] &lt;- \"dead\" \nplt.cpy$dead &lt;- !plt$live \nplt.cpy &lt;- plt[-(1:5),] \nplt.cpy &lt;- plt[-1:5,] \nplt.cpy &lt;- rbind(plt, c(\"some new spp\", 100, \"ugs\", FALSE)) \nplt.cpy &lt;- cbind(plt, 1:nrow(plt)) \ncolnames(plt.cpy)[ncol(plt.cpy)] &lt;- \"tree.indx\" \nstr(plt) \n\nRead the external data file FEF_trees.csv into R using the read.csv() function and call the resulting data frame fef.\n\nfef &lt;- read.csv(\"FEF_trees.csv\")\n\n\ndim(fef) \nhead(fef) \ntail(fef) \nsum(fef$height_ft) \nmax(fef$height_ft) \nmin(fef$height_ft) \nwhich.max(fef$height_ft) \nfef[which.max(fef$height_ft), ] \nfef[which.min(fef$height_ft), ] \nIn the previous two labs you did your work in a Quarto document. What are some ways the script you created for this lab are different from the Quarto document?"
  },
  {
    "objectID": "tickets/ticket_07.html",
    "href": "tickets/ticket_07.html",
    "title": "Lecture Ticket 7",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 5: sections 5.1"
  },
  {
    "objectID": "tickets/ticket_07.html#reading",
    "href": "tickets/ticket_07.html#reading",
    "title": "Lecture Ticket 7",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 5: sections 5.1"
  },
  {
    "objectID": "tickets/ticket_07.html#questions",
    "href": "tickets/ticket_07.html#questions",
    "title": "Lecture Ticket 7",
    "section": "Questions",
    "text": "Questions\nConsider the function:\n\nmy_function &lt;- function(x) {\n  y &lt;- x * 2\n  z &lt;- x + 4\n  return(y + z)\n}\n\n\nWhat would my_function(x = 10) return?\nWhat would my_function(x = 0) return?\nWhat would my_function(x = 5) + 10 return?"
  },
  {
    "objectID": "tickets/ticket_06.html",
    "href": "tickets/ticket_06.html",
    "title": "Lecture Ticket 6",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.7, 4.8 and 4.9"
  },
  {
    "objectID": "tickets/ticket_06.html#reading",
    "href": "tickets/ticket_06.html#reading",
    "title": "Lecture Ticket 6",
    "section": "",
    "text": "Read the following sections of IFDAR.\n\nChapter 4: sections 4.7, 4.8 and 4.9"
  },
  {
    "objectID": "tickets/ticket_06.html#questions",
    "href": "tickets/ticket_06.html#questions",
    "title": "Lecture Ticket 6",
    "section": "Questions",
    "text": "Questions\n\nYou learned about comparison and logical operators in the reading. In R, what is the operator for each of the following:\n\nequality,\ngreater than,\ngreater than or equal to,\nnot equal to,\nor,\nand.\n\nConsider the following vector:\n\n\nx &lt;- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nWhat does the following do to x?\n\nx[x &lt; 5] &lt;- 0"
  },
  {
    "objectID": "slides/w4d1.html",
    "href": "slides/w4d1.html",
    "title": "Logical subsetting vectors and data frames",
    "section": "",
    "text": "create, subset, and manipulate vectors and data frames\nuse comparison and logical operators\npractice combining logical tests to extract information from vectors and data frames\nstart thinking “inside out”"
  },
  {
    "objectID": "slides/w4d1.html#learning-objectives",
    "href": "slides/w4d1.html#learning-objectives",
    "title": "Logical subsetting vectors and data frames",
    "section": "",
    "text": "create, subset, and manipulate vectors and data frames\nuse comparison and logical operators\npractice combining logical tests to extract information from vectors and data frames\nstart thinking “inside out”"
  },
  {
    "objectID": "slides/w4d1.html#logical-subsetting",
    "href": "slides/w4d1.html#logical-subsetting",
    "title": "Logical subsetting vectors and data frames",
    "section": "Logical subsetting",
    "text": "Logical subsetting\nSo far we have directly specified the elements of vectors that we want to extract, for example spp[1] or dbh[length(dbh)] or spp[c(1,3,5)]. We have also subsetted data frame rows and columns, for example, plt[c(2,5),], plt[nrow(plt),], plt[,1:2], or plt[,c(\"spp\",\"dbh\")]. More commonly we want to extract elements that meet a condition, such as all trees greater than some minimum DBH or all trees of a given species. For this we use subsetting with logical vectors, see Section 6.6 in the course book.\nHere are the comparison operators:\n\nEqual: ==\nNot equal: !=\nGreater than: &gt;\nLess than: &lt;\nGreater than or equal to: &gt;=\nLess than or equal to: &lt;=\n\nLet’s give these operators a spin using the plt data frame.\nFirst on a single column, i.e., a vector subset operation.\n\nplt$qual[plt$qual == \"ags\"] # Understand this statement from the inside out!\n\n[1] \"ags\" \"ags\" \"ags\" \"ags\" \"ags\"\n\n\nGet all trees (i.e., rows) for species acerru.\n\nplt[plt$spp == \"acerru\", ]\n\n     spp  dbh qual  live\n4 acerru  9.3  ugs FALSE\n8 acerru 11.1  ags  TRUE\n\n\nGet all trees (i.e., rows) but for acerru.\n\nplt[plt$spp != \"acerru\", ]\n\n     spp   dbh qual  live\n1 tsugca 15.00  ugs  TRUE\n2 tsugca 12.00  ags  TRUE\n3 betual  6.60  ags  TRUE\n5 pinust 28.10  ags  TRUE\n6 pinust  9.23  ags  TRUE\n7 betual 15.30  ugs FALSE\n\n\nGet all trees (i.e., rows) with DBH greater than 10.\n\nplt[plt$dbh &gt; 10, ]\n\n     spp  dbh qual  live\n1 tsugca 15.0  ugs  TRUE\n2 tsugca 12.0  ags  TRUE\n5 pinust 28.1  ags  TRUE\n7 betual 15.3  ugs FALSE\n8 acerru 11.1  ags  TRUE\n\n\nGet all tree species with DBH greater than 10.\n\nplt[plt$dbh &gt; 10, \"spp\"]\n\n[1] \"tsugca\" \"tsugca\" \"pinust\" \"betual\" \"acerru\"\n\n\nFind all live trees. Note, why do I have plt$live and not plt$live == TRUE in the code below?\n\nplt[plt$live, ]\n\n     spp   dbh qual live\n1 tsugca 15.00  ugs TRUE\n2 tsugca 12.00  ags TRUE\n3 betual  6.60  ags TRUE\n5 pinust 28.10  ags TRUE\n6 pinust  9.23  ags TRUE\n8 acerru 11.10  ags TRUE"
  },
  {
    "objectID": "slides/w4d1.html#a-bit-on-logical-operators-and-subsetting",
    "href": "slides/w4d1.html#a-bit-on-logical-operators-and-subsetting",
    "title": "Logical subsetting vectors and data frames",
    "section": "A bit on logical operators and subsetting",
    "text": "A bit on logical operators and subsetting\nThere are some logical operators we haven’t seen yet, including the “and” operator and the “or” operator.\n\nand: &\nor: |\n\nThe & operator compares vector elements on its left and right to see if they match. If they are both TRUE, then & returns TRUE, otherwise FALSE. The | operator compares vector elements on its left and right to see if either of them are TRUE. If at least one is TRUE then | returns TRUE, otherwise if both are FALSE then FALSE is returned. These operations are applied for each element pair along the vectors. For example:\n\nc(FALSE, TRUE, FALSE) | c(TRUE, FALSE, FALSE)\n\n[1]  TRUE  TRUE FALSE\n\nc(FALSE, TRUE, FALSE) & c(TRUE, TRUE, FALSE)\n\n[1] FALSE  TRUE FALSE\n\n\nSo, say you want all acerru with DBH greater than 10.\n\nplt[plt$spp == \"acerru\" & plt$dbh &gt; 10, ]\n\n     spp  dbh qual live\n8 acerru 11.1  ags TRUE\n\n\nAnother useful logical operator is the ! (i.e., the exclamation point, referred to as the “bang” in coding slang) which negates or flips the logical value, so for example !FALSE is TRUE and !TRUE is FALSE (or !“I know what I’m talking about”).\nYet another very handy operator is %in% which is used to identify if an element occurs in a second vector. Or a substitute for a series of “or” statements. Consider the example below and consult the manual page via help(\"%in%\").\n\ndbh == 15 | dbh == 6 | dbh == 11\n\n[1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\ndbh %in% c(15, 6, 11)\n\n[1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nletters %in% c(\"a\", \"m\", \"q\", \"s\")\n\n [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n\n# letters == \"a\" | letters == \"m\" | letters = \"q\" | letters == \"s\" ## Find the error.\n\nSay you want acerru and tsugca with DBH greater than 10.\n\nplt[plt$spp %in% c(\"acerru\", \"tsugca\") & plt$dbh &gt; 10,]\n\n     spp  dbh qual live\n1 tsugca 15.0  ugs TRUE\n2 tsugca 12.0  ags TRUE\n8 acerru 11.1  ags TRUE\n\n\nNow, say you want acerru and tsugca with DBH greater than 10 and acceptable growing stock.\n\nplt[plt$spp %in% c(\"acerru\", \"tsugca\") & plt$dbh &gt; 10 & plt$qual == \"ags\",]\n\n     spp  dbh qual live\n2 tsugca 12.0  ags TRUE\n8 acerru 11.1  ags TRUE"
  },
  {
    "objectID": "slides/w4d1.html#your-turn",
    "href": "slides/w4d1.html#your-turn",
    "title": "Logical subsetting vectors and data frames",
    "section": "Your turn!",
    "text": "Your turn!\n\nFind all trees with DBH less than 9.5.\nFind all trees that are not tsugca (hint use the !).\nFind all dead trees (hint use the !).\nFind all live trees of unacceptable growing stock.\nFind all live betual and acerru that are of acceptable growing stock.\nMake up your own subsetting criteria."
  },
  {
    "objectID": "labs/lab_10_web.html",
    "href": "labs/lab_10_web.html",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "Welcome to Lab 10! Today, we’ll focus on the grammar of graphics and plotting with ggplot2. Part 1 shows you some plots created in ggplot2 and asks about their aesthetics, geometries, coordinate systems, scales, facets, and themes. Part 2 asks you to create some plots with ggplot2.\n\n\n\nUnderstand and be able to identify the components of a plot\nCreate beautiful graphics with ggplot2.\n\n\n\n\nUpload your rendered PDF (lab_10.pdf) and Quarto (lab_10.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_10_web.html#welcome",
    "href": "labs/lab_10_web.html#welcome",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "Welcome to Lab 10! Today, we’ll focus on the grammar of graphics and plotting with ggplot2. Part 1 shows you some plots created in ggplot2 and asks about their aesthetics, geometries, coordinate systems, scales, facets, and themes. Part 2 asks you to create some plots with ggplot2.\n\n\n\nUnderstand and be able to identify the components of a plot\nCreate beautiful graphics with ggplot2.\n\n\n\n\nUpload your rendered PDF (lab_10.pdf) and Quarto (lab_10.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF.\n\n\n\nList any collaborators you worked with below."
  },
  {
    "objectID": "labs/lab_10_web.html#exercise-0",
    "href": "labs/lab_10_web.html#exercise-0",
    "title": "Plotting with ggplot2",
    "section": "Exercise 0",
    "text": "Exercise 0\nLoad any packages you’ll need for this lab below."
  },
  {
    "objectID": "labs/lab_10_web.html#exercise-1",
    "href": "labs/lab_10_web.html#exercise-1",
    "title": "Plotting with ggplot2",
    "section": "Exercise 1",
    "text": "Exercise 1\nFor each plot presented in each part of this exercise, answer the following questions:\n\nWhat are the geometries used?\nWhat are the aesthetics used?\nWhat values (i.e. variables) are mapped each aesthetic?\nWhat coordinate system is used?\nWhat, if any, scales are used?\nAre there any facets? If so, what variable(s) are used to facet?\nWhat, if any, themes are used?\n\n\nPart (a)\n\n\n\n\n\n\n\n\n\n\n\nPart (b)\n\n\n\n\n\n\n\n\n\n\n\nPart (c)\n\n\n\n\n\n\n\n\n\n\n\nPart (d)\n\n\n\n\n\n\n\n\n\n\n\nPart (e)\n\n\n\n\n\n\n\n\n\n\n\nPart (f)\n\n\n\n\n\n\n\n\n\n\n\nPart (g)"
  },
  {
    "objectID": "labs/lab_10_web.html#exercise-2",
    "href": "labs/lab_10_web.html#exercise-2",
    "title": "Plotting with ggplot2",
    "section": "Exercise 2",
    "text": "Exercise 2\nUse the pdxTrees package to get the data for all parks in Portland. Then, filter the dataset to only contain rows that correspond to Irving Park, Sewallcrest Park, and Sellwood Riverfront Park. Call the resulting tibble parks. Hint: you can either call get_pdxTrees_parks() and then use a dplyr function to filter for only the parks we are interested in, or specify the park argument of get_pdxTrees_parks() when you call the function. Your resulting tibble should have 314 rows and 34 columns.\n\nparks\n\n# A tibble: 314 × 34\n   Longitude Latitude UserID Genus     Family    DBH Inventory_Date      Species\n       &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;  \n 1     -123.     45.5 1804   Acer      Sapind…  24.9 2017-08-12 00:00:00 ACPL   \n 2     -123.     45.5 1805   Quercus   Fagace…  56.9 2017-08-12 00:00:00 QURU   \n 3     -123.     45.5 1806   Quercus   Fagace…  43.8 2017-08-12 00:00:00 QURU   \n 4     -123.     45.5 5462   Acer      Sapind…  24.5 2017-08-12 00:00:00 ACPL   \n 5     -123.     45.5 5466   Acer      Sapind…  17.9 2017-08-12 00:00:00 ACPL   \n 6     -123.     45.5 5469   Acer      Sapind…  25.9 2017-08-12 00:00:00 ACPL   \n 7     -123.     45.5 5470   Quercus   Fagace…  47.9 2017-08-12 00:00:00 QURU   \n 8     -123.     45.5 5471   Pinus     Pinace…  24.4 2017-08-12 00:00:00 PIPO   \n 9     -123.     45.5 6011   Acer      Sapind…  31.2 2017-08-12 00:00:00 ACPL   \n10     -123.     45.5 6013   Crataegus Rosace…  11   2017-08-12 00:00:00 CRMO   \n# ℹ 304 more rows\n# ℹ 26 more variables: Common_Name &lt;chr&gt;, Condition &lt;chr&gt;, Tree_Height &lt;dbl&gt;,\n#   Crown_Width_NS &lt;dbl&gt;, Crown_Width_EW &lt;dbl&gt;, Crown_Base_Height &lt;dbl&gt;,\n#   Collected_By &lt;chr&gt;, Park &lt;chr&gt;, Scientific_Name &lt;chr&gt;,\n#   Functional_Type &lt;chr&gt;, Mature_Size &lt;fct&gt;, Native &lt;chr&gt;, Edible &lt;chr&gt;,\n#   Nuisance &lt;chr&gt;, Structural_Value &lt;dbl&gt;, Carbon_Storage_lb &lt;dbl&gt;,\n#   Carbon_Storage_value &lt;dbl&gt;, Carbon_Sequestration_lb &lt;dbl&gt;, …"
  },
  {
    "objectID": "labs/lab_10_web.html#exercise-3",
    "href": "labs/lab_10_web.html#exercise-3",
    "title": "Plotting with ggplot2",
    "section": "Exercise 3",
    "text": "Exercise 3\nRecreate the plots from Exercise 1.\n\nPart (a)\n\n\nPart (b)\n\n\nPart (c)\nHINT: the colors used were “goldenrod”, “steelblue”, and “forestgreen”.\n\n\nPart (d)\n\n\nPart (e)\nHINT: you can fill a bar plot by another variable by specifying a fill aesthetic mapping.\n\n\nPart (f)\nHINT: the theme used here is from the ggthemes package.\n\n\nPart (g)\nHINT: you’ll need to filter the data for a particular park."
  },
  {
    "objectID": "labs/lab_10_web.html#exercise-4",
    "href": "labs/lab_10_web.html#exercise-4",
    "title": "Plotting with ggplot2",
    "section": "Exercise 4",
    "text": "Exercise 4\nCreate your own plot from the parks data. Your plot should, at a minimum, map at least three variables to geometries, label its aesthetics nicely, have a title, and have a theme different from ggplot2’s default. Have fun with it! Feel free to choose different parks as well if you’d like."
  },
  {
    "objectID": "slides/w10d2.html#annoucements",
    "href": "slides/w10d2.html#annoucements",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm II is Thursday, November 14th.\nMaterial on the midterm will include all material through Week 11."
  },
  {
    "objectID": "slides/w10d2.html#agenda",
    "href": "slides/w10d2.html#agenda",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Agenda",
    "text": "Agenda\n\nReshaping data with tidyr\n\npivot_longer() and pivot_wider()\nunite()\nseparate_wider_delim()\ncomplete()\n\nApplication: stand and stock tables"
  },
  {
    "objectID": "slides/w10d2.html#the-tidyr-package",
    "href": "slides/w10d2.html#the-tidyr-package",
    "title": "Reshaping data with tidyr, part 2",
    "section": "The tidyr package",
    "text": "The tidyr package\n\n\nThe tidyr package allows us to transform data from long to wide formats, and back.\nA key use of the tidyr package is getting data in tidy format.\nBut what is tidy format?"
  },
  {
    "objectID": "slides/w10d2.html#tidy-data",
    "href": "slides/w10d2.html#tidy-data",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Tidy data",
    "text": "Tidy data\n“Tidy data” or “tidy format” is a formal concept of how we organize data for analyses, in particular, with tidy data:\n\n\nEach row of the data correspond to a single observation, and\nEach column of the data correspond to a variable."
  },
  {
    "objectID": "slides/w10d2.html#tidying-data-with-tidyr",
    "href": "slides/w10d2.html#tidying-data-with-tidyr",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Tidying data with tidyr",
    "text": "Tidying data with tidyr\nConsider the face dataset from IFDAR:\n\nlibrary(tidyverse)\nface &lt;- read_csv(\"../labs/datasets/FACE/FACE_aspen_core_growth.csv\") %&gt;%\n  select(Rep, Treat, Clone, ID = `ID #`,\n        contains(as.character(2001:2005)) & contains(\"Height\"))\nface\n\n# A tibble: 1,991 × 9\n     Rep Treat Clone    ID `2001_Height` `2002_Height` `2003_Height`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1     1     1     8    45            NA            NA            NA\n 2     1     1   216    44           547           622           715\n 3     1     1     8    43           273           275           305\n 4     1     1   216    42           526           619           720\n 5     1     1   216    54           328           341           364\n 6     1     1   271    55           543           590           634\n 7     1     1   271    56           450           502           587\n 8     1     1     8    57           217           227           256\n 9     1     1   259    58           158           155            NA\n10     1     1   271    59           230           241           260\n# ℹ 1,981 more rows\n# ℹ 2 more variables: `2004_Height` &lt;dbl&gt;, `2005_Height` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w10d2.html#why-the-long-face",
    "href": "slides/w10d2.html#why-the-long-face",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = c(\"2001_Height\", \"2002_Height\", \"2003_Height\", \n             \"2004_Height\", \"2005_Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")"
  },
  {
    "objectID": "slides/w10d2.html#why-the-long-face-1",
    "href": "slides/w10d2.html#why-the-long-face-1",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = c(\"2001_Height\", \"2002_Height\", \"2003_Height\", \n             \"2004_Height\", \"2005_Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")"
  },
  {
    "objectID": "slides/w10d2.html#why-the-long-face-2",
    "href": "slides/w10d2.html#why-the-long-face-2",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = contains(\"Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")\n\n\nA cleaner way to select these columns is to use dplyr’s contains() function."
  },
  {
    "objectID": "slides/w10d2.html#why-the-long-face-3",
    "href": "slides/w10d2.html#why-the-long-face-3",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows\n\n\n\nTo get tidy data!"
  },
  {
    "objectID": "slides/w10d2.html#going-back-to-wide-data",
    "href": "slides/w10d2.html#going-back-to-wide-data",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Going (back) to wide data",
    "text": "Going (back) to wide data\n\n\nSometimes, we need to “widen” a dataset to get it into tidy format.\nFor this example, we will just widen the face_long dataset back to its original form.\ntidyr has an aptly named function, pivot_wider().\nKey arguments of pivot_wider():\n\n.data: the tibble to widen,\nnames_from: the column that contains values which will be assigned as the new column names,\nvalues_from: the column that contains values which will be assigned as the new column values."
  },
  {
    "objectID": "slides/w10d2.html#pivoting-wider",
    "href": "slides/w10d2.html#pivoting-wider",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Pivoting wider",
    "text": "Pivoting wider\n\nface_wide &lt;- face_long %&gt;%\n  pivot_wider(names_from = \"Year_Type\", values_from = \"Height_cm\")\n\nall_equal(face, face_wide)\n\n[1] TRUE\n\n\n\n\nThis results in the same tibble that we started with!"
  },
  {
    "objectID": "slides/w10d2.html#other-useful-tidyr-functions",
    "href": "slides/w10d2.html#other-useful-tidyr-functions",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Other useful tidyr functions",
    "text": "Other useful tidyr functions\n\n\nunite() for pasteing column values together with specified seperators,\nThe separate_wider_*() family: for splitting columns into multiple new columns:\n\nseparate_wider_delim(): separate by delimiter\nseparate_wider_position(): separate by position\nseparate_wider_regex(): separate by regular expression"
  },
  {
    "objectID": "slides/w10d2.html#unite-examples",
    "href": "slides/w10d2.html#unite-examples",
    "title": "Reshaping data with tidyr, part 2",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#unite-examples-1",
    "href": "slides/w10d2.html#unite-examples-1",
    "title": "Reshaping data with tidyr, part 2",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \"_\")\n\n# A tibble: 9,955 × 4\n   Design     ID Year_Type   Height_cm\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1_1_8      45 2001_Height        NA\n 2 1_1_8      45 2002_Height        NA\n 3 1_1_8      45 2003_Height        NA\n 4 1_1_8      45 2004_Height        NA\n 5 1_1_8      45 2005_Height        NA\n 6 1_1_216    44 2001_Height       547\n 7 1_1_216    44 2002_Height       622\n 8 1_1_216    44 2003_Height       715\n 9 1_1_216    44 2004_Height       716\n10 1_1_216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#unite-examples-2",
    "href": "slides/w10d2.html#unite-examples-2",
    "title": "Reshaping data with tidyr, part 2",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \".\")\n\n# A tibble: 9,955 × 4\n   Design     ID Year_Type   Height_cm\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1.1.8      45 2001_Height        NA\n 2 1.1.8      45 2002_Height        NA\n 3 1.1.8      45 2003_Height        NA\n 4 1.1.8      45 2004_Height        NA\n 5 1.1.8      45 2005_Height        NA\n 6 1.1.216    44 2001_Height       547\n 7 1.1.216    44 2002_Height       622\n 8 1.1.216    44 2003_Height       715\n 9 1.1.216    44 2004_Height       716\n10 1.1.216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#unite-examples-3",
    "href": "slides/w10d2.html#unite-examples-3",
    "title": "Reshaping data with tidyr, part 2",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long_abc &lt;- face_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \"abc\")\nface_long_abc\n\n# A tibble: 9,955 × 4\n   Design         ID Year_Type   Height_cm\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1abc1abc8      45 2001_Height        NA\n 2 1abc1abc8      45 2002_Height        NA\n 3 1abc1abc8      45 2003_Height        NA\n 4 1abc1abc8      45 2004_Height        NA\n 5 1abc1abc8      45 2005_Height        NA\n 6 1abc1abc216    44 2001_Height       547\n 7 1abc1abc216    44 2002_Height       622\n 8 1abc1abc216    44 2003_Height       715\n 9 1abc1abc216    44 2004_Height       716\n10 1abc1abc216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#separate_wider_delim-examples",
    "href": "slides/w10d2.html#separate_wider_delim-examples",
    "title": "Reshaping data with tidyr, part 2",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long_abc\n\n# A tibble: 9,955 × 4\n   Design         ID Year_Type   Height_cm\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1abc1abc8      45 2001_Height        NA\n 2 1abc1abc8      45 2002_Height        NA\n 3 1abc1abc8      45 2003_Height        NA\n 4 1abc1abc8      45 2004_Height        NA\n 5 1abc1abc8      45 2005_Height        NA\n 6 1abc1abc216    44 2001_Height       547\n 7 1abc1abc216    44 2002_Height       622\n 8 1abc1abc216    44 2003_Height       715\n 9 1abc1abc216    44 2004_Height       716\n10 1abc1abc216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#separate_wider_delim-examples-1",
    "href": "slides/w10d2.html#separate_wider_delim-examples-1",
    "title": "Reshaping data with tidyr, part 2",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long_abc %&gt;%\n  separate_wider_delim(cols = \"Design\", \n                       delim = \"abc\",\n                       names = c(\"Rep\", \"Treat\", \"Clone\"))\n\n# A tibble: 9,955 × 6\n   Rep   Treat Clone    ID Year_Type   Height_cm\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1     1     8        45 2001_Height        NA\n 2 1     1     8        45 2002_Height        NA\n 3 1     1     8        45 2003_Height        NA\n 4 1     1     8        45 2004_Height        NA\n 5 1     1     8        45 2005_Height        NA\n 6 1     1     216      44 2001_Height       547\n 7 1     1     216      44 2002_Height       622\n 8 1     1     216      44 2003_Height       715\n 9 1     1     216      44 2004_Height       716\n10 1     1     216      44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#separate_wider_delim-examples-2",
    "href": "slides/w10d2.html#separate_wider_delim-examples-2",
    "title": "Reshaping data with tidyr, part 2",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows\n\n\n\nface_long %&gt;%\n  separate_wider_delim(cols = \"Year_Type\", \n                       delim = \"_\",\n                       names = c(\"Year\", NA))\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year  Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1     1     1     8    45 2001         NA\n 2     1     1     8    45 2002         NA\n 3     1     1     8    45 2003         NA\n 4     1     1     8    45 2004         NA\n 5     1     1     8    45 2005         NA\n 6     1     1   216    44 2001        547\n 7     1     1   216    44 2002        622\n 8     1     1   216    44 2003        715\n 9     1     1   216    44 2004        716\n10     1     1   216    44 2005        817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d2.html#the-complete-function",
    "href": "slides/w10d2.html#the-complete-function",
    "title": "Reshaping data with tidyr, part 2",
    "section": "The complete() function",
    "text": "The complete() function\nThe complete() function is used for filling in values that are not explicitly in the dataset. Let’s consider some toy data for an example:\n\ntrees &lt;- tibble(\n  plot = c(1,1,1,2,2,2,3,3),\n  species = c(\"douglas-fir\", \"western red-cedar\", \"pacific madrone\",\n              \"douglas-fir\", \"douglas-fir\", \"douglas-fir\",\n              \"douglas-fir\", \"western red-cedar\"),\n  dbh = c(10, 12, 6, 13, 10, 8, 9, 14)\n)\ntrees\n\n# A tibble: 8 × 3\n   plot species             dbh\n  &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1     1 douglas-fir          10\n2     1 western red-cedar    12\n3     1 pacific madrone       6\n4     2 douglas-fir          13\n5     2 douglas-fir          10\n6     2 douglas-fir           8\n7     3 douglas-fir           9\n8     3 western red-cedar    14"
  },
  {
    "objectID": "slides/w10d2.html#compute-total-dbh-by-species-and-plot",
    "href": "slides/w10d2.html#compute-total-dbh-by-species-and-plot",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Compute total DBH by species and plot",
    "text": "Compute total DBH by species and plot\n\ntrees %&gt;%\n  group_by(plot, species) %&gt;%\n  summarize(total_DBH = sum(dbh))\n\n# A tibble: 6 × 3\n# Groups:   plot [3]\n   plot species           total_DBH\n  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1     1 douglas-fir              10\n2     1 pacific madrone           6\n3     1 western red-cedar        12\n4     2 douglas-fir              31\n5     3 douglas-fir               9\n6     3 western red-cedar        14\n\n\n\n\nWhat’s the problem here?\nEvery possible species-plot observation doesn’t exist!\nexample: what should total DBH of western red-cedars be on plot 2?"
  },
  {
    "objectID": "slides/w10d2.html#we-have-to-complete-the-dataset",
    "href": "slides/w10d2.html#we-have-to-complete-the-dataset",
    "title": "Reshaping data with tidyr, part 2",
    "section": "We have to complete() the dataset!",
    "text": "We have to complete() the dataset!\n\ntrees %&gt;%\n  complete(plot, species) \n\n# A tibble: 11 × 3\n    plot species             dbh\n   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1     1 douglas-fir          10\n 2     1 pacific madrone       6\n 3     1 western red-cedar    12\n 4     2 douglas-fir          13\n 5     2 douglas-fir          10\n 6     2 douglas-fir           8\n 7     2 pacific madrone      NA\n 8     2 western red-cedar    NA\n 9     3 douglas-fir           9\n10     3 pacific madrone      NA\n11     3 western red-cedar    14\n\n\n\n\nNow there is a row for every species-plot combination,\nBut by default, complete() filled the values as NA.\nWe can change that!"
  },
  {
    "objectID": "slides/w10d2.html#we-have-to-complete-the-dataset-1",
    "href": "slides/w10d2.html#we-have-to-complete-the-dataset-1",
    "title": "Reshaping data with tidyr, part 2",
    "section": "We have to complete() the dataset!",
    "text": "We have to complete() the dataset!\n\ntrees %&gt;%\n  complete(plot, species,\n           fill = list(dbh = 0))\n\n# A tibble: 11 × 3\n    plot species             dbh\n   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1     1 douglas-fir          10\n 2     1 pacific madrone       6\n 3     1 western red-cedar    12\n 4     2 douglas-fir          13\n 5     2 douglas-fir          10\n 6     2 douglas-fir           8\n 7     2 pacific madrone       0\n 8     2 western red-cedar     0\n 9     3 douglas-fir           9\n10     3 pacific madrone       0\n11     3 western red-cedar    14"
  },
  {
    "objectID": "slides/w10d2.html#now-we-can-compute-totals-for-each-combination",
    "href": "slides/w10d2.html#now-we-can-compute-totals-for-each-combination",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Now we can compute totals for each combination!",
    "text": "Now we can compute totals for each combination!\n\ntrees %&gt;%\n  complete(plot, species,\n           fill = list(dbh = 0)) %&gt;%\n  group_by(plot, species) %&gt;%\n  summarize(total_DBH = sum(dbh))\n\n# A tibble: 9 × 3\n# Groups:   plot [3]\n   plot species           total_DBH\n  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1     1 douglas-fir              10\n2     1 pacific madrone           6\n3     1 western red-cedar        12\n4     2 douglas-fir              31\n5     2 pacific madrone           0\n6     2 western red-cedar         0\n7     3 douglas-fir               9\n8     3 pacific madrone           0\n9     3 western red-cedar        14"
  },
  {
    "objectID": "slides/w10d2.html#stand-and-stock-tables",
    "href": "slides/w10d2.html#stand-and-stock-tables",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Stand and Stock tables",
    "text": "Stand and Stock tables\nStand tables:\n\n\nSummarize a quantitative discrete variable (e.g., stem count)\nSummaries are shown grouped by one or more categorical variable (e.g., size class or species).\n\n\nStock tables:\n\n\nSummarizes a quantitative continuous variable (e.g., volume, weight, or basal area)\nSummaries are shown grouped by one or more categorical variable (e.g., size class or species)."
  },
  {
    "objectID": "slides/w10d2.html#common-standstock-tables-in-forestry",
    "href": "slides/w10d2.html#common-standstock-tables-in-forestry",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Common Stand/Stock tables in forestry",
    "text": "Common Stand/Stock tables in forestry\nIn forestry applications, stand and stock tables are most often grouped by DBH class and species."
  },
  {
    "objectID": "slides/w10d2.html#data-used-to-create-stand-and-stock-tables-in-forestry",
    "href": "slides/w10d2.html#data-used-to-create-stand-and-stock-tables-in-forestry",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Data used to create stand and stock tables in forestry",
    "text": "Data used to create stand and stock tables in forestry\nIn forestry applications, stand and stock tables are most often grouped by DBH class and species."
  },
  {
    "objectID": "slides/w10d2.html#stand-table-derived-from-the-data",
    "href": "slides/w10d2.html#stand-table-derived-from-the-data",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Stand table derived from the data",
    "text": "Stand table derived from the data\nIn forestry applications, stand and stock tables are most often grouped by DBH class and species.\n\n\n\nIs this table tidy?"
  },
  {
    "objectID": "slides/w10d2.html#stock-table-derived-from-the-data",
    "href": "slides/w10d2.html#stock-table-derived-from-the-data",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Stock table derived from the data",
    "text": "Stock table derived from the data\nIn forestry applications, stand and stock tables are most often grouped by DBH class and species.\n\n\n\nIs this table tidy?"
  },
  {
    "objectID": "slides/w10d2.html#building-these-stand-and-stock-tables-in-r",
    "href": "slides/w10d2.html#building-these-stand-and-stock-tables-in-r",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Building these stand and stock tables in R",
    "text": "Building these stand and stock tables in R\nWe load the data:\n\ntrees &lt;- tibble(\n  species = c(\"Abies balsamea\", \"Betula papyrifera\", \n              \"Betula papyrifera\", \"Pinus strobus\",\n              \"Pinus strobus\", \"Pinus strobus\"),\n  DBH_in = c(11.3, 14.8, 15.4, 9.8, 10.7, 13.1),\n  trees_ac = 8,\n  vol_cu_ft_ac = c(142.8, 269.6, 293.7, 116.3, 143.6, 231.9)\n)\ntrees\n\n# A tibble: 6 × 4\n  species           DBH_in trees_ac vol_cu_ft_ac\n  &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;\n1 Abies balsamea      11.3        8         143.\n2 Betula papyrifera   14.8        8         270.\n3 Betula papyrifera   15.4        8         294.\n4 Pinus strobus        9.8        8         116.\n5 Pinus strobus       10.7        8         144.\n6 Pinus strobus       13.1        8         232."
  },
  {
    "objectID": "slides/w10d2.html#adding-dbh-class",
    "href": "slides/w10d2.html#adding-dbh-class",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Adding DBH class",
    "text": "Adding DBH class\n\nests &lt;- trees %&gt;%\n  mutate(DBH_class = cut_width(DBH_in, width = 4))\nests\n\n# A tibble: 6 × 5\n  species           DBH_in trees_ac vol_cu_ft_ac DBH_class\n  &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt; &lt;fct&gt;    \n1 Abies balsamea      11.3        8         143. (10,14]  \n2 Betula papyrifera   14.8        8         270. (14,18]  \n3 Betula papyrifera   15.4        8         294. (14,18]  \n4 Pinus strobus        9.8        8         116. [6,10]   \n5 Pinus strobus       10.7        8         144. (10,14]  \n6 Pinus strobus       13.1        8         232. (10,14]"
  },
  {
    "objectID": "slides/w10d2.html#complete-the-data",
    "href": "slides/w10d2.html#complete-the-data",
    "title": "Reshaping data with tidyr, part 2",
    "section": "complete() the data",
    "text": "complete() the data\n\nests &lt;- ests %&gt;%\n  complete(species, DBH_class, \n           fill = list(trees_ac = 0, vol_cu_ft_ac = 0))\nests\n\n# A tibble: 11 × 5\n   species           DBH_class DBH_in trees_ac vol_cu_ft_ac\n   &lt;chr&gt;             &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;\n 1 Abies balsamea    [6,10]      NA          0           0 \n 2 Abies balsamea    (10,14]     11.3        8         143.\n 3 Abies balsamea    (14,18]     NA          0           0 \n 4 Betula papyrifera [6,10]      NA          0           0 \n 5 Betula papyrifera (10,14]     NA          0           0 \n 6 Betula papyrifera (14,18]     14.8        8         270.\n 7 Betula papyrifera (14,18]     15.4        8         294.\n 8 Pinus strobus     [6,10]       9.8        8         116.\n 9 Pinus strobus     (10,14]     10.7        8         144.\n10 Pinus strobus     (10,14]     13.1        8         232.\n11 Pinus strobus     (14,18]     NA          0           0 \n\n\n\n\nWhat happened here?\nNow each species/DBH_class combination has a row associated with it"
  },
  {
    "objectID": "slides/w10d2.html#compute-our-variables-of-interest",
    "href": "slides/w10d2.html#compute-our-variables-of-interest",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Compute our variables of interest",
    "text": "Compute our variables of interest\n\nests &lt;- ests %&gt;% \n  group_by(species, DBH_class) %&gt;%\n  summarize(sum_trees_ac = sum(trees_ac),\n            sum_vol_cu_ft_ac = sum(vol_cu_ft_ac))\nests\n\n# A tibble: 9 × 4\n# Groups:   species [3]\n  species           DBH_class sum_trees_ac sum_vol_cu_ft_ac\n  &lt;chr&gt;             &lt;fct&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Abies balsamea    [6,10]               0               0 \n2 Abies balsamea    (10,14]              8             143.\n3 Abies balsamea    (14,18]              0               0 \n4 Betula papyrifera [6,10]               0               0 \n5 Betula papyrifera (10,14]              0               0 \n6 Betula papyrifera (14,18]             16             563.\n7 Pinus strobus     [6,10]               8             116.\n8 Pinus strobus     (10,14]             16             376.\n9 Pinus strobus     (14,18]              0               0"
  },
  {
    "objectID": "slides/w10d2.html#make-the-stand-table",
    "href": "slides/w10d2.html#make-the-stand-table",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Make the stand table",
    "text": "Make the stand table\n\nstand &lt;- ests %&gt;% \n  pivot_wider(id_cols = species, \n              names_from = DBH_class,\n              values_from = sum_trees_ac)\n\nstand\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species           `[6,10]` `(10,14]` `(14,18]`\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Abies balsamea           0         8         0\n2 Betula papyrifera        0         0        16\n3 Pinus strobus            8        16         0"
  },
  {
    "objectID": "slides/w10d2.html#make-the-stock-table",
    "href": "slides/w10d2.html#make-the-stock-table",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Make the stock table",
    "text": "Make the stock table\n\nstock &lt;- ests %&gt;% \n  pivot_wider(id_cols = species, \n              names_from = DBH_class,\n              values_from = sum_vol_cu_ft_ac)\n\nstock\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species           `[6,10]` `(10,14]` `(14,18]`\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Abies balsamea          0       143.        0 \n2 Betula papyrifera       0         0       563.\n3 Pinus strobus         116.      376.        0"
  },
  {
    "objectID": "slides/w10d2.html#all-at-once-stand-table",
    "href": "slides/w10d2.html#all-at-once-stand-table",
    "title": "Reshaping data with tidyr, part 2",
    "section": "All at once: stand table",
    "text": "All at once: stand table\n\ntrees %&gt;%\n  mutate(DBH_class = cut_width(DBH_in, width = 4)) %&gt;%\n  complete(species, DBH_class, \n           fill = list(trees_ac = 0, vol_cu_ft_ac = 0)) %&gt;%\n  group_by(species, DBH_class) %&gt;%\n  summarize(sum_trees_ac = sum(trees_ac),\n            sum_vol_cu_ft_ac = sum(vol_cu_ft_ac)) %&gt;%\n  pivot_wider(id_cols = species, \n              names_from = DBH_class,\n              values_from = sum_trees_ac)\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species           `[6,10]` `(10,14]` `(14,18]`\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Abies balsamea           0         8         0\n2 Betula papyrifera        0         0        16\n3 Pinus strobus            8        16         0"
  },
  {
    "objectID": "slides/w10d2.html#all-at-once-stock-table",
    "href": "slides/w10d2.html#all-at-once-stock-table",
    "title": "Reshaping data with tidyr, part 2",
    "section": "All at once: stock table",
    "text": "All at once: stock table\n\ntrees %&gt;%\n  mutate(DBH_class = cut_width(DBH_in, width = 4)) %&gt;%\n  complete(species, DBH_class, \n           fill = list(trees_ac = 0, vol_cu_ft_ac = 0)) %&gt;%\n  group_by(species, DBH_class) %&gt;%\n  summarize(sum_trees_ac = sum(trees_ac),\n            sum_vol_cu_ft_ac = sum(vol_cu_ft_ac)) %&gt;%\n  pivot_wider(id_cols = species, \n              names_from = DBH_class,\n              values_from = sum_vol_cu_ft_ac)\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species           `[6,10]` `(10,14]` `(14,18]`\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Abies balsamea          0       143.        0 \n2 Betula papyrifera       0         0       563.\n3 Pinus strobus         116.      376.        0"
  },
  {
    "objectID": "slides/w10d2.html#next-time",
    "href": "slides/w10d2.html#next-time",
    "title": "Reshaping data with tidyr, part 2",
    "section": "Next time",
    "text": "Next time\n\nThe grammar of graphics"
  },
  {
    "objectID": "slides/w11d2.html#annoucements",
    "href": "slides/w11d2.html#annoucements",
    "title": "More graphics with ggplot2",
    "section": "Annoucements",
    "text": "Annoucements\n\nUPDATE: Midterm II is moved to Thursday, November 21st, during lab time.\nMaterial on the midterm will include all material through Week 12.\nThe midterm will be of similar form to the last midterm.\nClosed materials, but you are allowed one 8.5” x 11” sheet of paper, double-sided, hand-written note sheet."
  },
  {
    "objectID": "slides/w11d2.html#agenda",
    "href": "slides/w11d2.html#agenda",
    "title": "More graphics with ggplot2",
    "section": "Agenda",
    "text": "Agenda\n\nFinal project\nReview components of a graphic (i.e. the grammar of graphics)\nComposing a graphic: bar plots, histograms, titles, labels, aesthetics vs. set values"
  },
  {
    "objectID": "slides/w11d2.html#what-is-a-graphic-made-up-of",
    "href": "slides/w11d2.html#what-is-a-graphic-made-up-of",
    "title": "More graphics with ggplot2",
    "section": "What is a graphic made up of?",
    "text": "What is a graphic made up of?\n\n\nData, and\nVisual components"
  },
  {
    "objectID": "slides/w11d2.html#visual-components",
    "href": "slides/w11d2.html#visual-components",
    "title": "More graphics with ggplot2",
    "section": "Visual components",
    "text": "Visual components\nIn order to create a graphic or “plot”, one must choose visualize the variables of the data to the attributes of the plot. Further, one must choose the cosmetic properties of the plot.\nLayers can be specified as a variety of components:\n\n\ngeom: the geometric shape that the data are mapped to,\n\nExamples: point, line, bar, text, path, …\n\naesthetics: The visual properties of the geom.\n\nExamples: x-position, y-position, color, fill, shape\n\ncoord: coordinate system,\n\nExamples: Cartesian, polar, lon/lat projection\n\nscale: how data are mapped to certain aesthetics.\n\nExample: which colors or shapes to use?\n\n\nfacet: a technique to split plots into multiple panels,\nthemes: the cosmetic attributes of the plot."
  },
  {
    "objectID": "slides/w11d2.html#again-consider-the-fef-dataset",
    "href": "slides/w11d2.html#again-consider-the-fef-dataset",
    "title": "More graphics with ggplot2",
    "section": "Again, consider the fef dataset",
    "text": "Again, consider the fef dataset\n\nlibrary(tidyverse)\nfef &lt;- read_csv(\"../labs/datasets/FEF_trees.csv\")\nfef\n\n# A tibble: 88 × 18\n   watershed  year  plot species     dbh_in height_ft stem_green_kg top_green_kg\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1         3  1991    29 Acer rubrum    6        48            92.2         13.1\n 2         3  1991    33 Acer rubrum    6.9      48           102.          23.1\n 3         3  1991    35 Acer rubrum    6.4      48           124.           8.7\n 4         3  1991    39 Acer rubrum    6.5      49            91.7         39  \n 5         3  1991    44 Acer rubrum    7.2      51           186.           8.9\n 6         3  1992    26 Acer rubrum    3.1      40            20.8          0.9\n 7         3  1992    26 Acer rubrum    2        30.5           5.6          0.9\n 8         3  1992    26 Acer rubrum    4.1      50            54.1          8.6\n 9         3  1992    48 Acer rubrum    2.4      28            10.2          0.7\n10         3  1992    48 Acer rubrum    2.7      40.4          20.2          5  \n# ℹ 78 more rows\n# ℹ 10 more variables: smbranch_green_kg &lt;dbl&gt;, lgbranch_green_kg &lt;dbl&gt;,\n#   allwoody_green_kg &lt;dbl&gt;, leaves_green_kg &lt;dbl&gt;, stem_dry_kg &lt;dbl&gt;,\n#   top_dry_kg &lt;dbl&gt;, smbranch_dry_kg &lt;dbl&gt;, lgbranch_dry_kg &lt;dbl&gt;,\n#   allwoody_dry_kg &lt;dbl&gt;, leaves_dry_kg &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w11d2.html#geometry-bar",
    "href": "slides/w11d2.html#geometry-bar",
    "title": "More graphics with ggplot2",
    "section": "Geometry: bar",
    "text": "Geometry: bar\n\nggplot(data = fef) +\n  geom_bar(mapping = aes(x = species))"
  },
  {
    "objectID": "slides/w11d2.html#geometry-bar-1",
    "href": "slides/w11d2.html#geometry-bar-1",
    "title": "More graphics with ggplot2",
    "section": "Geometry: bar",
    "text": "Geometry: bar\n\nggplot(data = fef) +\n  geom_bar(mapping = aes(x = species))"
  },
  {
    "objectID": "slides/w11d2.html#geometry-histogram",
    "href": "slides/w11d2.html#geometry-histogram",
    "title": "More graphics with ggplot2",
    "section": "Geometry: histogram",
    "text": "Geometry: histogram\n\nggplot(data = fef) +\n  geom_histogram(mapping = aes(x = dbh_in))"
  },
  {
    "objectID": "slides/w11d2.html#geometry-histogram-1",
    "href": "slides/w11d2.html#geometry-histogram-1",
    "title": "More graphics with ggplot2",
    "section": "Geometry: histogram",
    "text": "Geometry: histogram\n\nggplot(data = fef) +\n  geom_histogram(mapping = aes(x = dbh_in),\n                 bins = 10)"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot",
    "href": "slides/w11d2.html#lets-create-a-plot",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nFirst, our canvas:\n\nggplot()"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-output",
    "href": "slides/w11d2.html#lets-create-a-plot-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-1",
    "href": "slides/w11d2.html#lets-create-a-plot-1",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nThen, we specify the data:\n\nggplot(data = fef)"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-1-output",
    "href": "slides/w11d2.html#lets-create-a-plot-1-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-2",
    "href": "slides/w11d2.html#lets-create-a-plot-2",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nThen we specify some aesthetic mappings\n\nggplot(data = fef, mapping = aes(x = dbh_in, y = height_ft))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-2-output",
    "href": "slides/w11d2.html#lets-create-a-plot-2-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-3",
    "href": "slides/w11d2.html#lets-create-a-plot-3",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nWe’ve now specified that we will map these aesthetics to “points”.\n\nggplot(data = fef, mapping = aes(x = dbh_in, y = height_ft)) +\n  geom_point()"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-3-output",
    "href": "slides/w11d2.html#lets-create-a-plot-3-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-4",
    "href": "slides/w11d2.html#lets-create-a-plot-4",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nYou can also specify the aesthetic mapping in the geometry layer:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, y = height_ft))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-4-output",
    "href": "slides/w11d2.html#lets-create-a-plot-4-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-5",
    "href": "slides/w11d2.html#lets-create-a-plot-5",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nWe can look at a third variable by adding another aesthetic mapping:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = species))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-5-output",
    "href": "slides/w11d2.html#lets-create-a-plot-5-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-6",
    "href": "slides/w11d2.html#lets-create-a-plot-6",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nColor scales are different for continuous vs discrete data:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = stem_dry_kg))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-6-output",
    "href": "slides/w11d2.html#lets-create-a-plot-6-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-7",
    "href": "slides/w11d2.html#lets-create-a-plot-7",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nRather than mapping stem_dry_kg to color, we could map it to size:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           size = stem_dry_kg))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-7-output",
    "href": "slides/w11d2.html#lets-create-a-plot-7-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-8",
    "href": "slides/w11d2.html#lets-create-a-plot-8",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nThis is different than setting size outside of the aesthetics:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft),\n             size = 5)"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-8-output",
    "href": "slides/w11d2.html#lets-create-a-plot-8-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-9",
    "href": "slides/w11d2.html#lets-create-a-plot-9",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           size = stem_dry_kg))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-9-output",
    "href": "slides/w11d2.html#lets-create-a-plot-9-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-10",
    "href": "slides/w11d2.html#lets-create-a-plot-10",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = stem_dry_kg))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-10-output",
    "href": "slides/w11d2.html#lets-create-a-plot-10-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-11",
    "href": "slides/w11d2.html#lets-create-a-plot-11",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = stem_dry_kg)) + \n  scale_colour_distiller(type = \"seq\", palette = 3)"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-11-output",
    "href": "slides/w11d2.html#lets-create-a-plot-11-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-12",
    "href": "slides/w11d2.html#lets-create-a-plot-12",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = stem_dry_kg),\n             size = 2.5) +\n  scale_colour_distiller(type = \"seq\", palette = 3) + \n  labs(x = \"DBH (inches)\",\n       y = \"Height (feet)\",\n       fill = \"Dry Stem \\nWeight (kg)\",\n       title = \"DBH, Height, and Stem weight \\nin the Fernow Experimental Forest\")"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-12-output",
    "href": "slides/w11d2.html#lets-create-a-plot-12-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-13",
    "href": "slides/w11d2.html#lets-create-a-plot-13",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           color = stem_dry_kg),\n             size = 2.5,\n             shape = 21) +\n  scale_colour_distiller(type = \"seq\", palette = 3) + \n  labs(x = \"DBH (inches)\",\n       y = \"Height (feet)\",\n       fill = \"Dry Stem \\nWeight (kg)\",\n       title = \"DBH, Height, and Stem weight \\nin the Fernow Experimental Forest\")"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-13-output",
    "href": "slides/w11d2.html#lets-create-a-plot-13-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-14",
    "href": "slides/w11d2.html#lets-create-a-plot-14",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           fill = stem_dry_kg),\n             size = 2.5,\n             shape = 21) +\n  scale_fill_distiller(type = \"seq\", palette = 3) + \n  labs(x = \"DBH (inches)\",\n       y = \"Height (feet)\",\n       fill = \"Dry Stem \\nWeight (kg)\",\n       title = \"DBH, Height, and Stem weight \\nin the Fernow Experimental Forest\")"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-14-output",
    "href": "slides/w11d2.html#lets-create-a-plot-14-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-15",
    "href": "slides/w11d2.html#lets-create-a-plot-15",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           fill = stem_dry_kg),\n             size = 2.5,\n             shape = 21) +\n  scale_fill_distiller(type = \"seq\", palette = 3) + \n  labs(x = \"DBH (inches)\",\n       y = \"Height (feet)\",\n       fill = \"Dry Stem \\nWeight (kg)\",\n       title = \"DBH, Height, and Stem weight \\nin the Fernow Experimental Forest\") +\n  theme_bw()"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-15-output",
    "href": "slides/w11d2.html#lets-create-a-plot-15-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-16",
    "href": "slides/w11d2.html#lets-create-a-plot-16",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot\nLet’s make this plot beautiful:\n\nggplot(data = fef) +\n  geom_point(mapping = aes(x = dbh_in, \n                           y = height_ft,\n                           fill = stem_dry_kg),\n             size = 2.5,\n             shape = 21) +\n  scale_fill_distiller(type = \"seq\", palette = 3) + \n  labs(x = \"DBH (inches)\",\n       y = \"Height (feet)\",\n       fill = \"Dry Stem \\nWeight (kg)\",\n       title = \"DBH, Height, and Stem weight \\nin the Fernow Experimental Forest\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "slides/w11d2.html#lets-create-a-plot-16-output",
    "href": "slides/w11d2.html#lets-create-a-plot-16-output",
    "title": "More graphics with ggplot2",
    "section": "Let’s create a plot",
    "text": "Let’s create a plot"
  },
  {
    "objectID": "slides/w11d2.html#next-time",
    "href": "slides/w11d2.html#next-time",
    "title": "More graphics with ggplot2",
    "section": "Next time",
    "text": "Next time\n\nMore plotting with ggplot2!\n\nmore details on histograms and bar plots\ncareful considerations when making plots\nspatial plotting"
  },
  {
    "objectID": "labs/lab_07_web.html",
    "href": "labs/lab_07_web.html",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "Welcome to Lab 7! Today, we’ll focus on writing dplyr code. In particular, we will both use the verbs individually and “write a sentence” with the verbs by stringing them together with pipes.\n\n\n\nUse dplyr verbs together with pipes.\n\n\n\n\nUpload your rendered PDF (lab_07.pdf) and Quarto (lab_07.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF."
  },
  {
    "objectID": "labs/lab_07_web.html#welcome",
    "href": "labs/lab_07_web.html#welcome",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "Welcome to Lab 7! Today, we’ll focus on writing dplyr code. In particular, we will both use the verbs individually and “write a sentence” with the verbs by stringing them together with pipes.\n\n\n\nUse dplyr verbs together with pipes.\n\n\n\n\nUpload your rendered PDF (lab_07.pdf) and Quarto (lab_07.qmd) document to the lab drop box. Make sure the Quarto document properly renders to PDF."
  },
  {
    "objectID": "labs/lab_07_web.html#exercise-0",
    "href": "labs/lab_07_web.html#exercise-0",
    "title": "Data Wrangling with dplyr",
    "section": "Exercise 0",
    "text": "Exercise 0\nLoad any packages you’ll need for this lab below."
  },
  {
    "objectID": "labs/lab_07_web.html#exercise-1",
    "href": "labs/lab_07_web.html#exercise-1",
    "title": "Data Wrangling with dplyr",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate the following dataset and call it plots. The resulting tibble should look like this when printed:\n\nplots\n\n# A tibble: 5 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1     1  20.2   2   D     TRUE \n2     1     2  10.4   1   D     TRUE \n3     2     1   5     0.5 D     TRUE \n4     2     2  18    NA   C     FALSE\n5     2     3  10.5   1.5 C     TRUE"
  },
  {
    "objectID": "labs/lab_07_web.html#exercise-2",
    "href": "labs/lab_07_web.html#exercise-2",
    "title": "Data Wrangling with dplyr",
    "section": "Exercise 2",
    "text": "Exercise 2\nWrite some code to figure out the follow features of plots:\n\nHow many rows and columns?\nWhat are the column names?\nWhat is the data type of each column?\nAre there any NA values? If so, in which column?"
  },
  {
    "objectID": "labs/lab_07_web.html#exercise-3",
    "href": "labs/lab_07_web.html#exercise-3",
    "title": "Data Wrangling with dplyr",
    "section": "Exercise 3",
    "text": "Exercise 3\nUse a dplyr function to print all trees in plot 2.\n\n\n# A tibble: 3 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     1   5     0.5 D     TRUE \n2     2     2  18    NA   C     FALSE\n3     2     3  10.5   1.5 C     TRUE \n\n\n\nExercise 4\nUse a dplyr function to print all trees in plot 2 that have dbh less than or equal 10.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     1     5   0.5 D     TRUE \n\n\n\n\nExercise 5\nUse a dplyr function to print the tree with the largest dbh.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1     1  20.2     2 D     TRUE \n\n\n\n\nExercise 6\nUse a series of piped dplyr functions to find the largest dbh tree on plot 2.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     2    18    NA C     FALSE\n\n\n\n\nExercise 7\nUse a series of piped dplyr functions to find the largest dbh live tree on plot 2.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     3  10.5   1.5 C     TRUE \n\n\n\n\nExercise 8\nUse a series of piped dplyr functions to find the largest dbh dead tree on plot 2.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     2    18    NA C     FALSE\n\n\n\n\nExercise 9\nUse a series of piped dplyr functions to find the largest dbh live tree on plot 2 of type D.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     2     1     5   0.5 D     TRUE \n\n\n\n\nExercise 10\nUse a series of piped dplyr functions to find the smallest dbh tree on plot 1.\n\n\n# A tibble: 1 × 6\n   plot  tree   dbh  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1     2  10.4     1 D     TRUE \n\n\n\n\nExercise 11\nUse a dplyr function to add a new column to plots to hold each tree’s basal area (ft\\(^2\\)). This new column should be called ba with values equal to 0.005454*dbh^2 (assuming dbh is in inches).\n\n\n# A tibble: 5 × 7\n   plot  tree   dbh  logs type  live     ba\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt;\n1     1     1  20.2   2   D     TRUE  2.23 \n2     1     2  10.4   1   D     TRUE  0.590\n3     2     1   5     0.5 D     TRUE  0.136\n4     2     2  18    NA   C     FALSE 1.77 \n5     2     3  10.5   1.5 C     TRUE  0.601\n\n\n\n\nExercise 12\nUse a dplyr function to move your newly created column ba to between the dbh and logs columns.\n\n\n# A tibble: 5 × 7\n   plot  tree   dbh    ba  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1     1  20.2 2.23    2   D     TRUE \n2     1     2  10.4 0.590   1   D     TRUE \n3     2     1   5   0.136   0.5 D     TRUE \n4     2     2  18   1.77   NA   C     FALSE\n5     2     3  10.5 0.601   1.5 C     TRUE \n\n\n\n\nExercise 13\nUse a series of piped dplyr functions to compute the mean dbh for trees on plots 1 and 2. Note, I called my mean mean_dbh.\n\n\n# A tibble: 2 × 2\n   plot mean_dbh\n  &lt;dbl&gt;    &lt;dbl&gt;\n1     1     15.3\n2     2     11.2\n\n\n\n\nExercise 14\nUse a series of piped dplyr functions to compute plot specific mean dbh and logs for trees. Exclude NA values from the mean calculations (hint, use the na.rm argument in mean()). Note, I called my mean mean_dbh and mean_logs.\n\n\n# A tibble: 2 × 3\n   plot mean_dbh mean_logs\n  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1     1     15.3       1.5\n2     2     11.2       1  \n\n\n\n\nExercise 15\nUse a series of piped dplyr functions to compute plot specific mean dbh and logs for live trees. Note, I called my mean mean_dbh and mean_logs. Why did only plot 2 mean dbh change from the your solution to Exercise 14?\n\n\n# A tibble: 2 × 3\n   plot mean_dbh mean_logs\n  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1     1    15.3        1.5\n2     2     7.75       1  \n\n\n\n\nExercise 16\nSort plots by increasing plot number and increasing dbh within plot.\n\n\n# A tibble: 5 × 7\n   plot  tree   dbh    ba  logs type  live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1     2  10.4 0.590   1   D     TRUE \n2     1     1  20.2 2.23    2   D     TRUE \n3     2     1   5   0.136   0.5 D     TRUE \n4     2     3  10.5 0.601   1.5 C     TRUE \n5     2     2  18   1.77   NA   C     FALSE\n\n\n\n\nExercise 17\nThe type column holds values “D” and “C” which stand for deciduous and conifer, respectively. Use mutate() and the case_when() function to change values in the type column from “D” and “C” to “deciduous” and “conifer”.\n\nplots\n\n# A tibble: 5 × 7\n   plot  tree   dbh    ba  logs type      live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;lgl&gt;\n1     1     1  20.2 2.23    2   deciduous TRUE \n2     1     2  10.4 0.590   1   deciduous TRUE \n3     2     1   5   0.136   0.5 deciduous TRUE \n4     2     2  18   1.77   NA   conifer   FALSE\n5     2     3  10.5 0.601   1.5 conifer   TRUE \n\n\n\n\nExercise 18\nUse a series of piped dplyr functions to compute type specific mean dbh and logs. More specifically, I want you to use a grouped summarize(), where you group by type. Note, I called my mean mean_dbh and mean_logs.\n\n\n# A tibble: 2 × 3\n  type      mean_dbh mean_logs\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n1 conifer       14.2      1.5 \n2 deciduous     11.9      1.17\n\n\n\n\nExercise 19\nUse a series of piped dplyr functions to count the number of trees by type. Hint, use the n() within a grouped summarize(). I called my count n_trees.\n\n\n# A tibble: 2 × 2\n  type      n_trees\n  &lt;chr&gt;       &lt;int&gt;\n1 conifer         2\n2 deciduous       3\n\n\n\n\nExercise 20\nUse a series of piped dplyr functions to print the trees with the largest basal area within each plot.\n\n\n# A tibble: 2 × 7\n# Groups:   plot [2]\n   plot  tree   dbh    ba  logs type      live \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;lgl&gt;\n1     1     1  20.2  2.23     2 deciduous TRUE \n2     2     2  18    1.77    NA conifer   FALSE"
  },
  {
    "objectID": "slides/w1d2.html#agenda",
    "href": "slides/w1d2.html#agenda",
    "title": "Tools for Data Science",
    "section": "Agenda",
    "text": "Agenda\nToday, we’ll introduce a few important data science tools:\n\nThe R programming language\nThe RStudio IDE\nQuarto, for reproducible reports"
  },
  {
    "objectID": "slides/w1d2.html#the-r-programming-language-overview",
    "href": "slides/w1d2.html#the-r-programming-language-overview",
    "title": "Tools for Data Science",
    "section": "The R programming language: overview",
    "text": "The R programming language: overview\n\n\nR is an open source and freely available programming language with fully featured graphics.\nR is a quite popular language, especially for scientific programming (but it does have lots of industry popularity, as well!).\nR is somewhat similar to python in syntax, and is a great first programming language to learn."
  },
  {
    "objectID": "slides/w1d2.html#the-r-programming-language-history",
    "href": "slides/w1d2.html#the-r-programming-language-history",
    "title": "Tools for Data Science",
    "section": "The R programming language: history",
    "text": "The R programming language: history\n\n\nInitially, there was S. Developed by Bell Laboratories in the mid-70s.\nJohn Chambers, one of S’s primary developers described its purpose as follows: “to turn ideas into software, quickly and faithfully”.\nR was developed in the early 90’s and deals with many of the memory problems that existed in S.\nUnder the hood, R calls routines from the lower-level FORTRAN and C languages."
  },
  {
    "objectID": "slides/w1d2.html#rstudio",
    "href": "slides/w1d2.html#rstudio",
    "title": "Tools for Data Science",
    "section": "RStudio",
    "text": "RStudio\n\n\nRStudio, or the RStudio Integrated Development Environment (IDE), is a tool we’ll use to run R code, edit reproducible reports, and even navigate our file system.\nRStudio was initially released in 2011, and is the most popular IDE for R programming.\nLargely, RStudio is a tool to code efficiently and reproducibly in the R programming language.\nLet’s take a look at it!"
  },
  {
    "objectID": "slides/w1d2.html#rstudio-1",
    "href": "slides/w1d2.html#rstudio-1",
    "title": "Tools for Data Science",
    "section": "RStudio",
    "text": "RStudio\n\nRStudio has four panes: source, console, environment, and file manager."
  },
  {
    "objectID": "slides/w1d2.html#whats-going-on-here",
    "href": "slides/w1d2.html#whats-going-on-here",
    "title": "Tools for Data Science",
    "section": "What’s going on here?",
    "text": "What’s going on here?\n\nrnorm(1)\n\n\n\nrnorm() is a function.\n1 is the value we gave to one of it’s arguments.\nWe can type ?rnorm() for more information about the rnorm() function.\nLet’s check it out!"
  },
  {
    "objectID": "slides/w1d2.html#what-have-we-learned",
    "href": "slides/w1d2.html#what-have-we-learned",
    "title": "Tools for Data Science",
    "section": "What have we learned?",
    "text": "What have we learned?\n\n\nThe rnorm() function takes n random draws from a normal distribution with a center (mean) and spread (sd).\n\nThese statistical details are not necessary for this class."
  },
  {
    "objectID": "slides/w1d2.html#what-have-we-learned-1",
    "href": "slides/w1d2.html#what-have-we-learned-1",
    "title": "Tools for Data Science",
    "section": "What have we learned?",
    "text": "What have we learned?\n\nThe rnorm() function takes n random draws from a normal distribution with a center (mean) and spread (sd).\n\nThese statistical details are not necessary for this class.\n\n\nWe could have written:\n\nrnorm(n = 1)"
  },
  {
    "objectID": "slides/w1d2.html#what-have-we-learned-2",
    "href": "slides/w1d2.html#what-have-we-learned-2",
    "title": "Tools for Data Science",
    "section": "What have we learned?",
    "text": "What have we learned?\n\nThe rnorm() function takes n random draws from a normal distribution with a center (mean) and spread (sd).\n\nThese statistical details are not necessary for this class.\n\n\nWe could have written:\n\nrnorm(n = 1)\n\nOr even:\n\nrnorm(n = 1, mean = 0, sd = 1)"
  },
  {
    "objectID": "slides/w1d2.html#arguments",
    "href": "slides/w1d2.html#arguments",
    "title": "Tools for Data Science",
    "section": "Arguments",
    "text": "Arguments\n\nrnorm(n = 1, mean = 0, sd = 1)\n\n\n\nn must be specified for rnorm() to run\nmean and sd are optional, but if you don’t specify them, R will choose for you (in this case, the defaults are 0 and 1)."
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-1",
    "href": "slides/w1d2.html#r-as-a-calculator-1",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nR includes many mathematical operations, and is a great calculator.\n\n\n2 + 3 # addition\n2 * 3 # multiplication\n2 / 3 # division\n2 - 3 # subtraction"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-2",
    "href": "slides/w1d2.html#r-as-a-calculator-2",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nR includes many mathematical operations, and is a great calculator.\n\n\n2 + 3 # addition\n2 * 3 # multiplication\n2 / 3 # division\n2 - 3 # subtraction"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-3",
    "href": "slides/w1d2.html#r-as-a-calculator-3",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nR includes many mathematical operations, and is a great calculator.\n\n\n2 + 3 # addition\n2 * 3 # multiplication\n2 / 3 # division\n2 - 3 # subtraction"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-4",
    "href": "slides/w1d2.html#r-as-a-calculator-4",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nR includes many mathematical operations, and is a great calculator.\n\n\n2 + 3 # addition\n2 * 3 # multiplication\n2 / 3 # division\n2 - 3 # subtraction"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-5",
    "href": "slides/w1d2.html#r-as-a-calculator-5",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nFunctions exists for more complex mathematical operations\n\n\nlog(7) # the natural logarithm\nlog(7, base = 10) # log base 10\nexp(7) # the exponential function\nsqrt(7) # the square root function\nabs(10 - 17) # absolute value"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-6",
    "href": "slides/w1d2.html#r-as-a-calculator-6",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nFunctions exists for more complex mathematical operations\n\n\nlog(7) # the natural logarithm\nlog(7, base = 10) # log base 10\nexp(7) # the exponential function\nsqrt(7) # the square root function\nabs(10 - 17) # absolute value"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-7",
    "href": "slides/w1d2.html#r-as-a-calculator-7",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nFunctions exists for more complex mathematical operations\n\n\nlog(7) # the natural logarithm\nlog(7, base = 10) # log base 10\nexp(7) # the exponential function\nsqrt(7) # the square root function\nabs(10 - 17) # absolute value"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-8",
    "href": "slides/w1d2.html#r-as-a-calculator-8",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nFunctions exists for more complex mathematical operations\n\n\nlog(7) # the natural logarithm\nlog(7, base = 10) # log base 10\nexp(7) # the exponential function\nsqrt(7) # the square root function\nabs(10 - 17) # absolute value"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-9",
    "href": "slides/w1d2.html#r-as-a-calculator-9",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nFunctions can be nested in each other\n\n\nlog(exp(7))\n\n[1] 7"
  },
  {
    "objectID": "slides/w1d2.html#r-as-a-calculator-10",
    "href": "slides/w1d2.html#r-as-a-calculator-10",
    "title": "Tools for Data Science",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nExponents with ^: 2^3 means \\(2^3\\)\n\n\n2^3\n\n[1] 8"
  },
  {
    "objectID": "slides/w1d2.html#quarto-1",
    "href": "slides/w1d2.html#quarto-1",
    "title": "Tools for Data Science",
    "section": "Quarto",
    "text": "Quarto\n\n\nQuarto is a markdown language, released in 2022.\nAllows you to include code and text in the same document.\nDocuments output or “Render” to PDF or HTML (web) documents.\nThese slides (and the course website!) are made with Quarto."
  },
  {
    "objectID": "slides/w1d2.html#quarto-for-reproducible-reports",
    "href": "slides/w1d2.html#quarto-for-reproducible-reports",
    "title": "Tools for Data Science",
    "section": "Quarto for reproducible reports",
    "text": "Quarto for reproducible reports\n\n\nQuarto is a great tool to help us do reproducible science.\nWhat does reproducibility mean?\nreproducibility \\(\\neq\\) replicability / repeatability"
  },
  {
    "objectID": "slides/w1d2.html#a-project-is-reproducible-if-another-person-could-take-your-code-and-data-run-the-code-and-get-the-exact-same-answer.",
    "href": "slides/w1d2.html#a-project-is-reproducible-if-another-person-could-take-your-code-and-data-run-the-code-and-get-the-exact-same-answer.",
    "title": "Tools for Data Science",
    "section": "A project is reproducible if another person could take your code and data, run the code, and get the exact same answer.",
    "text": "A project is reproducible if another person could take your code and data, run the code, and get the exact same answer."
  },
  {
    "objectID": "slides/w1d2.html#a-project-is-replicable-repeatable-if-another-person-could-take-the-steps-to-do-your-project-again-in-their-own-setting.",
    "href": "slides/w1d2.html#a-project-is-replicable-repeatable-if-another-person-could-take-the-steps-to-do-your-project-again-in-their-own-setting.",
    "title": "Tools for Data Science",
    "section": "A project is replicable / repeatable if another person could take the steps to do your project again in their own setting.",
    "text": "A project is replicable / repeatable if another person could take the steps to do your project again in their own setting."
  },
  {
    "objectID": "slides/w1d2.html#objects-in-r",
    "href": "slides/w1d2.html#objects-in-r",
    "title": "Tools for Data Science",
    "section": "Objects in R",
    "text": "Objects in R\n\nR can store objects for use later in what we call an environment.\n\n\ndbh_in &lt;- 40 # store tree diameter (inches)"
  },
  {
    "objectID": "slides/w1d2.html#objects-in-r-1",
    "href": "slides/w1d2.html#objects-in-r-1",
    "title": "Tools for Data Science",
    "section": "Objects in R",
    "text": "Objects in R\n\nR can store objects for use later in what we call an environment.\nHere, we stored dbh_in in our environment, and printed it out to see its value.\n\n\ndbh_in\n\n[1] 40"
  },
  {
    "objectID": "slides/w1d2.html#objects-in-r-2",
    "href": "slides/w1d2.html#objects-in-r-2",
    "title": "Tools for Data Science",
    "section": "Objects in R",
    "text": "Objects in R\n\nR can store objects for use later in what we call an environment.\nHere, we stored dbh_in in our environment, and printed it out to see its value.\nWe can use R as a calculator to compute the tree’s basal area.\n\n\nBA_in2 &lt;- pi * (dbh_in / 2)^2 # compute tree basal area\nBA_in2\n\n[1] 1256.637"
  },
  {
    "objectID": "slides/w1d2.html#next-time",
    "href": "slides/w1d2.html#next-time",
    "title": "Tools for Data Science",
    "section": "Next time",
    "text": "Next time\n\n\nWe’ll talk about file systems, paths, folders, and navigating your computer.\nMore advanced features of R as well: basic data structures, variable naming and code formatting, reading/writing data, and more!"
  },
  {
    "objectID": "slides/w8d1.html#announcements",
    "href": "slides/w8d1.html#announcements",
    "title": "More data wrangling with dplyr",
    "section": "Announcements",
    "text": "Announcements\n\nLab 5 grades coming soon.\nLab 6 is due this Wednesday at 5pm\nCome to office hours or schedule a meeting if you are struggling with Lab 6!"
  },
  {
    "objectID": "slides/w8d1.html#agenda",
    "href": "slides/w8d1.html#agenda",
    "title": "More data wrangling with dplyr",
    "section": "Agenda",
    "text": "Agenda\n\nQuiz (15 minutes)\nMore dplyr verbs and pipes (%&gt;%)"
  },
  {
    "objectID": "slides/w8d1.html#dplyr-verbs.",
    "href": "slides/w8d1.html#dplyr-verbs.",
    "title": "More data wrangling with dplyr",
    "section": "dplyr verbs.",
    "text": "dplyr verbs.\nRecall the standard dplyr verb form:\n\nverb(data, action)\n\n\n\nThe first argument of any dplyr verb is the data (a tibble or data.frame), and the next arguments specify how we are using the verb()."
  },
  {
    "objectID": "slides/w8d1.html#and-our-favorite-example-dataset",
    "href": "slides/w8d1.html#and-our-favorite-example-dataset",
    "title": "More data wrangling with dplyr",
    "section": "And our favorite example dataset",
    "text": "And our favorite example dataset\n\nlibrary(tidyverse)\nmore_pets &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\", \"Marvin\", \"Figaro\", \"Slim\"),\n  ages = c(6, 5, 3, 11, 11, 3, 6),\n  meals_per_day = c(2, 3, 3, 3, 1, 2, 2),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)  \n)\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE  \n\n\nWe’ll use more_pets throughout lecture today."
  },
  {
    "objectID": "slides/w8d1.html#relocate",
    "href": "slides/w8d1.html#relocate",
    "title": "More data wrangling with dplyr",
    "section": "relocate()",
    "text": "relocate()\n\nrelocate() moves columns around in a tibble"
  },
  {
    "objectID": "slides/w8d1.html#move-the-ages-column-to-the-front-of-the-tibble",
    "href": "slides/w8d1.html#move-the-ages-column-to-the-front-of-the-tibble",
    "title": "More data wrangling with dplyr",
    "section": "move the ages column to the front of the tibble",
    "text": "move the ages column to the front of the tibble\n\nrelocate(more_pets, ages)\n\n# A tibble: 7 × 4\n   ages names  meals_per_day is_dog\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;lgl&gt; \n1     6 Dude               2 TRUE  \n2     5 Pickle             3 FALSE \n3     3 Kyle               3 FALSE \n4    11 Nubs               3 FALSE \n5    11 Marvin             1 FALSE \n6     3 Figaro             2 FALSE \n7     6 Slim               2 TRUE  \n\n\n\n\nNote, this is the default behavior of relocate()."
  },
  {
    "objectID": "slides/w8d1.html#move-the-ages-column-to-the-end-of-the-tibble",
    "href": "slides/w8d1.html#move-the-ages-column-to-the-end-of-the-tibble",
    "title": "More data wrangling with dplyr",
    "section": "move the ages column to the end of the tibble",
    "text": "move the ages column to the end of the tibble\nHint: similar to how we removed columns with select()."
  },
  {
    "objectID": "slides/w8d1.html#move-the-ages-column-to-the-end-of-the-tibble-1",
    "href": "slides/w8d1.html#move-the-ages-column-to-the-end-of-the-tibble-1",
    "title": "More data wrangling with dplyr",
    "section": "move the ages column to the end of the tibble",
    "text": "move the ages column to the end of the tibble\n\nrelocate(more_pets, -ages)\n\n# A tibble: 7 × 4\n  names  meals_per_day is_dog  ages\n  &lt;chr&gt;          &lt;dbl&gt; &lt;lgl&gt;  &lt;dbl&gt;\n1 Dude               2 TRUE       6\n2 Pickle             3 FALSE      5\n3 Kyle               3 FALSE      3\n4 Nubs               3 FALSE     11\n5 Marvin             1 FALSE     11\n6 Figaro             2 FALSE      3\n7 Slim               2 TRUE       6"
  },
  {
    "objectID": "slides/w8d1.html#put-the-names-column-after-ages",
    "href": "slides/w8d1.html#put-the-names-column-after-ages",
    "title": "More data wrangling with dplyr",
    "section": "put the names column after ages",
    "text": "put the names column after ages\n\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE"
  },
  {
    "objectID": "slides/w8d1.html#put-the-names-column-after-ages-1",
    "href": "slides/w8d1.html#put-the-names-column-after-ages-1",
    "title": "More data wrangling with dplyr",
    "section": "put the names column after ages",
    "text": "put the names column after ages\n\nrelocate(more_pets, names, .after = ages)\n\n# A tibble: 7 × 4\n   ages names  meals_per_day is_dog\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;lgl&gt; \n1     6 Dude               2 TRUE  \n2     5 Pickle             3 FALSE \n3     3 Kyle               3 FALSE \n4    11 Nubs               3 FALSE \n5    11 Marvin             1 FALSE \n6     3 Figaro             2 FALSE \n7     6 Slim               2 TRUE  \n\n\n\n\nNOTE: this argument is called .after not after"
  },
  {
    "objectID": "slides/w8d1.html#put-the-is_dog-column-before-ages",
    "href": "slides/w8d1.html#put-the-is_dog-column-before-ages",
    "title": "More data wrangling with dplyr",
    "section": "put the is_dog column before ages",
    "text": "put the is_dog column before ages\n\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE"
  },
  {
    "objectID": "slides/w8d1.html#put-the-is_dog-column-before-ages-1",
    "href": "slides/w8d1.html#put-the-is_dog-column-before-ages-1",
    "title": "More data wrangling with dplyr",
    "section": "put the is_dog column before ages",
    "text": "put the is_dog column before ages\n\nrelocate(more_pets, is_dog, .before = ages)\n\n# A tibble: 7 × 4\n  names  is_dog  ages meals_per_day\n  &lt;chr&gt;  &lt;lgl&gt;  &lt;dbl&gt;         &lt;dbl&gt;\n1 Dude   TRUE       6             2\n2 Pickle FALSE      5             3\n3 Kyle   FALSE      3             3\n4 Nubs   FALSE     11             3\n5 Marvin FALSE     11             1\n6 Figaro FALSE      3             2\n7 Slim   TRUE       6             2"
  },
  {
    "objectID": "slides/w8d1.html#mutate",
    "href": "slides/w8d1.html#mutate",
    "title": "More data wrangling with dplyr",
    "section": "mutate()",
    "text": "mutate()\n\nmutate() creates new columns and adds them to the right side of an existing tibble."
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-birth_year-to-more_pets",
    "href": "slides/w8d1.html#add-a-column-called-birth_year-to-more_pets",
    "title": "More data wrangling with dplyr",
    "section": "add a column called birth_year to more_pets",
    "text": "add a column called birth_year to more_pets\n\nmutate(more_pets, \n       birth_year = 2024 - ages)\n\n# A tibble: 7 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018\n2 Pickle     5             3 FALSE        2019\n3 Kyle       3             3 FALSE        2021\n4 Nubs      11             3 FALSE        2013\n5 Marvin    11             1 FALSE        2013\n6 Figaro     3             2 FALSE        2021\n7 Slim       6             2 TRUE         2018\n\n\n\n\nNote this just prints out the new dataset.\nWhat would we have to do if we wanted to save this column in more_pets?"
  },
  {
    "objectID": "slides/w8d1.html#use-the-assignment-operator",
    "href": "slides/w8d1.html#use-the-assignment-operator",
    "title": "More data wrangling with dplyr",
    "section": "Use the assignment operator!",
    "text": "Use the assignment operator!\n\nmore_pets &lt;- mutate(more_pets, \n                    birth_year = 2024 - ages)\n# now the column is added to more_pets\nmore_pets\n\n# A tibble: 7 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018\n2 Pickle     5             3 FALSE        2019\n3 Kyle       3             3 FALSE        2021\n4 Nubs      11             3 FALSE        2013\n5 Marvin    11             1 FALSE        2013\n6 Figaro     3             2 FALSE        2021\n7 Slim       6             2 TRUE         2018"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-for-meals-per-year",
    "href": "slides/w8d1.html#add-a-column-for-meals-per-year",
    "title": "More data wrangling with dplyr",
    "section": "Add a column for meals per year",
    "text": "Add a column for meals per year"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-for-meals-per-year-1",
    "href": "slides/w8d1.html#add-a-column-for-meals-per-year-1",
    "title": "More data wrangling with dplyr",
    "section": "Add a column for meals per year",
    "text": "Add a column for meals per year\n\nmutate(more_pets, meals_per_year = meals_per_day * 365)\n\n# A tibble: 7 × 6\n  names   ages meals_per_day is_dog birth_year meals_per_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;          &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018            730\n2 Pickle     5             3 FALSE        2019           1095\n3 Kyle       3             3 FALSE        2021           1095\n4 Nubs      11             3 FALSE        2013           1095\n5 Marvin    11             1 FALSE        2013            365\n6 Figaro     3             2 FALSE        2021            730\n7 Slim       6             2 TRUE         2018            730"
  },
  {
    "objectID": "slides/w8d1.html#equivalently-we-can-use-the-pipe-to-add-this-column",
    "href": "slides/w8d1.html#equivalently-we-can-use-the-pipe-to-add-this-column",
    "title": "More data wrangling with dplyr",
    "section": "Equivalently, we can use the pipe to add this column",
    "text": "Equivalently, we can use the pipe to add this column"
  },
  {
    "objectID": "slides/w8d1.html#equivalently-we-can-use-the-pipe-to-add-this-column-1",
    "href": "slides/w8d1.html#equivalently-we-can-use-the-pipe-to-add-this-column-1",
    "title": "More data wrangling with dplyr",
    "section": "Equivalently, we can use the pipe to add this column",
    "text": "Equivalently, we can use the pipe to add this column\n\nmore_pets %&gt;%\n  mutate(meals_per_year = meals_per_day * 365)\n\n# A tibble: 7 × 6\n  names   ages meals_per_day is_dog birth_year meals_per_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;          &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018            730\n2 Pickle     5             3 FALSE        2019           1095\n3 Kyle       3             3 FALSE        2021           1095\n4 Nubs      11             3 FALSE        2013           1095\n5 Marvin    11             1 FALSE        2013            365\n6 Figaro     3             2 FALSE        2021            730\n7 Slim       6             2 TRUE         2018            730\n\n\n\n\nThe pipe (%&gt;%) puts the dataset before it into the first argument of the following function."
  },
  {
    "objectID": "slides/w8d1.html#dplyrs-pipe",
    "href": "slides/w8d1.html#dplyrs-pipe",
    "title": "More data wrangling with dplyr",
    "section": "dplyr’s pipe (%>%)",
    "text": "dplyr’s pipe (%&gt;%)\n\n\nUsed to string together “sentences” with dplyr verbs.\nCan be read as “and then”"
  },
  {
    "objectID": "slides/w8d1.html#dplyrs-pipe-1",
    "href": "slides/w8d1.html#dplyrs-pipe-1",
    "title": "More data wrangling with dplyr",
    "section": "dplyr’s pipe (%>%)",
    "text": "dplyr’s pipe (%&gt;%)\n\nUsed to string together “sentences” with dplyr verbs.\nCan be read as “and then”\n\nExample:\n\nmore_pets %&gt;%\n  mutate(birth_year = 2024 - ages)\n\n# A tibble: 7 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018\n2 Pickle     5             3 FALSE        2019\n3 Kyle       3             3 FALSE        2021\n4 Nubs      11             3 FALSE        2013\n5 Marvin    11             1 FALSE        2013\n6 Figaro     3             2 FALSE        2021\n7 Slim       6             2 TRUE         2018"
  },
  {
    "objectID": "slides/w8d1.html#dplyrs-pipe-2",
    "href": "slides/w8d1.html#dplyrs-pipe-2",
    "title": "More data wrangling with dplyr",
    "section": "dplyr’s pipe (%>%)",
    "text": "dplyr’s pipe (%&gt;%)\n\nUsed to string together “sentences” with dplyr verbs.\nCan be read as “and then”\n\nExample:\n\nmore_pets %&gt;%\n  mutate(birth_year = 2024 - ages) %&gt;%\n  filter(birth_year &gt; 2020)\n\n# A tibble: 2 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Kyle       3             3 FALSE        2021\n2 Figaro     3             2 FALSE        2021"
  },
  {
    "objectID": "slides/w8d1.html#saving-the-resulting-tibble-assignment-operator",
    "href": "slides/w8d1.html#saving-the-resulting-tibble-assignment-operator",
    "title": "More data wrangling with dplyr",
    "section": "Saving the resulting tibble: assignment operator!",
    "text": "Saving the resulting tibble: assignment operator!\n\npost_pandemic_pets &lt;- more_pets %&gt;%\n  mutate(birth_year = 2024 - ages) %&gt;%\n  filter(birth_year &gt; 2020)\n\npost_pandemic_pets\n\n# A tibble: 2 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Kyle       3             3 FALSE        2021\n2 Figaro     3             2 FALSE        2021"
  },
  {
    "objectID": "slides/w8d1.html#well-use-the-pipe-throughout-the-rest-of-the-course",
    "href": "slides/w8d1.html#well-use-the-pipe-throughout-the-rest-of-the-course",
    "title": "More data wrangling with dplyr",
    "section": "We’ll use the pipe throughout the rest of the course",
    "text": "We’ll use the pipe throughout the rest of the course\n\nAs they arise, we will discuss more subtleties of the pipe (these are discussed in Section 7.12 of IFDAR)"
  },
  {
    "objectID": "slides/w8d1.html#a-variation-of-mutate-transmute.",
    "href": "slides/w8d1.html#a-variation-of-mutate-transmute.",
    "title": "More data wrangling with dplyr",
    "section": "A variation of mutate(): transmute().",
    "text": "A variation of mutate(): transmute().\n\n\nBy default, mutate() adds a column and keeps all the previous columns from the tibble.\ntransmute() on the other hand, adds a column and removes all the columns from the tibble.\nLet’s try it out!"
  },
  {
    "objectID": "slides/w8d1.html#use-transmute-to-add-a-logical-column-called-age_dogyears-to-more_pets",
    "href": "slides/w8d1.html#use-transmute-to-add-a-logical-column-called-age_dogyears-to-more_pets",
    "title": "More data wrangling with dplyr",
    "section": "use transmute() to add a logical column called age_dogyears to more_pets",
    "text": "use transmute() to add a logical column called age_dogyears to more_pets"
  },
  {
    "objectID": "slides/w8d1.html#use-transmute-to-add-a-column-called-age_dogyears-to-more_pets",
    "href": "slides/w8d1.html#use-transmute-to-add-a-column-called-age_dogyears-to-more_pets",
    "title": "More data wrangling with dplyr",
    "section": "use transmute() to add a column called age_dogyears to more_pets",
    "text": "use transmute() to add a column called age_dogyears to more_pets\n\nmore_pets %&gt;%\n  transmute(age_dogyears = ages * 7)\n\n# A tibble: 7 × 1\n  age_dogyears\n         &lt;dbl&gt;\n1           42\n2           35\n3           21\n4           77\n5           77\n6           21\n7           42"
  },
  {
    "objectID": "slides/w8d1.html#use-transmute-to-add-a-column-called-age_dogyears-to-more_pets-but-keep-the-names.",
    "href": "slides/w8d1.html#use-transmute-to-add-a-column-called-age_dogyears-to-more_pets-but-keep-the-names.",
    "title": "More data wrangling with dplyr",
    "section": "use transmute() to add a column called age_dogyears to more_pets, but keep the names.",
    "text": "use transmute() to add a column called age_dogyears to more_pets, but keep the names.\n\nmore_pets %&gt;% \n  transmute(names, age_dogyears = ages * 7)\n\n# A tibble: 7 × 2\n  names  age_dogyears\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Dude             42\n2 Pickle           35\n3 Kyle             21\n4 Nubs             77\n5 Marvin           77\n6 Figaro           21\n7 Slim             42"
  },
  {
    "objectID": "slides/w8d1.html#note-what-happens-when-i-move-names-in-the-function",
    "href": "slides/w8d1.html#note-what-happens-when-i-move-names-in-the-function",
    "title": "More data wrangling with dplyr",
    "section": "Note what happens when I move names in the function",
    "text": "Note what happens when I move names in the function\nWhat do you think will happen?\n\nmore_pets %&gt;%\n  transmute(age_dogyears = ages * 7, names)"
  },
  {
    "objectID": "slides/w8d1.html#note-what-happens-when-i-move-names-in-the-function-1",
    "href": "slides/w8d1.html#note-what-happens-when-i-move-names-in-the-function-1",
    "title": "More data wrangling with dplyr",
    "section": "Note what happens when I move names in the function",
    "text": "Note what happens when I move names in the function\nWhat do you think will happen?\n\nmore_pets %&gt;%\n  transmute(age_dogyears = ages * 7, names)\n\n# A tibble: 7 × 2\n  age_dogyears names \n         &lt;dbl&gt; &lt;chr&gt; \n1           42 Dude  \n2           35 Pickle\n3           21 Kyle  \n4           77 Nubs  \n5           77 Marvin\n6           21 Figaro\n7           42 Slim"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.",
    "href": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.",
    "text": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.\n\nmore_pets\n\n# A tibble: 7 × 5\n  names   ages meals_per_day is_dog birth_year\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;\n1 Dude       6             2 TRUE         2018\n2 Pickle     5             3 FALSE        2019\n3 Kyle       3             3 FALSE        2021\n4 Nubs      11             3 FALSE        2013\n5 Marvin    11             1 FALSE        2013\n6 Figaro     3             2 FALSE        2021\n7 Slim       6             2 TRUE         2018\n\n\n\n\nHow do we do this?"
  },
  {
    "objectID": "slides/w8d1.html#we-need-a-case_when",
    "href": "slides/w8d1.html#we-need-a-case_when",
    "title": "More data wrangling with dplyr",
    "section": "We need a case_when()",
    "text": "We need a case_when()\n\nThe case_when() function allows use to add a column based on logical conditions.\nIn general, when using a case_when() within a mutate() the form is something like this:\n\n\ndata %&gt;%\n  mutate(new_column = case_when(\n    condition_1 ~ \"value\",\n    condition_2 ~ \"other value\"\n    )\n  )\n\n\n\nwhere condition_1 and condition_2 are logical statements."
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-1",
    "href": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-1",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.",
    "text": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020."
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-2",
    "href": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-2",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.",
    "text": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.\n\nmore_pets %&gt;%\n  mutate(post_pandemic = case_when(\n    birth_year &gt; 2020 ~ TRUE,\n    birth_year &lt;= 2020 ~ FALSE\n    )\n  )"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-3",
    "href": "slides/w8d1.html#add-a-column-called-post_pandemic-that-indicates-whether-or-not-a-pet-was-born-after-2020.-3",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.",
    "text": "Add a column called post_pandemic that indicates whether or not a pet was born after 2020.\n\nmore_pets %&gt;%\n  mutate(post_pandemic = case_when(\n    birth_year &gt; 2020 ~ TRUE,\n    birth_year &lt;= 2020 ~ FALSE\n    )\n  )\n\n# A tibble: 7 × 6\n  names   ages meals_per_day is_dog birth_year post_pandemic\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt; &lt;lgl&gt;        \n1 Dude       6             2 TRUE         2018 FALSE        \n2 Pickle     5             3 FALSE        2019 FALSE        \n3 Kyle       3             3 FALSE        2021 TRUE         \n4 Nubs      11             3 FALSE        2013 FALSE        \n5 Marvin    11             1 FALSE        2013 FALSE        \n6 Figaro     3             2 FALSE        2021 TRUE         \n7 Slim       6             2 TRUE         2018 FALSE"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are",
    "href": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called type_of_animal that tells us what type of animal each of the pets are",
    "text": "Add a column called type_of_animal that tells us what type of animal each of the pets are"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are-1",
    "href": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are-1",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called type_of_animal that tells us what type of animal each of the pets are",
    "text": "Add a column called type_of_animal that tells us what type of animal each of the pets are\n\nmore_pets &lt;- more_pets %&gt;%\n  mutate(type_of_animal = case_when(\n    is_dog ~ \"dog\",\n    names %in% c(\"Pickle\", \"Kyle\", \"Nubs\", \"Figaro\") ~ \"cat\",\n    names == \"Marvin\" ~ \"sheep/ram\"\n    )\n  )"
  },
  {
    "objectID": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are-2",
    "href": "slides/w8d1.html#add-a-column-called-type_of_animal-that-tells-us-what-type-of-animal-each-of-the-pets-are-2",
    "title": "More data wrangling with dplyr",
    "section": "Add a column called type_of_animal that tells us what type of animal each of the pets are",
    "text": "Add a column called type_of_animal that tells us what type of animal each of the pets are\n\nmore_pets\n\n# A tibble: 7 × 6\n  names   ages meals_per_day is_dog birth_year type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 TRUE         2018 dog           \n2 Pickle     5             3 FALSE        2019 cat           \n3 Kyle       3             3 FALSE        2021 cat           \n4 Nubs      11             3 FALSE        2013 cat           \n5 Marvin    11             1 FALSE        2013 sheep/ram     \n6 Figaro     3             2 FALSE        2021 cat           \n7 Slim       6             2 TRUE         2018 dog"
  },
  {
    "objectID": "slides/w8d1.html#summarization",
    "href": "slides/w8d1.html#summarization",
    "title": "More data wrangling with dplyr",
    "section": "Summarization",
    "text": "Summarization\n\n\nData summaries are some of the best ways to learn from the data we have.\nWith increasingly large data, it can be very helpful to summarize.\ndplyr provides intuitive and powerful ways to summarize data.\nThey call their function for summarization, suprisingly,\nsummarize()"
  },
  {
    "objectID": "slides/w8d1.html#summarization-1",
    "href": "slides/w8d1.html#summarization-1",
    "title": "More data wrangling with dplyr",
    "section": "Summarization",
    "text": "Summarization\n\nThe summarize() function takes a very similar form to the other dplyr functions.\nIn particular, it is of the form:\n\n\nsummarize(data, new_summary_column = summarization_code)"
  },
  {
    "objectID": "slides/w8d1.html#get-the-mean-value-of-the-pets-ages",
    "href": "slides/w8d1.html#get-the-mean-value-of-the-pets-ages",
    "title": "More data wrangling with dplyr",
    "section": "Get the mean value of the pet’s ages",
    "text": "Get the mean value of the pet’s ages\n\nmore_pets %&gt;%\n  summarize(avg_age = mean(ages))\n\n# A tibble: 1 × 1\n  avg_age\n    &lt;dbl&gt;\n1    6.43"
  },
  {
    "objectID": "slides/w8d1.html#get-the-total-years-lived-by-the-pets",
    "href": "slides/w8d1.html#get-the-total-years-lived-by-the-pets",
    "title": "More data wrangling with dplyr",
    "section": "Get the total years lived by the pets",
    "text": "Get the total years lived by the pets\n\nmore_pets %&gt;%\n  summarize(years_lived = sum(ages))\n\n# A tibble: 1 × 1\n  years_lived\n        &lt;dbl&gt;\n1          45"
  },
  {
    "objectID": "slides/w8d1.html#it-is-common-to-want-to-summarize-data-by-group.",
    "href": "slides/w8d1.html#it-is-common-to-want-to-summarize-data-by-group.",
    "title": "More data wrangling with dplyr",
    "section": "It is common to want to summarize data by group.",
    "text": "It is common to want to summarize data by group.\n\n\nFor example, one might want to get the average age of pets for each type of animal,\nOr, in a more forestry example, the average DBH of different tree species’ in a stand.\nWe’ll do the pets one today."
  },
  {
    "objectID": "slides/w8d1.html#group_by",
    "href": "slides/w8d1.html#group_by",
    "title": "More data wrangling with dplyr",
    "section": "group_by()",
    "text": "group_by()\n\n\nThe group_by() function allows us to group our tibble by a variable of interest.\ngroup_by() on its own, does not change the rows or columns of the tibble, it just makes it “grouped”\nHowever, when we go to summarize() “grouped” data, we get the results for each group.\nLet’s try it out!"
  },
  {
    "objectID": "slides/w8d1.html#average-age-for-each-type-of-pet",
    "href": "slides/w8d1.html#average-age-for-each-type-of-pet",
    "title": "More data wrangling with dplyr",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets\n\n# A tibble: 7 × 6\n  names   ages meals_per_day is_dog birth_year type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 TRUE         2018 dog           \n2 Pickle     5             3 FALSE        2019 cat           \n3 Kyle       3             3 FALSE        2021 cat           \n4 Nubs      11             3 FALSE        2013 cat           \n5 Marvin    11             1 FALSE        2013 sheep/ram     \n6 Figaro     3             2 FALSE        2021 cat           \n7 Slim       6             2 TRUE         2018 dog"
  },
  {
    "objectID": "slides/w8d1.html#average-age-for-each-type-of-pet-1",
    "href": "slides/w8d1.html#average-age-for-each-type-of-pet-1",
    "title": "More data wrangling with dplyr",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets %&gt;% \n  group_by(type_of_animal)\n\n# A tibble: 7 × 6\n# Groups:   type_of_animal [3]\n  names   ages meals_per_day is_dog birth_year type_of_animal\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt; &lt;chr&gt;         \n1 Dude       6             2 TRUE         2018 dog           \n2 Pickle     5             3 FALSE        2019 cat           \n3 Kyle       3             3 FALSE        2021 cat           \n4 Nubs      11             3 FALSE        2013 cat           \n5 Marvin    11             1 FALSE        2013 sheep/ram     \n6 Figaro     3             2 FALSE        2021 cat           \n7 Slim       6             2 TRUE         2018 dog"
  },
  {
    "objectID": "slides/w8d1.html#average-age-for-each-type-of-pet-2",
    "href": "slides/w8d1.html#average-age-for-each-type-of-pet-2",
    "title": "More data wrangling with dplyr",
    "section": "average age for each type of pet",
    "text": "average age for each type of pet\n\nmore_pets %&gt;% \n  group_by(type_of_animal) %&gt;%\n  summarize(avg_age = mean(ages))\n\n# A tibble: 3 × 2\n  type_of_animal avg_age\n  &lt;chr&gt;            &lt;dbl&gt;\n1 cat                5.5\n2 dog                6  \n3 sheep/ram         11"
  },
  {
    "objectID": "slides/w8d1.html#next-time",
    "href": "slides/w8d1.html#next-time",
    "title": "More data wrangling with dplyr",
    "section": "Next time",
    "text": "Next time\n\nMore advanced dplyr"
  },
  {
    "objectID": "slides/w10d1.html#annoucements",
    "href": "slides/w10d1.html#annoucements",
    "title": "Reshaping data with tidyr",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm II is Thursday, November 14th.\nMaterial on the midterm will include all material through Week 11."
  },
  {
    "objectID": "slides/w10d1.html#agenda",
    "href": "slides/w10d1.html#agenda",
    "title": "Reshaping data with tidyr",
    "section": "Agenda",
    "text": "Agenda\n\nContinuation and review of combining tibbles (i.e. data joins)\nReshaping data with tidyr"
  },
  {
    "objectID": "slides/w10d1.html#data-joins-in-r",
    "href": "slides/w10d1.html#data-joins-in-r",
    "title": "Reshaping data with tidyr",
    "section": "Data Joins in R",
    "text": "Data Joins in R\nRecall the x and y tibbles from last time."
  },
  {
    "objectID": "slides/w10d1.html#types-of-data-joins",
    "href": "slides/w10d1.html#types-of-data-joins",
    "title": "Reshaping data with tidyr",
    "section": "Types of Data Joins",
    "text": "Types of Data Joins\nThe dplyr package includes functions for two general types of joins:\n\nMutating joins, which combine the columns of tibbles x and y, and\nFiltering joins, which match the rows of tibbles x and y.\n\nThink of how mutate() adds columns to a tibble, while filter() removes rows."
  },
  {
    "objectID": "slides/w10d1.html#mutating-joins",
    "href": "slides/w10d1.html#mutating-joins",
    "title": "Reshaping data with tidyr",
    "section": "Mutating Joins",
    "text": "Mutating Joins\ndplyr contains four mutating joins:\n\nleft_join(x, y) keeps all rows of x, but if a row in y does not match to x, an NA is assigned to that row in the new columns.\nright_join(x, y) is equivalent to left_join(y, x), except for column order.\ninner_join(x, y) keeps only the rows matched between x and y.\nfull_join(x, y) keeps all rows of both x and y."
  },
  {
    "objectID": "slides/w10d1.html#filtering-joins",
    "href": "slides/w10d1.html#filtering-joins",
    "title": "Reshaping data with tidyr",
    "section": "Filtering Joins",
    "text": "Filtering Joins\ndplyr contains two filtering joins:\n\nsemi_join(x, y) keeps all the rows in x that have a match in y.\nanti_join(x, y) removes all the rows in x that have a match in y.\n\nNote: Unlike mutating joins, filtering joins do not add any columns to the data."
  },
  {
    "objectID": "slides/w10d1.html#loading-data",
    "href": "slides/w10d1.html#loading-data",
    "title": "Reshaping data with tidyr",
    "section": "Loading data",
    "text": "Loading data\nWe’ll create the x and y tibbles in R:\n\nlibrary(tidyverse)\nx &lt;- tibble(spp_code = c(\"ABBA\", \"BEPA\", \"PIST\"),\n            common_name = c(\"balsum fir\", \"paper birch\", \"white pine\"))\n\ny &lt;- tibble(spp_code = c(\"ABBA\", \"BEPA\", \"LALA\"),\n            latin_name = c(\"Abies balsamea\", \n                           \"Betula papyrifera\",\n                           \"Larix laricina\"))"
  },
  {
    "objectID": "slides/w10d1.html#loading-data-1",
    "href": "slides/w10d1.html#loading-data-1",
    "title": "Reshaping data with tidyr",
    "section": "Loading data",
    "text": "Loading data\nWe’ll create the x and y tibbles in R:\n\nx\n\n# A tibble: 3 × 2\n  spp_code common_name\n  &lt;chr&gt;    &lt;chr&gt;      \n1 ABBA     balsum fir \n2 BEPA     paper birch\n3 PIST     white pine \n\ny\n\n# A tibble: 3 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera\n3 LALA     Larix laricina"
  },
  {
    "objectID": "slides/w10d1.html#q1.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q1.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q1. Write the code to get this output",
    "text": "Q1. Write the code to get this output\n\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q1.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q1.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q1. Write the code to get this output",
    "text": "Q1. Write the code to get this output\n\nleft_join(x, y, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;"
  },
  {
    "objectID": "slides/w10d1.html#q2.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q2.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q2. Write the code to get this output",
    "text": "Q2. Write the code to get this output\n\n\n# A tibble: 4 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n4 LALA     &lt;NA&gt;        Larix laricina   \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q2.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q2.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q2. Write the code to get this output",
    "text": "Q2. Write the code to get this output\n\nfull_join(x, y, by = \"spp_code\")\n\n# A tibble: 4 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 PIST     white pine  &lt;NA&gt;             \n4 LALA     &lt;NA&gt;        Larix laricina"
  },
  {
    "objectID": "slides/w10d1.html#q3.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q3.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q3. Write the code to get this output",
    "text": "Q3. Write the code to get this output\n\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 LALA     Larix laricina    &lt;NA&gt;       \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q3.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q3.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q3. Write the code to get this output",
    "text": "Q3. Write the code to get this output\n\nleft_join(y, x, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 LALA     Larix laricina    &lt;NA&gt;"
  },
  {
    "objectID": "slides/w10d1.html#q4.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q4.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q4. Write the code to get this output",
    "text": "Q4. Write the code to get this output\n\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 LALA     &lt;NA&gt;        Larix laricina   \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q4.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q4.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q4. Write the code to get this output",
    "text": "Q4. Write the code to get this output\n\nright_join(x, y, by = \"spp_code\")\n\n# A tibble: 3 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n3 LALA     &lt;NA&gt;        Larix laricina"
  },
  {
    "objectID": "slides/w10d1.html#q5.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q5.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q5. Write the code to get this output",
    "text": "Q5. Write the code to get this output\n\n\n# A tibble: 2 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q5.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q5.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q5. Write the code to get this output",
    "text": "Q5. Write the code to get this output\n\ninner_join(x, y, by = \"spp_code\")\n\n# A tibble: 2 × 3\n  spp_code common_name latin_name       \n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA     balsum fir  Abies balsamea   \n2 BEPA     paper birch Betula papyrifera"
  },
  {
    "objectID": "slides/w10d1.html#q6.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q6.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q6. Write the code to get this output",
    "text": "Q6. Write the code to get this output\n\n\n# A tibble: 4 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 LALA     Larix laricina    &lt;NA&gt;       \n4 PIST     &lt;NA&gt;              white pine \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q6.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q6.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q6. Write the code to get this output",
    "text": "Q6. Write the code to get this output\n\nfull_join(y, x, by = \"spp_code\")\n\n# A tibble: 4 × 3\n  spp_code latin_name        common_name\n  &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;      \n1 ABBA     Abies balsamea    balsum fir \n2 BEPA     Betula papyrifera paper birch\n3 LALA     Larix laricina    &lt;NA&gt;       \n4 PIST     &lt;NA&gt;              white pine"
  },
  {
    "objectID": "slides/w10d1.html#consider-a-third-tibble-z",
    "href": "slides/w10d1.html#consider-a-third-tibble-z",
    "title": "Reshaping data with tidyr",
    "section": "Consider a third tibble, z:",
    "text": "Consider a third tibble, z:\n\nz &lt;- x %&gt;%\n  rename(species_code = spp_code)\nz\n\n# A tibble: 3 × 2\n  species_code common_name\n  &lt;chr&gt;        &lt;chr&gt;      \n1 ABBA         balsum fir \n2 BEPA         paper birch\n3 PIST         white pine"
  },
  {
    "objectID": "slides/w10d1.html#q7.-write-the-code-to-get-this-output",
    "href": "slides/w10d1.html#q7.-write-the-code-to-get-this-output",
    "title": "Reshaping data with tidyr",
    "section": "Q7. Write the code to get this output",
    "text": "Q7. Write the code to get this output\n\n\n# A tibble: 3 × 3\n  species_code common_name latin_name       \n  &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA         balsum fir  Abies balsamea   \n2 BEPA         paper birch Betula papyrifera\n3 PIST         white pine  &lt;NA&gt;             \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q7.-write-the-code-to-get-this-output-1",
    "href": "slides/w10d1.html#q7.-write-the-code-to-get-this-output-1",
    "title": "Reshaping data with tidyr",
    "section": "Q7. Write the code to get this output",
    "text": "Q7. Write the code to get this output\n\nleft_join(z, y, by = c(\"species_code\" = \"spp_code\"))\n\n# A tibble: 3 × 3\n  species_code common_name latin_name       \n  &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;            \n1 ABBA         balsum fir  Abies balsamea   \n2 BEPA         paper birch Betula papyrifera\n3 PIST         white pine  &lt;NA&gt;"
  },
  {
    "objectID": "slides/w10d1.html#q8.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "href": "slides/w10d1.html#q8.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "title": "Reshaping data with tidyr",
    "section": "Q8. Write the code to get this output (hint: use a filtering join)",
    "text": "Q8. Write the code to get this output (hint: use a filtering join)\n\n\n# A tibble: 2 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q8.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "href": "slides/w10d1.html#q8.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "title": "Reshaping data with tidyr",
    "section": "Q8. Write the code to get this output (hint: use a filtering join)",
    "text": "Q8. Write the code to get this output (hint: use a filtering join)\n\nsemi_join(y, x, by = \"spp_code\")\n\n# A tibble: 2 × 2\n  spp_code latin_name       \n  &lt;chr&gt;    &lt;chr&gt;            \n1 ABBA     Abies balsamea   \n2 BEPA     Betula papyrifera"
  },
  {
    "objectID": "slides/w10d1.html#q9.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "href": "slides/w10d1.html#q9.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "title": "Reshaping data with tidyr",
    "section": "Q9. Write the code to get this output (hint: use a filtering join)",
    "text": "Q9. Write the code to get this output (hint: use a filtering join)\n\n\n# A tibble: 1 × 2\n  species_code common_name\n  &lt;chr&gt;        &lt;chr&gt;      \n1 PIST         white pine \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q9.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "href": "slides/w10d1.html#q9.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "title": "Reshaping data with tidyr",
    "section": "Q9. Write the code to get this output (hint: use a filtering join)",
    "text": "Q9. Write the code to get this output (hint: use a filtering join)\n\nanti_join(z, y, by = c(\"species_code\" = \"spp_code\"))\n\n# A tibble: 1 × 2\n  species_code common_name\n  &lt;chr&gt;        &lt;chr&gt;      \n1 PIST         white pine"
  },
  {
    "objectID": "slides/w10d1.html#q10.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "href": "slides/w10d1.html#q10.-write-the-code-to-get-this-output-hint-use-a-filtering-join",
    "title": "Reshaping data with tidyr",
    "section": "Q10. Write the code to get this output (hint: use a filtering join)",
    "text": "Q10. Write the code to get this output (hint: use a filtering join)\n\n\n# A tibble: 1 × 2\n  spp_code latin_name    \n  &lt;chr&gt;    &lt;chr&gt;         \n1 LALA     Larix laricina\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w10d1.html#q10.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "href": "slides/w10d1.html#q10.-write-the-code-to-get-this-output-hint-use-a-filtering-join-1",
    "title": "Reshaping data with tidyr",
    "section": "Q10. Write the code to get this output (hint: use a filtering join)",
    "text": "Q10. Write the code to get this output (hint: use a filtering join)\n\nanti_join(y, x, by = \"spp_code\")\n\n# A tibble: 1 × 2\n  spp_code latin_name    \n  &lt;chr&gt;    &lt;chr&gt;         \n1 LALA     Larix laricina\n\n# or \nanti_join(y, z, by = c(\"spp_code\" = \"species_code\"))\n\n# A tibble: 1 × 2\n  spp_code latin_name    \n  &lt;chr&gt;    &lt;chr&gt;         \n1 LALA     Larix laricina"
  },
  {
    "objectID": "slides/w10d1.html#the-tidyr-package",
    "href": "slides/w10d1.html#the-tidyr-package",
    "title": "Reshaping data with tidyr",
    "section": "The tidyr package",
    "text": "The tidyr package\n\n\nThe tidyr package allows us to transform data from long to wide formats, and back.\nA key use of the tidyr package is getting data in tidy format.\nBut what is tidy format?"
  },
  {
    "objectID": "slides/w10d1.html#tidy-data",
    "href": "slides/w10d1.html#tidy-data",
    "title": "Reshaping data with tidyr",
    "section": "Tidy data",
    "text": "Tidy data\n“Tidy data” or “tidy format” is a formal concept of how we organize data for analyses, in particular, with tidy data:\n\n\nEach row of the data correspond to a single observation, and\nEach column of the data correspond to a variable."
  },
  {
    "objectID": "slides/w10d1.html#tidy-data-1",
    "href": "slides/w10d1.html#tidy-data-1",
    "title": "Reshaping data with tidyr",
    "section": "Tidy data",
    "text": "Tidy data\n“Tidy data” or “tidy format” is a formal concept of how we organize data for analyses, in particular, with tidy data:\n\nEach row of the data correspond to a single observation, and\nEach column of the data correspond to a variable.\n\nLet’s take a look at a blog post from Julie Lowndes and Allison Horst about tidy data"
  },
  {
    "objectID": "slides/w10d1.html#tidying-data-with-tidyr",
    "href": "slides/w10d1.html#tidying-data-with-tidyr",
    "title": "Reshaping data with tidyr",
    "section": "Tidying data with tidyr",
    "text": "Tidying data with tidyr\nConsider the face dataset from IFDAR:\n\nface &lt;- read_csv(\"../labs/datasets/FACE/FACE_aspen_core_growth.csv\") %&gt;%\n  select(Rep, Treat, Clone, ID = `ID #`,\n        contains(as.character(2001:2005)) & contains(\"Height\"))\nface\n\n# A tibble: 1,991 × 9\n     Rep Treat Clone    ID `2001_Height` `2002_Height` `2003_Height`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1     1     1     8    45            NA            NA            NA\n 2     1     1   216    44           547           622           715\n 3     1     1     8    43           273           275           305\n 4     1     1   216    42           526           619           720\n 5     1     1   216    54           328           341           364\n 6     1     1   271    55           543           590           634\n 7     1     1   271    56           450           502           587\n 8     1     1     8    57           217           227           256\n 9     1     1   259    58           158           155            NA\n10     1     1   271    59           230           241           260\n# ℹ 1,981 more rows\n# ℹ 2 more variables: `2004_Height` &lt;dbl&gt;, `2005_Height` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w10d1.html#tidying-data-with-tidyr-1",
    "href": "slides/w10d1.html#tidying-data-with-tidyr-1",
    "title": "Reshaping data with tidyr",
    "section": "Tidying data with tidyr",
    "text": "Tidying data with tidyr\nIs this data tidy? If so, what does a row represent? What does a column represent?\n\nface\n\n# A tibble: 1,991 × 9\n     Rep Treat Clone    ID `2001_Height` `2002_Height` `2003_Height`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1     1     1     8    45            NA            NA            NA\n 2     1     1   216    44           547           622           715\n 3     1     1     8    43           273           275           305\n 4     1     1   216    42           526           619           720\n 5     1     1   216    54           328           341           364\n 6     1     1   271    55           543           590           634\n 7     1     1   271    56           450           502           587\n 8     1     1     8    57           217           227           256\n 9     1     1   259    58           158           155            NA\n10     1     1   271    59           230           241           260\n# ℹ 1,981 more rows\n# ℹ 2 more variables: `2004_Height` &lt;dbl&gt;, `2005_Height` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/w10d1.html#how-do-we-make-this-data-tidy",
    "href": "slides/w10d1.html#how-do-we-make-this-data-tidy",
    "title": "Reshaping data with tidyr",
    "section": "How do we make this data tidy? 🤔",
    "text": "How do we make this data tidy? 🤔\n\nface\n\n# A tibble: 1,991 × 9\n     Rep Treat Clone    ID `2001_Height` `2002_Height` `2003_Height`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1     1     1     8    45            NA            NA            NA\n 2     1     1   216    44           547           622           715\n 3     1     1     8    43           273           275           305\n 4     1     1   216    42           526           619           720\n 5     1     1   216    54           328           341           364\n 6     1     1   271    55           543           590           634\n 7     1     1   271    56           450           502           587\n 8     1     1     8    57           217           227           256\n 9     1     1   259    58           158           155            NA\n10     1     1   271    59           230           241           260\n# ℹ 1,981 more rows\n# ℹ 2 more variables: `2004_Height` &lt;dbl&gt;, `2005_Height` &lt;dbl&gt;\n\n\n\n\nEach row should represent a measurement for a given rep, treatment, clone, and ID. But currently, we have multiple measurements on the same row.\nFurther, we have multiple columns for the “height” variable.\nNot tidy!"
  },
  {
    "objectID": "slides/w10d1.html#we-need-to-pivot-the-data-into-a-longer-format",
    "href": "slides/w10d1.html#we-need-to-pivot-the-data-into-a-longer-format",
    "title": "Reshaping data with tidyr",
    "section": "We need to pivot the data into a longer format!",
    "text": "We need to pivot the data into a longer format!\nEnter, pivot_longer().\npivot_longer(), a function from tidyr takes four key arguments:\n\n\n.data: the data (tibble) you’d like to pivot,\ncols: the columns you’d like to pivot,\nnames_to: the new column that will be created which takes the column names from cols as values, and\nvalues_to: the new column that will be created which takes the column values from cols as values."
  },
  {
    "objectID": "slides/w10d1.html#why-the-long-face",
    "href": "slides/w10d1.html#why-the-long-face",
    "title": "Reshaping data with tidyr",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = c(\"2001_Height\", \"2002_Height\", \"2003_Height\", \n             \"2004_Height\", \"2005_Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")"
  },
  {
    "objectID": "slides/w10d1.html#why-the-long-face-1",
    "href": "slides/w10d1.html#why-the-long-face-1",
    "title": "Reshaping data with tidyr",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = c(\"2001_Height\", \"2002_Height\", \"2003_Height\", \n             \"2004_Height\", \"2005_Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")"
  },
  {
    "objectID": "slides/w10d1.html#why-the-long-face-2",
    "href": "slides/w10d1.html#why-the-long-face-2",
    "title": "Reshaping data with tidyr",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long &lt;- face %&gt;%\n  pivot_longer(\n    cols = contains(\"Height\"),\n    names_to = \"Year_Type\",\n    values_to = \"Height_cm\")\n\n\nA cleaner way to select these columns is to use dplyr’s contains() function."
  },
  {
    "objectID": "slides/w10d1.html#why-the-long-face-3",
    "href": "slides/w10d1.html#why-the-long-face-3",
    "title": "Reshaping data with tidyr",
    "section": "Why the long face?",
    "text": "Why the long face?\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows\n\n\n\nTo get tidy data!"
  },
  {
    "objectID": "slides/w10d1.html#going-back-to-wide-data",
    "href": "slides/w10d1.html#going-back-to-wide-data",
    "title": "Reshaping data with tidyr",
    "section": "Going (back) to wide data",
    "text": "Going (back) to wide data\n\n\nSometimes, we need to “widen” a dataset to get it into tidy format.\nFor this example, we will just widen the face_long dataset back to its original form.\ntidyr has an aptly named function, pivot_wider().\nKey arguments of pivot_wider():\n\n.data: the tibble to widen,\nnames_from: the column that contains values which will be assigned as the new column names,\nvalues_from: the column that contains"
  },
  {
    "objectID": "slides/w10d1.html#pivoting-wider",
    "href": "slides/w10d1.html#pivoting-wider",
    "title": "Reshaping data with tidyr",
    "section": "Pivoting wider",
    "text": "Pivoting wider\n\nface_wide &lt;- face_long %&gt;%\n  pivot_wider(names_from = \"Year_Type\", values_from = \"Height_cm\")\n\nall_equal(face, face_wide)\n\n[1] TRUE\n\n\n\n\nThis results in the same tibble that we started with!"
  },
  {
    "objectID": "slides/w10d1.html#other-useful-tidyr-functions",
    "href": "slides/w10d1.html#other-useful-tidyr-functions",
    "title": "Reshaping data with tidyr",
    "section": "Other useful tidyr functions",
    "text": "Other useful tidyr functions\n\n\nunite() for pasteing column values together with specified seperators,\nThe separate_wider_*() family: for splitting columns into multiple new columns:\n\nseparate_wider_delim(): separate by delimiter\nseparate_wider_position(): separate by position\nseparate_wider_regex(): separate by regular expression"
  },
  {
    "objectID": "slides/w10d1.html#unite-examples",
    "href": "slides/w10d1.html#unite-examples",
    "title": "Reshaping data with tidyr",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#unite-examples-1",
    "href": "slides/w10d1.html#unite-examples-1",
    "title": "Reshaping data with tidyr",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \"_\")\n\n# A tibble: 9,955 × 4\n   Design     ID Year_Type   Height_cm\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1_1_8      45 2001_Height        NA\n 2 1_1_8      45 2002_Height        NA\n 3 1_1_8      45 2003_Height        NA\n 4 1_1_8      45 2004_Height        NA\n 5 1_1_8      45 2005_Height        NA\n 6 1_1_216    44 2001_Height       547\n 7 1_1_216    44 2002_Height       622\n 8 1_1_216    44 2003_Height       715\n 9 1_1_216    44 2004_Height       716\n10 1_1_216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#unite-examples-2",
    "href": "slides/w10d1.html#unite-examples-2",
    "title": "Reshaping data with tidyr",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \".\")\n\n# A tibble: 9,955 × 4\n   Design     ID Year_Type   Height_cm\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1.1.8      45 2001_Height        NA\n 2 1.1.8      45 2002_Height        NA\n 3 1.1.8      45 2003_Height        NA\n 4 1.1.8      45 2004_Height        NA\n 5 1.1.8      45 2005_Height        NA\n 6 1.1.216    44 2001_Height       547\n 7 1.1.216    44 2002_Height       622\n 8 1.1.216    44 2003_Height       715\n 9 1.1.216    44 2004_Height       716\n10 1.1.216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#unite-examples-3",
    "href": "slides/w10d1.html#unite-examples-3",
    "title": "Reshaping data with tidyr",
    "section": "unite(): examples",
    "text": "unite(): examples\n\nface_long_abc &lt;- face_long %&gt;%\n  unite(col = \"Design\", Rep, Treat, Clone, sep = \"abc\")\nface_long_abc\n\n# A tibble: 9,955 × 4\n   Design         ID Year_Type   Height_cm\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1abc1abc8      45 2001_Height        NA\n 2 1abc1abc8      45 2002_Height        NA\n 3 1abc1abc8      45 2003_Height        NA\n 4 1abc1abc8      45 2004_Height        NA\n 5 1abc1abc8      45 2005_Height        NA\n 6 1abc1abc216    44 2001_Height       547\n 7 1abc1abc216    44 2002_Height       622\n 8 1abc1abc216    44 2003_Height       715\n 9 1abc1abc216    44 2004_Height       716\n10 1abc1abc216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#separate_wider_delim-examples",
    "href": "slides/w10d1.html#separate_wider_delim-examples",
    "title": "Reshaping data with tidyr",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long_abc\n\n# A tibble: 9,955 × 4\n   Design         ID Year_Type   Height_cm\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1abc1abc8      45 2001_Height        NA\n 2 1abc1abc8      45 2002_Height        NA\n 3 1abc1abc8      45 2003_Height        NA\n 4 1abc1abc8      45 2004_Height        NA\n 5 1abc1abc8      45 2005_Height        NA\n 6 1abc1abc216    44 2001_Height       547\n 7 1abc1abc216    44 2002_Height       622\n 8 1abc1abc216    44 2003_Height       715\n 9 1abc1abc216    44 2004_Height       716\n10 1abc1abc216    44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#separate_wider_delim-examples-1",
    "href": "slides/w10d1.html#separate_wider_delim-examples-1",
    "title": "Reshaping data with tidyr",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long_abc %&gt;%\n  separate_wider_delim(cols = \"Design\", \n                       delim = \"abc\",\n                       names = c(\"Rep\", \"Treat\", \"Clone\"))\n\n# A tibble: 9,955 × 6\n   Rep   Treat Clone    ID Year_Type   Height_cm\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 1     1     8        45 2001_Height        NA\n 2 1     1     8        45 2002_Height        NA\n 3 1     1     8        45 2003_Height        NA\n 4 1     1     8        45 2004_Height        NA\n 5 1     1     8        45 2005_Height        NA\n 6 1     1     216      44 2001_Height       547\n 7 1     1     216      44 2002_Height       622\n 8 1     1     216      44 2003_Height       715\n 9 1     1     216      44 2004_Height       716\n10 1     1     216      44 2005_Height       817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#separate_wider_delim-examples-2",
    "href": "slides/w10d1.html#separate_wider_delim-examples-2",
    "title": "Reshaping data with tidyr",
    "section": "separate_wider_delim() examples",
    "text": "separate_wider_delim() examples\n\nface_long\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year_Type   Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1     1     1     8    45 2001_Height        NA\n 2     1     1     8    45 2002_Height        NA\n 3     1     1     8    45 2003_Height        NA\n 4     1     1     8    45 2004_Height        NA\n 5     1     1     8    45 2005_Height        NA\n 6     1     1   216    44 2001_Height       547\n 7     1     1   216    44 2002_Height       622\n 8     1     1   216    44 2003_Height       715\n 9     1     1   216    44 2004_Height       716\n10     1     1   216    44 2005_Height       817\n# ℹ 9,945 more rows\n\n\n\nface_long %&gt;%\n  separate_wider_delim(cols = \"Year_Type\", \n                       delim = \"_\",\n                       names = c(\"Year\", NA))\n\n# A tibble: 9,955 × 6\n     Rep Treat Clone    ID Year  Height_cm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1     1     1     8    45 2001         NA\n 2     1     1     8    45 2002         NA\n 3     1     1     8    45 2003         NA\n 4     1     1     8    45 2004         NA\n 5     1     1     8    45 2005         NA\n 6     1     1   216    44 2001        547\n 7     1     1   216    44 2002        622\n 8     1     1   216    44 2003        715\n 9     1     1   216    44 2004        716\n10     1     1   216    44 2005        817\n# ℹ 9,945 more rows"
  },
  {
    "objectID": "slides/w10d1.html#next-time",
    "href": "slides/w10d1.html#next-time",
    "title": "Reshaping data with tidyr",
    "section": "Next time",
    "text": "Next time\n\nMore reshaping data with tidyr"
  },
  {
    "objectID": "slides/w7d2.html#announcements",
    "href": "slides/w7d2.html#announcements",
    "title": "Intro to dplyr",
    "section": "Announcements",
    "text": "Announcements\n\nMidterm 1 were released yesterday.\nLab 5 grades coming soon."
  },
  {
    "objectID": "slides/w7d2.html#agenda",
    "href": "slides/w7d2.html#agenda",
    "title": "Intro to dplyr",
    "section": "Agenda",
    "text": "Agenda\n\ndplyr verbs"
  },
  {
    "objectID": "slides/w7d2.html#filter",
    "href": "slides/w7d2.html#filter",
    "title": "Intro to dplyr",
    "section": "filter()",
    "text": "filter()\n\nSubsets rows of data based on logical conditions related to one or more columns in the dataset."
  },
  {
    "objectID": "slides/w7d2.html#data",
    "href": "slides/w7d2.html#data",
    "title": "Intro to dplyr",
    "section": "Data",
    "text": "Data\n\nConsider our favorite toy dataset:\n\n\nlibrary(tidyverse)\npets &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\"),\n  ages = c(6, 5, 3, 11),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE)\n)\npets\n\n# A tibble: 4 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n3 Kyle       3 FALSE \n4 Nubs      11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-ages-greater-than-5",
    "href": "slides/w7d2.html#filter-ages-greater-than-5",
    "title": "Intro to dplyr",
    "section": "filter() ages greater than 5",
    "text": "filter() ages greater than 5\n\nfilter(pets, ages &gt; 5)\n\n# A tibble: 2 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n2 Nubs     11 FALSE \n\n\n\n\nNotice the pattern: filter(dataset, logical statement)\nThe first argument in filter(), and the other dplyr function we will learn, is the dataset we’d like to operate on."
  },
  {
    "objectID": "slides/w7d2.html#filter-dogs-with-ages-greater-than-5",
    "href": "slides/w7d2.html#filter-dogs-with-ages-greater-than-5",
    "title": "Intro to dplyr",
    "section": "filter() dogs with ages greater than 5",
    "text": "filter() dogs with ages greater than 5\n\nfilter(pets, ages &gt; 5, is_dog)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE"
  },
  {
    "objectID": "slides/w7d2.html#filter-dogs-with-ages-greater-than-5-1",
    "href": "slides/w7d2.html#filter-dogs-with-ages-greater-than-5-1",
    "title": "Intro to dplyr",
    "section": "filter() dogs with ages greater than 5",
    "text": "filter() dogs with ages greater than 5\n\nfilter(pets, ages &gt; 5, is_dog)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n\n\nWe can equivalently write:\n\nfilter(pets, ages &gt; 5 & is_dog)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n\n\n\n\nIn filter() the comma between logical statements is the same as &."
  },
  {
    "objectID": "slides/w7d2.html#filter-for-pets-named-pickle",
    "href": "slides/w7d2.html#filter-for-pets-named-pickle",
    "title": "Intro to dplyr",
    "section": "filter() for pets named Pickle",
    "text": "filter() for pets named Pickle\n\nfilter(pets, names == \"Pickle\")\n\n# A tibble: 1 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Pickle     5 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-pets-named-pickle-or-dude",
    "href": "slides/w7d2.html#filter-for-pets-named-pickle-or-dude",
    "title": "Intro to dplyr",
    "section": "filter() for pets named Pickle or Dude",
    "text": "filter() for pets named Pickle or Dude\n\nfilter(pets, names %in% c(\"Pickle\", \"Dude\"))\n\n# A tibble: 2 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs",
    "href": "slides/w7d2.html#filter-for-non-dogs",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs",
    "text": "filter() for non-dogs\n\n\n# A tibble: 4 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n3 Kyle       3 FALSE \n4 Nubs      11 FALSE \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-1",
    "href": "slides/w7d2.html#filter-for-non-dogs-1",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs",
    "text": "filter() for non-dogs\n\nfilter(pets, !is_dog)\n\n# A tibble: 3 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Pickle     5 FALSE \n2 Kyle       3 FALSE \n3 Nubs      11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-2",
    "href": "slides/w7d2.html#filter-for-non-dogs-2",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs",
    "text": "filter() for non-dogs\n\nfilter(pets, !is_dog)\n\n# A tibble: 3 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Pickle     5 FALSE \n2 Kyle       3 FALSE \n3 Nubs      11 FALSE \n\n# or\nfilter(pets, is_dog == FALSE)\n\n# A tibble: 3 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Pickle     5 FALSE \n2 Kyle       3 FALSE \n3 Nubs      11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10",
    "href": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs with age greater than 10",
    "text": "filter() for non-dogs with age greater than 10\n\n\n# A tibble: 4 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n3 Kyle       3 FALSE \n4 Nubs      11 FALSE \n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-1",
    "href": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-1",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs with age greater than 10",
    "text": "filter() for non-dogs with age greater than 10\n\nfilter(pets, !is_dog & ages &gt; 10)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-2",
    "href": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-2",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs with age greater than 10",
    "text": "filter() for non-dogs with age greater than 10\n\nfilter(pets, !is_dog & ages &gt; 10)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE \n\n# or \nfilter(pets, !is_dog, ages &gt; 10)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-3",
    "href": "slides/w7d2.html#filter-for-non-dogs-with-age-greater-than-10-3",
    "title": "Intro to dplyr",
    "section": "filter() for non-dogs with age greater than 10",
    "text": "filter() for non-dogs with age greater than 10\n\nfilter(pets, !is_dog & ages &gt; 10)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE \n\n# or \nfilter(pets, !is_dog, ages &gt; 10)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE \n\n# or \nfilter(pets, is_dog == FALSE, ages &gt; 10) # etc...\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#slice-1",
    "href": "slides/w7d2.html#slice-1",
    "title": "Intro to dplyr",
    "section": "slice()",
    "text": "slice()\nThere are five variations of slice() that we will learn in this course:\n\n\nslice(): for getting rows or sets of rows by index,\nslice_head(): for getting the first few (n) rows,\nslice_tail(): for getting the last few (n) rows,\nslice_min(): for getting the row with the minimum value of some column,\nslice_max(): for getting the row with the maximum value of some column."
  },
  {
    "objectID": "slides/w7d2.html#slice-2",
    "href": "slides/w7d2.html#slice-2",
    "title": "Intro to dplyr",
    "section": "slice()",
    "text": "slice()"
  },
  {
    "objectID": "slides/w7d2.html#get-the-first-and-third-rows-of-pets",
    "href": "slides/w7d2.html#get-the-first-and-third-rows-of-pets",
    "title": "Intro to dplyr",
    "section": "Get the first and third rows of pets",
    "text": "Get the first and third rows of pets\n\nslice(pets, 1, 3)\n\n# A tibble: 2 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n2 Kyle      3 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-first-and-third-rows-of-pets-1",
    "href": "slides/w7d2.html#get-the-first-and-third-rows-of-pets-1",
    "title": "Intro to dplyr",
    "section": "Get the first and third rows of pets",
    "text": "Get the first and third rows of pets\n\nslice(pets, 1, 3)\n\n# A tibble: 2 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n2 Kyle      3 FALSE \n\n# or, equivalently\nslice(pets, c(1,3))\n\n# A tibble: 2 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude      6 TRUE  \n2 Kyle      3 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-first-two-rows-of-pets",
    "href": "slides/w7d2.html#get-the-first-two-rows-of-pets",
    "title": "Intro to dplyr",
    "section": "Get the first two rows of pets",
    "text": "Get the first two rows of pets\n\nslice(pets, 1, 2)\n\n# A tibble: 2 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-first-two-rows-of-pets-1",
    "href": "slides/w7d2.html#get-the-first-two-rows-of-pets-1",
    "title": "Intro to dplyr",
    "section": "Get the first two rows of pets",
    "text": "Get the first two rows of pets\n\nslice(pets, 1, 2)\n\n# A tibble: 2 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE \n\n# or, equivalently\nslice_head(pets, n = 2)\n\n# A tibble: 2 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6 TRUE  \n2 Pickle     5 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-last-row-of-pets",
    "href": "slides/w7d2.html#get-the-last-row-of-pets",
    "title": "Intro to dplyr",
    "section": "Get the last row of pets",
    "text": "Get the last row of pets\n\nslice_tail(pets)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE \n\n\n\n\nNote that in slice_tail() (and slice_head()) the default for n is 1."
  },
  {
    "objectID": "slides/w7d2.html#get-the-last-row-of-pets-1",
    "href": "slides/w7d2.html#get-the-last-row-of-pets-1",
    "title": "Intro to dplyr",
    "section": "Get the last row of pets",
    "text": "Get the last row of pets\n\nslice_tail(pets)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE \n\n\n\nNote that in slice_tail() (and slice_head()) the default for n is 1.\n\n\nslice_tail(pets, n = 1) # exactly the same as above\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-pet-who-is-the-youngest",
    "href": "slides/w7d2.html#get-the-pet-who-is-the-youngest",
    "title": "Intro to dplyr",
    "section": "Get the pet who is the youngest",
    "text": "Get the pet who is the youngest\n\nslice_min(pets, ages)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Kyle      3 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-pet-who-is-the-oldest",
    "href": "slides/w7d2.html#get-the-pet-who-is-the-oldest",
    "title": "Intro to dplyr",
    "section": "Get the pet who is the oldest",
    "text": "Get the pet who is the oldest\n\nslice_max(pets, ages)\n\n# A tibble: 1 × 3\n  names  ages is_dog\n  &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs     11 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#get-the-two-youngest-pets",
    "href": "slides/w7d2.html#get-the-two-youngest-pets",
    "title": "Intro to dplyr",
    "section": "Get the two youngest pets",
    "text": "Get the two youngest pets\n\nslice_min(pets, ages, n = 2)\n\n# A tibble: 2 × 3\n  names   ages is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt; \n1 Kyle       3 FALSE \n2 Pickle     5 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-1",
    "href": "slides/w7d2.html#arrange-1",
    "title": "Intro to dplyr",
    "section": "arrange()",
    "text": "arrange()\n\n\narrange() orders rows based on values in one or more columns.\nBy default, arrange() puts smallest values at the top.\nIf you’d like largest values at the top, we can use the desc() function (named for descending order)\nWhen we arrange() by more than one column, the following columns “break ties” in the prior columns."
  },
  {
    "objectID": "slides/w7d2.html#arrange-2",
    "href": "slides/w7d2.html#arrange-2",
    "title": "Intro to dplyr",
    "section": "arrange()",
    "text": "arrange()"
  },
  {
    "objectID": "slides/w7d2.html#consider-a-modifed-pets-dataset",
    "href": "slides/w7d2.html#consider-a-modifed-pets-dataset",
    "title": "Intro to dplyr",
    "section": "Consider a modifed pets dataset",
    "text": "Consider a modifed pets dataset\n\nmore_pets &lt;- tibble(\n  names = c(\"Dude\", \"Pickle\", \"Kyle\", \"Nubs\", \"Marvin\", \"Figaro\", \"Slim\"),\n  ages = c(6, 5, 3, 11, 11, 3, 6),\n  meals_per_day = c(2, 3, 3, 3, 1, 2, 2),\n  is_dog = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)  \n)\nmore_pets\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-age",
    "href": "slides/w7d2.html#arrange-more_pets-by-age",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by age",
    "text": "arrange() more_pets by age\n\narrange(more_pets, ages)\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Kyle       3             3 FALSE \n2 Figaro     3             2 FALSE \n3 Pickle     5             3 FALSE \n4 Dude       6             2 TRUE  \n5 Slim       6             2 TRUE  \n6 Nubs      11             3 FALSE \n7 Marvin    11             1 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-age-greatest-first",
    "href": "slides/w7d2.html#arrange-more_pets-by-age-greatest-first",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by age, greatest first",
    "text": "arrange() more_pets by age, greatest first\n\narrange(more_pets, desc(ages))\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Nubs      11             3 FALSE \n2 Marvin    11             1 FALSE \n3 Dude       6             2 TRUE  \n4 Slim       6             2 TRUE  \n5 Pickle     5             3 FALSE \n6 Kyle       3             3 FALSE \n7 Figaro     3             2 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-age-and-then-meals-per-day",
    "href": "slides/w7d2.html#arrange-more_pets-by-age-and-then-meals-per-day",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by age and then meals per day",
    "text": "arrange() more_pets by age and then meals per day\n\narrange(more_pets, ages, meals_per_day)\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Figaro     3             2 FALSE \n2 Kyle       3             3 FALSE \n3 Pickle     5             3 FALSE \n4 Dude       6             2 TRUE  \n5 Slim       6             2 TRUE  \n6 Marvin    11             1 FALSE \n7 Nubs      11             3 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-is_dog",
    "href": "slides/w7d2.html#arrange-more_pets-by-is_dog",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by is_dog",
    "text": "arrange() more_pets by is_dog\n\narrange(more_pets, is_dog)\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Pickle     5             3 FALSE \n2 Kyle       3             3 FALSE \n3 Nubs      11             3 FALSE \n4 Marvin    11             1 FALSE \n5 Figaro     3             2 FALSE \n6 Dude       6             2 TRUE  \n7 Slim       6             2 TRUE  \n\n\n\n\nWhen arrange()ing with a logical column, FALSE is before TRUE\nWe can switch this with desc()"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-is_dog-true-first",
    "href": "slides/w7d2.html#arrange-more_pets-by-is_dog-true-first",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by is_dog, TRUE first",
    "text": "arrange() more_pets by is_dog, TRUE first\n\narrange(more_pets, desc(is_dog))\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Slim       6             2 TRUE  \n3 Pickle     5             3 FALSE \n4 Kyle       3             3 FALSE \n5 Nubs      11             3 FALSE \n6 Marvin    11             1 FALSE \n7 Figaro     3             2 FALSE"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-names",
    "href": "slides/w7d2.html#arrange-more_pets-by-names",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by names",
    "text": "arrange() more_pets by names\n\narrange(more_pets, names)\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Figaro     3             2 FALSE \n3 Kyle       3             3 FALSE \n4 Marvin    11             1 FALSE \n5 Nubs      11             3 FALSE \n6 Pickle     5             3 FALSE \n7 Slim       6             2 TRUE  \n\n\n\n\nWhat happened here?\nAlphabetical order!\nWhat will happen if we use desc() on names?"
  },
  {
    "objectID": "slides/w7d2.html#arrange-more_pets-by-names-descending",
    "href": "slides/w7d2.html#arrange-more_pets-by-names-descending",
    "title": "Intro to dplyr",
    "section": "arrange() more_pets by names, descending",
    "text": "arrange() more_pets by names, descending\n\narrange(more_pets, desc(names))\n\n# A tibble: 7 × 4\n  names   ages meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Slim       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Nubs      11             3 FALSE \n4 Marvin    11             1 FALSE \n5 Kyle       3             3 FALSE \n6 Figaro     3             2 FALSE \n7 Dude       6             2 TRUE"
  },
  {
    "objectID": "slides/w7d2.html#select-1",
    "href": "slides/w7d2.html#select-1",
    "title": "Intro to dplyr",
    "section": "select()",
    "text": "select()\n\nselect() selects a subset of columns in the dataset."
  },
  {
    "objectID": "slides/w7d2.html#select-names-and-ages-from-more_pets",
    "href": "slides/w7d2.html#select-names-and-ages-from-more_pets",
    "title": "Intro to dplyr",
    "section": "select() names and ages from more_pets",
    "text": "select() names and ages from more_pets\n\nselect(more_pets, names, ages)\n\n# A tibble: 7 × 2\n  names   ages\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Dude       6\n2 Pickle     5\n3 Kyle       3\n4 Nubs      11\n5 Marvin    11\n6 Figaro     3\n7 Slim       6"
  },
  {
    "objectID": "slides/w7d2.html#remove-meals_per_day-from-more_pets",
    "href": "slides/w7d2.html#remove-meals_per_day-from-more_pets",
    "title": "Intro to dplyr",
    "section": "remove meals_per_day from more_pets",
    "text": "remove meals_per_day from more_pets\n\nselect(more_pets, -meals_per_day, -ages)\n\n# A tibble: 7 × 2\n  names  is_dog\n  &lt;chr&gt;  &lt;lgl&gt; \n1 Dude   TRUE  \n2 Pickle FALSE \n3 Kyle   FALSE \n4 Nubs   FALSE \n5 Marvin FALSE \n6 Figaro FALSE \n7 Slim   TRUE  \n\n\n\n\nNOTE: The book uses ! instead of - in select(). We prefer - and will not use !."
  },
  {
    "objectID": "slides/w7d2.html#select-columns-that-end-with-s",
    "href": "slides/w7d2.html#select-columns-that-end-with-s",
    "title": "Intro to dplyr",
    "section": "select() columns that end with “s”",
    "text": "select() columns that end with “s”\n\nselect(more_pets, ends_with(\"s\"))\n\n# A tibble: 7 × 2\n  names   ages\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Dude       6\n2 Pickle     5\n3 Kyle       3\n4 Nubs      11\n5 Marvin    11\n6 Figaro     3\n7 Slim       6\n\n\n\n\nNOTE: The ends_with() function can be quite useful when selecting columns."
  },
  {
    "objectID": "slides/w7d2.html#rename-1",
    "href": "slides/w7d2.html#rename-1",
    "title": "Intro to dplyr",
    "section": "rename()",
    "text": "rename()\n\nrename() renames columns that are already in your dataset."
  },
  {
    "objectID": "slides/w7d2.html#rename-meals_per_day-to-meals-in-the-more_pets-tibble",
    "href": "slides/w7d2.html#rename-meals_per_day-to-meals-in-the-more_pets-tibble",
    "title": "Intro to dplyr",
    "section": "rename() meals_per_day to meals in the more_pets tibble",
    "text": "rename() meals_per_day to meals in the more_pets tibble\n\nrename(more_pets, meals = meals_per_day)\n\n# A tibble: 7 × 4\n  names   ages meals is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6     2 TRUE  \n2 Pickle     5     3 FALSE \n3 Kyle       3     3 FALSE \n4 Nubs      11     3 FALSE \n5 Marvin    11     1 FALSE \n6 Figaro     3     2 FALSE \n7 Slim       6     2 TRUE  \n\n\n\n\nNote the syntax of new_name = old_name to rename the old_name column with new_name."
  },
  {
    "objectID": "slides/w7d2.html#rename-meals_per_day-to-meals-and-ages-to-age-in-the-more_pets-tibble",
    "href": "slides/w7d2.html#rename-meals_per_day-to-meals-and-ages-to-age-in-the-more_pets-tibble",
    "title": "Intro to dplyr",
    "section": "rename() meals_per_day to meals and ages to age in the more_pets tibble",
    "text": "rename() meals_per_day to meals and ages to age in the more_pets tibble\n\nrename(more_pets, \n       meals = meals_per_day,\n       age = ages)\n\n# A tibble: 7 × 4\n  names    age meals is_dog\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6     2 TRUE  \n2 Pickle     5     3 FALSE \n3 Kyle       3     3 FALSE \n4 Nubs      11     3 FALSE \n5 Marvin    11     1 FALSE \n6 Figaro     3     2 FALSE \n7 Slim       6     2 TRUE"
  },
  {
    "objectID": "slides/w7d2.html#rename_with",
    "href": "slides/w7d2.html#rename_with",
    "title": "Intro to dplyr",
    "section": "rename_with()",
    "text": "rename_with()\n\nrename_with() allows us to use a function to rename columns. For example, the toupper() function. This function takes a character vector and makes it upper case:\n\n\ntoupper(\"trees\")\n\n[1] \"TREES\""
  },
  {
    "objectID": "slides/w7d2.html#rename_with-1",
    "href": "slides/w7d2.html#rename_with-1",
    "title": "Intro to dplyr",
    "section": "rename_with()",
    "text": "rename_with()\n\nWe can use toupper() to rename all the columns in more_pets to upper case:\n\n\nrename_with(more_pets, toupper)\n\n# A tibble: 7 × 4\n  NAMES   AGES MEALS_PER_DAY IS_DOG\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE"
  },
  {
    "objectID": "slides/w7d2.html#rename_with-2",
    "href": "slides/w7d2.html#rename_with-2",
    "title": "Intro to dplyr",
    "section": "rename_with()",
    "text": "rename_with()\n\nRather than renaming all the columns to upper case, we choose which columns we’d like to change to upper case:\n\n\nrename_with(more_pets, toupper, c(names, ages))\n\n# A tibble: 7 × 4\n  NAMES   AGES meals_per_day is_dog\n  &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt; \n1 Dude       6             2 TRUE  \n2 Pickle     5             3 FALSE \n3 Kyle       3             3 FALSE \n4 Nubs      11             3 FALSE \n5 Marvin    11             1 FALSE \n6 Figaro     3             2 FALSE \n7 Slim       6             2 TRUE  \n\n\n\n\nNOTE: Careful here, we need the c() function in this case to choose which columns to rename with toupper()"
  },
  {
    "objectID": "slides/w7d2.html#next-time",
    "href": "slides/w7d2.html#next-time",
    "title": "Intro to dplyr",
    "section": "Next time",
    "text": "Next time\n\nMore dplyr verbs\nWriting a sentence with pipes"
  },
  {
    "objectID": "slides/w5d1.html#annoucements",
    "href": "slides/w5d1.html#annoucements",
    "title": "Functions and conditionals",
    "section": "Annoucements",
    "text": "Annoucements\n\nMidterm 1 is next week, Oct 3, during lab time.\nLab 1 and 2 grades are posted on D2L.\nLab 3 grades will be released by the end of the week on D2L."
  },
  {
    "objectID": "slides/w5d1.html#agenda",
    "href": "slides/w5d1.html#agenda",
    "title": "Functions and conditionals",
    "section": "Agenda",
    "text": "Agenda\n\nMore functions\nInformative error messages\nConditional statements"
  },
  {
    "objectID": "slides/w5d1.html#recall-the-pow-function-from-last-time",
    "href": "slides/w5d1.html#recall-the-pow-function-from-last-time",
    "title": "Functions and conditionals",
    "section": "Recall the pow() function from last time",
    "text": "Recall the pow() function from last time\n\npow &lt;- function(x, v) {\n  result &lt;- x^v\n  return(result)\n}"
  },
  {
    "objectID": "slides/w5d1.html#pow-test",
    "href": "slides/w5d1.html#pow-test",
    "title": "Functions and conditionals",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25"
  },
  {
    "objectID": "slides/w5d1.html#pow-test-1",
    "href": "slides/w5d1.html#pow-test-1",
    "title": "Functions and conditionals",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32"
  },
  {
    "objectID": "slides/w5d1.html#pow-test-2",
    "href": "slides/w5d1.html#pow-test-2",
    "title": "Functions and conditionals",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/w5d1.html#pow-test-3",
    "href": "slides/w5d1.html#pow-test-3",
    "title": "Functions and conditionals",
    "section": "pow() test",
    "text": "pow() test\n\npow(5, 2)\n\n[1] 25\n\npow(v = 5, x = 2)\n\n[1] 32\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\npow(x = 5, z = 2)\n\nError in pow(x = 5, z = 2): unused argument (z = 2)"
  },
  {
    "objectID": "slides/w5d1.html#errors",
    "href": "slides/w5d1.html#errors",
    "title": "Functions and conditionals",
    "section": "Errors",
    "text": "Errors\nConsider the following errors:\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\npow(x = 5, z = 2)\n\nError in pow(x = 5, z = 2): unused argument (z = 2)\n\n\n\n\nWhat do/don’t you like about each error?\nWhich error message is better? Why?\n\n\n\n\n\n−+\n02:00"
  },
  {
    "objectID": "slides/w5d1.html#informative-error-messages-1",
    "href": "slides/w5d1.html#informative-error-messages-1",
    "title": "Functions and conditionals",
    "section": "Informative Error Messages",
    "text": "Informative Error Messages\n\nnew_pow &lt;- function(x, v) {\n  stopifnot(\n    \"The x argument value should be numeric.\" = is.numeric(x),\n    \"The v argument value should be numeric.\" = is.numeric(v)\n  )\n  \n  result &lt;- x^v\n  return(result)\n}"
  },
  {
    "objectID": "slides/w5d1.html#informative-error-messages-2",
    "href": "slides/w5d1.html#informative-error-messages-2",
    "title": "Functions and conditionals",
    "section": "Informative Error Messages",
    "text": "Informative Error Messages\n\nnew_pow &lt;- function(x, v) {\n  stopifnot(\n    \"The x argument value should be numeric.\" = is.numeric(x),\n    \"The v argument value should be numeric.\" = is.numeric(v)\n  )\n  \n  result &lt;- x^v\n  return(result)\n}"
  },
  {
    "objectID": "slides/w5d1.html#testing-pow-vs.-new_pow",
    "href": "slides/w5d1.html#testing-pow-vs.-new_pow",
    "title": "Functions and conditionals",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric."
  },
  {
    "objectID": "slides/w5d1.html#testing-pow-vs.-new_pow-1",
    "href": "slides/w5d1.html#testing-pow-vs.-new_pow-1",
    "title": "Functions and conditionals",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric.\n\nnew_pow(10, \"two\")\n\nError in new_pow(10, \"two\"): The v argument value should be numeric."
  },
  {
    "objectID": "slides/w5d1.html#testing-pow-vs.-new_pow-2",
    "href": "slides/w5d1.html#testing-pow-vs.-new_pow-2",
    "title": "Functions and conditionals",
    "section": "Testing pow() vs. new_pow()",
    "text": "Testing pow() vs. new_pow()\n\npow(\"ten\", \"two\")\n\nError in x^v: non-numeric argument to binary operator\n\nnew_pow(\"ten\", \"two\")\n\nError in new_pow(\"ten\", \"two\"): The x argument value should be numeric.\n\nnew_pow(10, \"two\")\n\nError in new_pow(10, \"two\"): The v argument value should be numeric.\n\nnew_pow(10, 2)\n\n[1] 100"
  },
  {
    "objectID": "slides/w5d1.html#difference-function",
    "href": "slides/w5d1.html#difference-function",
    "title": "Functions and conditionals",
    "section": "Difference function",
    "text": "Difference function\nWrite a function, called diff(), that takes the difference (subtracts) its first and second arguments. If you have time, try to include any necessary informative error messages.\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/w5d1.html#difference-function-1",
    "href": "slides/w5d1.html#difference-function-1",
    "title": "Functions and conditionals",
    "section": "Difference function",
    "text": "Difference function\nA possible solution:\n\ndiff &lt;- function(a, b) {\n  result &lt;- a - b\n  return(result)\n}"
  },
  {
    "objectID": "slides/w5d1.html#difference-function-2",
    "href": "slides/w5d1.html#difference-function-2",
    "title": "Functions and conditionals",
    "section": "Difference function",
    "text": "Difference function\nA possible solution with informative error messages:\n\ndiff &lt;- function(a, b) {\n  stopifnot(\n    \"The a argument value should be numeric.\" = is.numeric(a),\n    \"The b argument value should be numeric.\" = is.numeric(b)\n  )\n  result &lt;- a - b\n  return(result)\n}"
  },
  {
    "objectID": "slides/w5d1.html#difference-function-3",
    "href": "slides/w5d1.html#difference-function-3",
    "title": "Functions and conditionals",
    "section": "Difference function",
    "text": "Difference function\nTesting:\n\ndiff(5, 2)\n\n[1] 3\n\ndiff(2, 5)\n\n[1] -3\n\ndiff(\"two\", 5)\n\nError in diff(\"two\", 5): The a argument value should be numeric."
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-1",
    "href": "slides/w5d1.html#conditional-statements-1",
    "title": "Functions and conditionals",
    "section": "Conditional statements",
    "text": "Conditional statements\n\nConditional statements allow for code to run based on whether a statement is true or false:\n\n\nif (condition here is true) {\n  run any code within these curly braces \n}"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-2",
    "href": "slides/w5d1.html#conditional-statements-2",
    "title": "Functions and conditionals",
    "section": "Conditional statements",
    "text": "Conditional statements\n\nConditional statements allow for code to run based on whether a statement is true or false:\n\n\nif (condition here is true) {\n  run any code within these curly braces \n} else {\n  run this code\n}"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-3",
    "href": "slides/w5d1.html#conditional-statements-3",
    "title": "Functions and conditionals",
    "section": "Conditional statements",
    "text": "Conditional statements\n\nWe can also use the else if condition to check multiple conditions:\n\n\nif (condition 1 is true) {\n  run any code within these curly braces \n} else if (some other condition is true) {\n  run this code\n} else {\n  this code will run\n}"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example",
    "href": "slides/w5d1.html#conditional-statement-example",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n} else {\n  print(\":-(\")\n}\n\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example-1",
    "href": "slides/w5d1.html#conditional-statement-example-1",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n} else {\n  print(\":-(\")\n}\n\n[1] \"evergreen!\""
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example-2",
    "href": "slides/w5d1.html#conditional-statement-example-2",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\ndbh &lt;- 22\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n} else if (dbh &gt; 20) {\n  print(\"big tree!\")\n} else {\n  print(\":-(\")\n}\n\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example-3",
    "href": "slides/w5d1.html#conditional-statement-example-3",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\ndbh &lt;- 22\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n} else if (dbh &gt; 20) {\n  print(\"big tree!\")\n} else {\n  print(\":-(\")\n}\n\n[1] \"evergreen!\""
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example-4",
    "href": "slides/w5d1.html#conditional-statement-example-4",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\ndbh &lt;- 22\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n}  \nif (dbh &gt; 20) {\n  print(\"big tree!\")\n} else {\n  print(\":-(\")\n}\n\n\n\n\n−+\n00:30"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statement-example-5",
    "href": "slides/w5d1.html#conditional-statement-example-5",
    "title": "Functions and conditionals",
    "section": "Conditional statement example",
    "text": "Conditional statement example\nWhat will this print?\n\nspecies &lt;- \"doug-fir\"\ndbh &lt;- 22\n\nif (species == \"doug-fir\") {\n  print(\"evergreen!\")\n}  \n\n[1] \"evergreen!\"\n\nif (dbh &gt; 20) {\n  print(\"big tree!\")\n} else {\n  print(\":-(\")\n}\n\n[1] \"big tree!\""
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-in-a-function",
    "href": "slides/w5d1.html#conditional-statements-in-a-function",
    "title": "Functions and conditionals",
    "section": "Conditional statements in a function",
    "text": "Conditional statements in a function\n\nLet’s say you’re tired of R defaulting na.rm = FALSE when you take the mean of a variable. You could write a function with a different default!"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-in-a-function-1",
    "href": "slides/w5d1.html#conditional-statements-in-a-function-1",
    "title": "Functions and conditionals",
    "section": "Conditional statements in a function",
    "text": "Conditional statements in a function\n\nLet’s say you’re tired of R defaulting na.rm = FALSE when you take the mean of a variable. You could write a function with a different default!\nIt might look something like this:\n\n\nmy_mean &lt;- function(x, na.rm = TRUE) {\n  if (na.rm) {\n    x &lt;- x[!is.na(x)]\n  }\n  \n  average &lt;- sum(x) / length(x)\n  return(average)\n}"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-in-a-function-2",
    "href": "slides/w5d1.html#conditional-statements-in-a-function-2",
    "title": "Functions and conditionals",
    "section": "Conditional statements in a function",
    "text": "Conditional statements in a function\n\nLet’s say you’re tired of R defaulting na.rm = FALSE when you take the mean of a variable. You could write a function with a different default!\nIt might look something like this:\n\n\nmy_mean &lt;- function(x, na.rm = TRUE) {\n  if (na.rm) {\n    x &lt;- x[!is.na(x)]\n  }\n  \n  average &lt;- sum(x) / length(x)\n  return(average)\n}"
  },
  {
    "objectID": "slides/w5d1.html#conditional-statements-in-a-function-3",
    "href": "slides/w5d1.html#conditional-statements-in-a-function-3",
    "title": "Functions and conditionals",
    "section": "Conditional statements in a function",
    "text": "Conditional statements in a function\n\nnums &lt;- c(1, 2, 3, NA, 5, 6)\nmy_mean(x = nums)\n\n[1] 3.4\n\nmean(x = nums)\n\n[1] NA\n\nmean(x = nums, na.rm = TRUE)\n\n[1] 3.4"
  },
  {
    "objectID": "slides/w5d1.html#a-cautious-mean",
    "href": "slides/w5d1.html#a-cautious-mean",
    "title": "Functions and conditionals",
    "section": "A cautious mean",
    "text": "A cautious mean\n\nmy_mean &lt;- function(x, na.rm = TRUE) {\n  if (na.rm) {\n    if (any(is.na(x))) {\n      print(\"Watch out, you are removing NAs\")\n    } else {\n      print(\"We didn't remove any NAs\")\n    }\n    x &lt;- x[!is.na(x)]\n  } \n  \n  average &lt;- sum(x) / length(x)\n  return(average)\n}"
  },
  {
    "objectID": "slides/w5d1.html#a-cautious-mean-1",
    "href": "slides/w5d1.html#a-cautious-mean-1",
    "title": "Functions and conditionals",
    "section": "A cautious mean",
    "text": "A cautious mean\n\nnums &lt;- c(1, 2, 3, NA, 5, 6)\nprimes &lt;- c(2, 3, 5, 7, 11, 13, 17, 19, 23)\n\nWhat will\n\nmy_mean(x = nums)\nmy_mean(x = primes)\n\noutput?\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/w5d1.html#a-cautious-mean-2",
    "href": "slides/w5d1.html#a-cautious-mean-2",
    "title": "Functions and conditionals",
    "section": "A cautious mean",
    "text": "A cautious mean\n\nmy_mean(x = nums)\n\n[1] \"Watch out, you are removing NAs\"\n\n\n[1] 3.4\n\nmy_mean(x = primes)\n\n[1] \"We didn't remove any NAs\"\n\n\n[1] 11.11111"
  },
  {
    "objectID": "slides/w5d1.html#a-cautious-mean-3",
    "href": "slides/w5d1.html#a-cautious-mean-3",
    "title": "Functions and conditionals",
    "section": "A cautious mean",
    "text": "A cautious mean\n\nmy_mean(x = nums)\n\n[1] \"Watch out, you are removing NAs\"\n\n\n[1] 3.4\n\nmy_mean(x = primes)\n\n[1] \"We didn't remove any NAs\"\n\n\n[1] 11.11111\n\n# What about `prime_mean`? \nprime_mean &lt;- my_mean(x = primes)\n\n[1] \"We didn't remove any NAs\""
  },
  {
    "objectID": "slides/w5d1.html#a-cautious-mean-4",
    "href": "slides/w5d1.html#a-cautious-mean-4",
    "title": "Functions and conditionals",
    "section": "A cautious mean",
    "text": "A cautious mean\n\nmy_mean(x = nums)\n\n[1] \"Watch out, you are removing NAs\"\n\n\n[1] 3.4\n\nmy_mean(x = primes)\n\n[1] \"We didn't remove any NAs\"\n\n\n[1] 11.11111\n\n# What about `prime_mean`? \nprime_mean &lt;- my_mean(x = primes)\n\n[1] \"We didn't remove any NAs\"\n\nprime_mean\n\n[1] 11.11111"
  },
  {
    "objectID": "slides/w5d1.html#activity",
    "href": "slides/w5d1.html#activity",
    "title": "Functions and conditionals",
    "section": "Activity",
    "text": "Activity\nWrite a function that takes two numbers as arguments (inputs) and does the following:\nif the input’s sum is positive or 0, take the square root of their sum (recall the sqrt()) function; otherwise take the absolute value (recall abs()) of their sum. Throughout the function, print() some informative messages. Name this function abs_sqrt_sum().\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/w5d1.html#activity-possible-solution",
    "href": "slides/w5d1.html#activity-possible-solution",
    "title": "Functions and conditionals",
    "section": "Activity: possible solution",
    "text": "Activity: possible solution\n\nabs_sqrt_sum &lt;- function(a, b) {\n  if (a + b &gt;= 0) {\n    print(\"positive sum\")\n    return(sqrt(a + b))\n  } else {\n    print(\"negative sum\")\n    return(sqrt(abs(a + b)))\n  }\n}"
  },
  {
    "objectID": "slides/w5d1.html#next-time",
    "href": "slides/w5d1.html#next-time",
    "title": "Functions and conditionals",
    "section": "Next time",
    "text": "Next time\n\nLoops\nMore advanced functions\nReview Quarto"
  }
]