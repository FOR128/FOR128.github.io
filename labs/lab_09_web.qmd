---
title: "Joining and Reshaping Data"
subtitle: "FOR 128: Lab 9"
author: ""
date: "11/6/2024"
format:
  html: default
editor: 
  mode: source
---

## Welcome

Welcome to Lab 9! Today, we'll focus on data joins and reshaping data. Parts 1 and 2 of this lab focuses on building your `dplyr` skills, especially in relation to joins. However, you'll need to use some other `dplyr` functions along the way. In Part 3 of the lab, we'll focus on reshaping data with `tidyr`. 

### Learning objectives

-   Use `dplyr` joins
-   Use `tidyr` to reshape data

### Deliverables (i.e., what to put in the lab drop box)

Upload your rendered PDF (`lab_09.pdf`) **and** Quarto (`lab_09.qmd`) document to the lab drop box. Make sure the Quarto document properly renders to PDF.

### Collaborator(s)

List any collaborators you worked with below. 

# Introduction

## Motivating Data

For this lab, you'll first work with the small datasets `x` and `y` presented in class to get started with joins. After a few exercises, you'll move to some real data from the US Forest Service Forest Inventory & Analysis (FIA) program to gain more experience joining complex datasets. 

The four FIA datasets of interest are available on D2L in the Lab 8 module. The `plot_biomass.csv` dataset contains information on the unique FIA plot ID (`PLT_CN`) and a measurement of aboveground biomass for each plot. The `plot_locations.csv` dataset contains location information for each of those same plots, along with the unique identifier (`PLT_CN`). Notably, `plot_locations.csv` has columns denoting the state and county the plot resides in. However, we don't have the actual state and county names for each plot, just their unique code. We will have to do some data joins with the `state_reference.csv` and `county_reference.csv` datasets to find out where these plots are.  



## Methods: `dplyr` and `tidyr`

Use `dplyr` and `tidyr` functions that we've learned over the past few weeks to answer the questions in this lab. 



## Exercise 0

Load any packages you'll need for this lab below.

```{r}

```

```{r}
#| echo: false
#| message: false
library(tidyverse)
```

# Part 1: Toy Data

## Exercise 1

Create the `x` and `y` datasets that we have used over the lectures related to data joins using the `tibble()` function. These datasets are shown below for your convenience. 

```{r}

```

```{r}
#| echo: false
#| message: false
knitr::include_graphics("../slides/figs/tibbles.png")
x <- tibble(spp_code = c("ABBA", "BEPA", "PIST"),
            common_name = c("balsum fir", "paper birch", "white pine"))

y <- tibble(spp_code = c("ABBA", "BEPA", "LALA"),
            latin_name = c("Abies balsamea", 
                           "Betula papyrifera",
                           "Larix laricina"))
```

In R, your resulting tibbles should look as follows:
```{r}
x
y
```


## Exercise 2

Create a dataset called `z` by joining `x` and `y` by their species code. Retain only the rows in `x` and `y` that have matching species codes. Print your resulting tibble `z`. Justify which join you used. 

```{r}

```

```{r}
#| echo: false
#| message: false
z <- inner_join(x, y, by = "spp_code")
z
```

## Exercise 3

Now, create a dataset called `w` that contains all the rows in `x`, but only the rows in `y` that have a species code that match to `x` by joining `x` and `y`. Make sure the column order is `spp_code`, `common_name`, `latin_name` Justify which join you used.

```{r}

```


```{r}
#| echo: false
#| message: false
w <- left_join(x, y, by = "spp_code")
w
```

## Exercise 4

Next, with another join of `x` and `y`, create a dataset called `w_clone` with the same rows, columns, and values as `w`, but that has the `latin_name` column before `common_name`. Justify which join you used. 

```{r}

```

```{r}
#| echo: false
#| message: false
w_clone <- right_join(y, x, by = "spp_code")
w_clone
```

## Exercise 5

Use a *filtering* join to check if there are any species codes in `y` that do not exist in `x`. Are there any? If so, what is the species code?

```{r}

```


```{r}
#| echo: false
#| message: false
anti_join(y, x, by = "spp_code")
```

# Part 2: FIA Data

## Exercise 6

Load in the four datasets included in the posting of Lab 9 on the course website. Name each of them the same as they are named as files, without the `.csv` extension. For example, for the "plot_biomass.csv" file, name the object `plot_biomass`, etc. Take a look at these datasets and try to understand them. What does a row represent in each one? 

```{r}

```


```{r}
#| echo: false
#| message: false
plot_biomass <- read_csv("data/plot_biomass.csv")
plot_locations <- read_csv("data/plot_locations.csv")
state_reference <- read_csv("data/state_reference.csv")
county_reference <- read_csv("data/county_reference.csv")

# plot_biomass: each row is an FIA plot
# plot_locations: each row is an FIA plot
# state_reference: each row is a state
# county_reference: each row is a county-state combination
```

```{r}
plot_biomass
plot_locations
state_reference
county_reference
```


## Exercise 7

Now that you've got a sense of the data, join two datasets together to get both plot locations and plot biomass in the same tibble. Call this new tibble `plots`. Make sure to specify what you are joining by, and justify which join you used. Your new dataset should have 191 rows and 6 columns. Take a `glimpse()` at your new tibble. 

```{r}

```


```{r}
#| echo: false
#| message: false
plots <- plot_biomass %>%
  left_join(plot_locations, by = "PLT_CN")
```

```{r}
glimpse(plots)
```


## Exercise 8

Now you have your plot location information and plot biomass measurements in one tibble, but we still don't know *where* these plots are. Add some columns to `plots` by joining it with `state_reference` in a way such that each row of `plots` now has a state name and abbreviation associated with it. Use `dplyr` to figure out what state(s) are these plots in?

```{r}

```


```{r}
#| echo: false
#| message: false
plots <- plots %>%
  left_join(state_reference, by = c("STATECD" = "state_cd"))

# Washington and Oregon
```

```{r}
plots
```



## Exercise  9

Use a filtering join to see if any rows of `plots` do not have a match in `state_reference`. Are there any? If so, how many? 

```{r}

```


```{r}
#| echo: false
#| message: false
anti_join(plots, state_reference, by = c("STATECD" = "state_cd"))

# no
```

## Exercise 10

Now you've added biomass and state information to your plot data. Great job! We have one more dataset to join. Join the `county_reference` tibble to `plots` so you can see what county each FIA plot is in. Hint: you might get an error here. Make sure to check the column classes you are joining by and change them as needed. You should have 191 rows and 10 columns in `plots` after this join. What counties are these plots in? 

```{r}
#| echo: false
#| message: false
plots <- plots %>%
  mutate(COUNTYFIPS = as.character(COUNTYFIPS)) %>%
  left_join(county_reference, by = "COUNTYFIPS") 

# Clark, Columbia, Multnomah
```

```{r}
plots
```


## Exercise 11

Now you've wrangled all your data into one tibble. Great job! Use a series of piped `dplyr` functions to compute the average biomass in each county.

```{r}
#| echo: false
#| message: false
plots %>%
  group_by(COUNTYNM) %>%
  summarize(avg_bio = mean(DRYBIO_AG_TPA))
```

# Part 3: Reshaping Data




# Wrap up

Congratulations! You've made it to the end of Lab 9. Make sure to render your final document and submit both the .pdf and .qmd file to D2L.
