---
title: "Functions"
editor: 
  mode: source
webr:
  show-startup-message: false
filters:
  - webr
engine: knitr
format: 
  revealjs:
    author: "Practical Computing and Data Science Tools"
    height: 900
    width: 1600
    theme: ../assets/slides.scss
    multiplex: false
    transition: fade
    slide-number: c
    incremental: false
    center: false
    menu: false
    highlight-style: github
    progress: false
    code-overflow: wrap
    title-slide-attributes:
      data-background-image: ../assets/for128-hex.png
      data-background-size: 20%
      data-background-position: 50% 20%
---

## Annoucements

-   Midterm 1 is in **one week**, Oct 3, during lab time. 
-   Lab 3 grades coming soon.
-   Lab 4 grades by end of weekend. 

## Agenda

-   Warm-up
-   Loops
-   Forestry functions
-   Quarto practice

# Warm-up {background-color="#00817c"} 

## Warm-up activity

Write a function that takes two *vectors* as arguments (inputs) and does the following: 

Takes the difference of the vectors' means. In other words, take the `mean()` of each input and subtract the first input's `mean()` from the second input's `mean()`. Make sure to handle NA values that might exist in the vectors. Name this function `diff_in_means()`. 

Bonus: (only do if you have time) add a requirement that `a` and `b` are the same length vector. 

```{r}
countdown::countdown(5)
```


## Warm-up activity: possible solution


```{r}
#| echo: true
diff_in_means <- function(a, b, na.rm = FALSE) {
  if (na.rm) {
    a <- a[!is.na(a)]
    b <- b[!is.na[b]]
  }
  
  a_mean <- mean(a)
  b_mean <- mean(b)
  
  return(a_mean - b_mean)
}
```

## Warm-up activity: possible solution with bonus


```{r}
#| echo: true
diff_in_means <- function(a, b, na.rm = FALSE) {
  stopifnot(
    "Arguments `a` and `b` must be the same length." = length(a) == length(b)
  )
  
  if (na.rm) {
    a <- a[!is.na(a)]
    b <- b[!is.na(b)]
  }
  
  a_mean <- mean(a)
  b_mean <- mean(b)
  
  return(a_mean - b_mean)
}
```

# Loops {background-color="#00817c"} 

## Loops

::: incremental

-   Loops are important to `R` and many other programming languages.
-   Understanding how to read, write, and utilize loops are key skills for data scientists. 
-   We'll introduce two types of loops in `R`: `while` and `for` loops

:::

## `while` loops

-   `while` loops look as follows: 

```{r}
#| echo: true
#| eval: false
while (condition is true) {
  run this code until condition is false
}
```

## `while` loops

```{webr-r}
i <- 0
while (i < 3) {
  i <- i + 1
  print(i)
}
```

## `for` loops

-   `for` loops look as follows: 

```{r}
#| echo: true
#| eval: false
for (variable in vector) {
  run this code until through each element of the vector
}
```

## `for` loops

```{webr-r}
for (i in 1:3) {
  print(i)
}
```

## `for` loops

```{webr-r}
x <- c(5, 16, 10)
total <- 0
for (i in 1:length(x)) {
  total <- total + x[i]
} 
total
average <- total / length(total)
```

## `for` loop in a function

```{r}
#| echo: true
#| code-line-numbers: "1,11|2|4,5,6|8|10"
my_mean <- function(x) {
  total <- 0
  
  for (i in 1:length(x)) {
    total <- total + x[i]
  }
  
  average <- total / length(x)
  
  return(average)
}
```


# Functions for forestry {background-color="#00817c"} 

## Basal area

::::: {.columns}

:::: {.column width="45%"}

::: incremental

-   Basal area is the measurement of a tree's cross-sectional area at breast height, and is derived from the diameter at breast height measurement. 
-   Oftentimes, we care about the basal area in a given stand and want to report basal area on a per-unit-area basis (e.g. square feet per acre or square meters per hectare), but we only have DBH measurements. 

:::

::::

:::: {.column width="10%"}
<!-- empty column to create gap -->
::::

:::: {.column width="45%"}

```{r}
#| fig-align: 'right'
knitr::include_graphics("figs/ponderosa.png")
```

::::

:::::

## Calculating basal area

Basal area in square feet per acre:
$$
\text{BA} = \frac{\pi}{144} \cdot \left( \frac{\text{DBH}}{2} \right)^2 = \frac{\pi}{4\cdot 144} \cdot \text{DBH}^2
$$
Basal area in square meters per hectare:
$$
\text{BA} = \frac{\pi}{10000} \cdot \left( \frac{\text{DBH}}{2} \right)^2 = \frac{\pi}{4\cdot 10000} \cdot \text{DBH}^2
$$
Basal area is of the form: 

$\text{forester's constant} \times \text{DBH}^2$

## Implementation in `R`

What we want: A function that

::: incremental

-   has sensible input checks,
-   computes basal area in either square feet per acre **or** square meters per hectare, and
-   is flexible enough to allow for DBH measurements to be in inches or centimeters.

:::

## Implementation in `R`

How we'll do it:

::: incremental

-   Define the forester's constant for whichever units DBH measurements are in,
-   Convert inches to centimeters or vise versa to satisfy our formula for basal area,
-   Compute basal area based on our formula,
-   Go back and add some sensible input checks. 

:::

## Calculating basal area

Basal area in square feet per acre:
$$
\text{BA} = \frac{\pi}{144} \cdot \left( \frac{\text{DBH}}{2} \right)^2 = \frac{\pi}{4\cdot 144} \cdot \text{DBH}^2
$$
Basal area in square meters per hectare:
$$
\text{BA} = \frac{\pi}{10000} \cdot \left( \frac{\text{DBH}}{2} \right)^2 = \frac{\pi}{4\cdot 10000} \cdot \text{DBH}^2
$$
There are 2.54 centimeters in an inch. 

---

```{webr-r}

```



## `basal_area()`, by the book.

```{r}
#| echo: true
basal_area <- function(dbh,
                       dbh_units = "in",
                       ba_units = "sq_ft") {
  # Some input checks.
  stopifnot(
    "dbh should be numeric." = is.numeric(dbh),
    "dbh_units should be either 'in' or 'cm'." = dbh_units %in% c("in", "cm"),
    "ba_units should be either 'sq_ft' or 'sq_m'." = ba_units %in% c("sq_ft", "sq_m")
  )
  # Define c.
  if (ba_units == "sq_ft") {
    c <- pi / (4 * 144)
  } else{ # ba_units == "sq_m" 
    c <- pi / (4 * 10000)
  }
  # Compute ba and return.
  if (dbh_units == "in" & ba_units == "sq_ft") {
    ba <- c * dbh ^ 2
  } else if (dbh_units == "in" &
             ba_units == "sq_m") {
    ba <- c * (2.54 * dbh) ^ 2
  } else if (dbh_units == "cm" & ba_units == "sq_m") {
    ba <- c * dbh ^ 2
  } else{ # dbh_units == "cm" & ba_units == "sq_ft" 
    ba <- c * (dbh / 2.54)^2
  }
  return(ba)
}
```




## Next time

-   Introduction to the `tidyverse`

```{r}
#| fig-align: 'center'
knitr::include_graphics("figs/tidyverse.png")
```


# See you all upstairs in lab! {background-color="#00817c"} 











